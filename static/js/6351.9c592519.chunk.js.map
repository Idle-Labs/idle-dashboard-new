{"version":3,"file":"static/js/6351.9c592519.chunk.js","mappings":"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","sources":["components/AssetPage/AssetPage.tsx","components/AssetPage/GaugeStaking.tsx","components/AssetPage/InteractiveComponent.tsx","components/Scrollable/Scrollable.tsx","components/StrategyLabel/StrategyLabel.tsx","components/TransactionList/TransactionList.tsx"],"sourcesContent":["import { Earn } from './Earn'\nimport { strategies } from 'constants/'\nimport { GaugeStaking } from './GaugeStaking'\nimport { useNavigate } from 'react-router-dom'\nimport { useThemeProvider } from 'contexts/ThemeProvider'\nimport { InteractiveComponent } from './InteractiveComponent'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { StrategyLabel } from 'components/StrategyLabel/StrategyLabel'\nimport React, { useMemo, useState, useEffect, useCallback } from 'react'\nimport { Approve, Deposit, Withdraw } from 'components/OperativeComponent/OperativeComponent'\nimport { ContainerProps, Box, Flex, Stack, HStack, VStack, Tabs, Tab, TabList } from '@chakra-ui/react'\n\nexport const AssetPage: React.FC<ContainerProps> = ({ children, ...rest }) => {\n  const navigate = useNavigate()\n  const { isMobile } = useThemeProvider()\n  const { params, location, searchParams } = useBrowserRouter()\n  const [ getSearchParams, setSearchParams ] = searchParams\n  const [ selectedTabIndex, setSelectedTabIndex ] = useState<number>(0)\n  const { isPortfolioLoaded, selectors: { selectAssetById, selectVaultGauge } } = usePortfolioProvider()\n\n  const strategy = useMemo(() => {\n    return Object.keys(strategies).find( strategy => strategies[strategy].route === params.strategy )\n  }, [params])\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(params.asset)\n  }, [selectAssetById, params.asset])\n\n  const vaultGauge = useMemo(() => {\n    return selectVaultGauge && selectVaultGauge(params.asset)\n  }, [selectVaultGauge, params.asset])\n\n  // Check asset exists\n  useEffect(() => {\n    if (!isPortfolioLoaded || !selectAssetById || !location) return\n    if (!asset){\n      return navigate(location.pathname.replace(`/${params.asset}`, ''))\n    }\n  }, [isPortfolioLoaded, selectAssetById, asset, params.asset, location, navigate])\n\n  const tabs = useMemo(() => {\n    const tabs = [\n      {\n        id:'earn',\n        label:'navBar.earn',\n        component: Earn,\n        actions: [\n          {\n            type: 'deposit',\n            component: Deposit,\n            label: 'common.deposit',\n            steps: [\n              {\n                type: 'approve',\n                component: Approve,\n                label:'modals.approve.header',\n              }\n            ]\n          },\n          {\n            type: 'withdraw',\n            label: 'common.withdraw',\n            component: Withdraw,\n            steps: []\n          }\n        ]\n      },\n    ]\n    if (vaultGauge){\n      tabs.push(\n        {\n          id:'gauge',\n          label:'navBar.gauge',\n          component: GaugeStaking,\n          actions: [\n            {\n              type: 'stake',\n              component: Deposit,\n              label: 'common.stake',\n              steps: [\n                {\n                  type: 'approve',\n                  component: Approve,\n                  label:'modals.approve.header',\n                }\n              ]\n            },\n            {\n              type: 'unstake',\n              label: 'common.unstake',\n              component: Withdraw,\n              steps: []\n            }\n          ]\n        }\n      )\n    }\n\n    return tabs\n  }, [vaultGauge])\n\n  const vaultId = useMemo(() => {\n    return tabs[selectedTabIndex].id === 'gauge' && vaultGauge ? vaultGauge.id : asset?.id\n  }, [tabs, selectedTabIndex, asset, vaultGauge])\n\n  const TabComponent = useMemo(() => {\n    return tabs[selectedTabIndex].component\n  }, [tabs, selectedTabIndex])\n\n  // Get selected tab id from search params\n  const selectedTabId = useMemo(() => {\n    return getSearchParams.get('tab')\n  }, [getSearchParams])\n\n  // Set tab index every time the tab search param changes\n  useEffect(() => {\n    if (selectedTabId) {\n      // console.log('selectedTabId', selectedTabId)\n      const foundTab = tabs.find( tab => tab.id.toString() === selectedTabId.toString() )\n      if (foundTab){\n        const tabIndex = tabs.indexOf(foundTab)\n        // console.log('setSelectedTabIndex', selectedTabId, foundTab, tabIndex)\n        setSelectedTabIndex(tabIndex)\n      }\n    } else {\n      setSelectedTabIndex(0)\n    }\n  }, [tabs, selectedTabId, setSelectedTabIndex])\n\n  // Change url and select tab\n  const selectTab = useCallback((tabIndex: number) => {\n    const selectedTab = tabs[tabIndex]\n    if (selectedTab) {\n      setSearchParams(`?tab=${selectedTab.id}`)\n    }\n  }, [tabs, setSearchParams])\n\n  const renderedTabs = useMemo(() => {\n    return (\n      <Tabs\n        index={selectedTabIndex}\n        variant={'unstyled'}\n        width={['100%', 'auto']}\n      >\n        <TabList>\n          {\n            tabs.map( (tab, index) => (\n              <Translation key={`tab_${index}`} component={Tab} width={[`${100/tabs.length}%`, 'auto']} translation={tab.label} onClick={() => selectTab(index)} />\n            ))\n          }\n        </TabList>\n      </Tabs>\n    )\n  }, [tabs, selectTab, selectedTabIndex])\n\n  return (\n    <AssetProvider\n      wrapFlex={true}\n      assetId={params.asset}\n    >\n      <Box\n        width={'100%'}\n      >\n        <Flex\n          my={[10, 14]}\n          width={'100%'}\n          id={'asset-top-header'}\n          direction={['column', 'row']}\n          justifyContent={['center', 'space-between']}\n        >\n          <Stack\n            width={'100%'}\n            spacing={[7, 10]}\n            alignItems={'center'}\n            justifyContent={'center'}\n            direction={['column', 'row']}\n          >\n            <AssetLabel assetId={params.asset} fontSize={'h2'} />\n            <Stack\n              flex={1}\n              direction={'row'}\n              width={['100%', 'auto']}\n              borderBottom={'1px solid'}\n              borderColor={'divider'}\n              justifyContent={'space-between'}\n            >\n              {renderedTabs}\n              {\n                !isMobile && (\n                  <StrategyLabel strategy={strategy} color={'cta'} textStyle={'italic'} />\n                )\n              }\n            </Stack>\n          </Stack>\n        </Flex>\n        <HStack\n          width={'100%'}\n          spacing={[0, 10]}\n          alignItems={'space-between'}\n        >\n          <Stack\n            flex={1}\n            mb={[20, 0]}\n            spacing={10}\n            width={['100%', 14/20]}\n          >\n            <TabComponent />\n          </Stack>\n          <InteractiveComponent vaultId={asset?.id} assetId={vaultId} actions={tabs[selectedTabIndex].actions} />\n        </HStack>\n      </Box>\n    </AssetProvider>\n  )\n}","import { strategies } from 'constants/'\nimport { BNify, isEmpty } from 'helpers/'\nimport { Card } from 'components/Card/Card'\nimport React, { useMemo, useEffect } from 'react'\nimport { Amount } from 'components/Amount/Amount'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { AssetGeneralData } from 'components/AssetGeneralData/AssetGeneralData'\nimport { TransactionButton } from 'components/TransactionButton/TransactionButton'\nimport { VStack, Heading, Text, Stack, HStack, Button, SimpleGrid } from '@chakra-ui/react'\nimport { StrategyDescriptionCarousel } from 'components/StrategyDescriptionCarousel/StrategyDescriptionCarousel'\n\nexport const GaugeStaking: React.FC = () => {\n  const { params } = useBrowserRouter()\n  const { assetsData, selectors: { selectAssetById, selectVaultGauge } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    const asset = selectAssetById && selectAssetById(params.asset)\n    // console.log('GaugeStaking - useMemo - asset', asset)\n    return asset\n  }, [selectAssetById, params.asset])\n\n  const vaultGauge = useMemo(() => {\n    return asset && selectVaultGauge && selectVaultGauge(asset.id)\n  }, [selectVaultGauge, asset])\n\n  const assetGauge = useMemo(() => {\n    const asset = selectAssetById && vaultGauge && selectAssetById(vaultGauge.id)\n    // console.log('GaugeStaking - useMemo - assetGauge', asset)\n    return asset\n  }, [vaultGauge, selectAssetById])\n\n  const strategy = useMemo(() => {\n    return Object.keys(strategies).find( strategy => strategies[strategy].route === params.strategy )\n  }, [params])\n\n  const strategyColor = useMemo(() => {\n    return strategy && strategies[strategy].color\n  }, [strategy])\n\n  const strategyDescriptionCarousel = useMemo(() => {\n    if (!vaultGauge) return null\n    const strategyProps = strategies[vaultGauge.type]\n    if (!strategyProps?.carouselItems) return null\n    return (\n      <StrategyDescriptionCarousel color={strategyColor} strategy={vaultGauge.type} delay={10000} />\n    )\n  }, [vaultGauge, strategyColor])\n\n  const userShare = useMemo(() => {\n    return assetGauge?.vaultPosition && BNify(assetGauge?.vaultPosition?.underlying.redeemable).div(assetGauge.totalSupply)\n  }, [assetGauge])\n\n  // console.log('vaultGauge', vaultGauge)\n  // console.log('assetGauge', assetGauge)\n\n  return (\n    <VStack\n      spacing={10}\n      width={'100%'}\n    >\n      {\n        assetGauge.vaultPosition && (\n          <AssetProvider\n            wrapFlex={false}\n            assetId={vaultGauge.id}\n          >\n            <SimpleGrid\n              width={'100%'}\n              columns={[2, 4]}\n              spacing={[10, 14]}\n              alignItems={'flex-start'}\n            >\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.deposited'} textStyle={'titleSmall'} />\n                <HStack\n                  spacing={1}\n                  alignItems={'baseline'}\n                >\n                  <AssetProvider.Deposited textStyle={'heading'} fontSize={'h3'} />\n                  <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} />\n                </HStack>\n              </VStack>\n\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.share'} textStyle={'titleSmall'} />\n                <AssetProvider.GaugeShare textStyle={'heading'} fontSize={'h3'} />\n              </VStack>\n\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.idleDistribution'} textStyle={'titleSmall'} />\n                <HStack\n                  spacing={1}\n                  alignItems={'baseline'}\n                >\n                  <AssetProvider.GaugeUserDistribution suffix={` ${vaultGauge.rewardToken?.token}`} textStyle={'heading'} fontSize={'h3'} />\n                  <Translation component={Text} translation={['/','common.day']} textStyle={'captionSmall'} textTransform={'lowercase'} />\n                </HStack>\n              </VStack>\n\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.additionalRewards'} textStyle={'titleSmall'} />\n                <VStack\n                  spacing={2}\n                >\n                  {\n                    vaultGauge.multiRewardsTokens?.length>0 ? Object.keys(assetGauge.gaugeData?.rewards).map( rewardId => {\n                      const rewardData = assetGauge.gaugeData.rewards[rewardId]\n                      if (rewardId === vaultGauge.rewardToken.address) return null\n                      const rewardAsset = selectAssetById(rewardId)\n                      return (\n                        <HStack\n                          spacing={1}\n                          alignItems={'baseline'}\n                          key={`reward_${rewardId}`}\n                        >\n                          <Amount value={rewardData.rate.times(userShare)} suffix={` ${rewardAsset.token}`} textStyle={'heading'} fontSize={'h3'} />\n                          <Translation component={Text} translation={['/','common.day']} textStyle={'captionSmall'} textTransform={'lowercase'} />\n                        </HStack>\n                      )\n                    }) : (\n                      <Text textStyle={'heading'} fontSize={'h3'}>-</Text>\n                    )\n                  }\n                </VStack>\n              </VStack>\n            </SimpleGrid>\n          </AssetProvider>\n        )\n      }\n      <VStack\n        spacing={6}\n        width={'100%'}\n        alignItems={'flex-start'}\n      >\n        <Translation component={Heading} as={'h3'} size={'md'} translation={'defi.rewards'} />\n        <VStack\n          spacing={4}\n          width={'100%'}\n        >\n          {\n            !isEmpty(assetGauge.gaugeData?.rewards) ? Object.keys(assetGauge.gaugeData?.rewards).map( rewardId => {\n              const rewardData = assetGauge.gaugeData.rewards[rewardId]\n              const contractSendMethod = vaultGauge.getClaimRewardsContractSendMethod(rewardId)\n              return (\n                <AssetProvider\n                  wrapFlex={false}\n                  assetId={rewardId}\n                  key={`reward_${rewardId}`}\n                >\n                  <Card\n                    p={6}\n                    px={8}\n                    width={'100%'}\n                  >\n                    <Stack\n                      width={'100%'}\n                      spacing={[4, 0]}\n                      alignItems={'center'}\n                      direction={['column', 'row']}\n                      justifyContent={'space-between'}\n                    >\n                      <SimpleGrid\n                        width={'100%'}\n                        spacing={[6, 0]}\n                        columns={[2, 4]}\n                      >\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.asset'} textStyle={'captionSmall'} />\n                          <AssetProvider.GeneralData size={'xs'} field={'asset'} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.apr'} textStyle={'captionSmall'} />\n                          <Amount.Percentage textStyle={'tableCell'} value={rewardData.apr} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.dailyDistribution'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                            width={'100%'}\n                          >\n                            <Amount textStyle={'tableCell'} value={rewardData.rate} />\n                            <AssetProvider.Name textStyle={'tableCell'} />\n                          </HStack>\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                            width={'100%'}\n                          >\n                            <Amount textStyle={'tableCell'} value={rewardData.balance} />\n                            <AssetProvider.Name textStyle={'tableCell'} />\n                          </HStack>\n                        </VStack>\n                      </SimpleGrid>\n                      <TransactionButton text={'defi.claim'} vaultId={asset.id} assetId={rewardId} contractSendMethod={contractSendMethod} actionType={'claim'} amount={rewardData.balance.toString()} width={['100%', '150px']} disabled={rewardData.balance.lte(0)} />\n                    </Stack>\n                  </Card>\n                </AssetProvider>\n              )\n            }) : null\n          }\n        </VStack>\n      </VStack>\n      <AssetGeneralData assetId={vaultGauge?.id} />\n      {strategyDescriptionCarousel}\n    </VStack>\n  )\n}","import type { AssetId } from 'constants/types'\nimport React, { useMemo, useState } from 'react'\nimport { MdKeyboardArrowLeft } from 'react-icons/md'\nimport { useThemeProvider } from 'contexts/ThemeProvider'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { HStack, VStack, Button, Flex, Text } from '@chakra-ui/react'\nimport { TransactionList } from 'components/TransactionList/TransactionList'\nimport { OperativeComponent, OperativeComponentAction } from 'components/OperativeComponent/OperativeComponent'\n\ntype InteractiveComponentArgs = {\n  vaultId?: AssetId\n  assetId?: AssetId\n  actions: OperativeComponentAction[]\n}\n\nexport const InteractiveComponent: React.FC<InteractiveComponentArgs> = ({ assetId, vaultId, actions }) => {\n  const { isMobile } = useThemeProvider()\n  const [ showDeposit, setShowDeposit ] = useState<boolean>(false)\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n  const [ showTransactions, setShowTransactions ] = useState<boolean>(false)\n\n  return (\n    <>\n      <VStack\n        left={0}\n        zIndex={40}\n        spacing={[0, 6]}\n        id={'right-side'}\n        width={['100vw', '27em']}\n        height={['100vh', 'auto']}\n        position={['fixed', 'relative']}\n        top={[showDeposit ? 0 : '100vh', 0]}\n        bg={isMobile ? 'rgba(0, 0, 0, 0.5)' : undefined}\n        sx={isMobile ? {transition:'top 0.3s ease-in-out'} : {}}\n      >\n        <VStack\n          bottom={0}\n          spacing={0}\n          width={'100%'}\n          height={['100vh', 'auto']}\n          position={['fixed', 'relative']}\n          top={[showDeposit ? 0 : '100vh', 0]}\n          sx={isMobile ? {transition:'top 0.3s ease-in-out'} : {}}\n        >\n          {\n            isMobile && (\n              <HStack\n                px={4}\n                py={2}\n                bg={'card.bg'}\n                width={'100%'}\n                borderBottom={'1px solid'}\n                borderBottomColor={'divider'}\n                justifyContent={'space-between'}\n              >\n                <Translation alignItems={'center'} display={'flex'} variant={'unstyled'} translation={'common.exit'} component={Button} leftIcon={<MdKeyboardArrowLeft size={24} />} onClick={() => setShowDeposit(false)} />\n                <Translation alignItems={'center'} display={'flex'} variant={'unstyled'} translation={['common.show', 'navBar.transactions']} component={Button} onClick={() => setShowTransactions(true)} />\n              </HStack>\n            )\n          }\n          <OperativeComponent flex={1} minHeight={isMobile ? 'auto' : '590px'} borderRadius={isMobile ? 0 : undefined} assetId={assetId} actions={actions} />\n        </VStack>\n        <VStack\n          flex={1}\n          bottom={0}\n          spacing={0}\n          width={'100%'}\n          height={['100vh', 'auto']}\n          position={['fixed', 'relative']}\n          top={[showTransactions ? 0 : '100vh', 0]}\n          sx={isMobile ? {transition:'top 0.3s ease-in-out'} : {}}\n        >\n          {\n            isMobile && (\n              <HStack\n                px={4}\n                py={2}\n                bg={'card.bg'}\n                width={'100%'}\n                borderBottom={'1px solid'}\n                borderBottomColor={'divider'}\n                justifyContent={'space-between'}\n              >\n                <Translation alignItems={'center'} display={'flex'} variant={'unstyled'} translation={'common.back'} component={Button} leftIcon={<MdKeyboardArrowLeft size={24} />} onClick={() => setShowTransactions(false)} />\n                <Translation textStyle={'ctaStatic'} translation={'assets.assetDetails.assetHistory.transactionHistory'} component={Text} />\n              </HStack>\n            )\n          }\n          <TransactionList assetIds={[vaultId as AssetId]} maxH={[400, 600]} />\n        </VStack>\n      </VStack>\n      {\n        isMobile && (\n          <Flex\n            p={4}\n            left={0}\n            bottom={0}\n            border={0}\n            zIndex={30}\n            width={'100%'}\n            bg={'card.bgDark'}\n            position={'fixed'}\n          >\n            <Translation component={Button} translation={['common.start', 'common.deposit']} variant={'ctaFull'} onClick={() => setShowDeposit(true)} />\n          </Flex>\n        )\n      }\n    </>\n  )\n}","import React from 'react'\nimport { FlexProps, Flex } from '@chakra-ui/react'\n\ntype ScrollableArgs = {\n  parentRef?: any\n} & FlexProps\n\nexport const Scrollable: React.FC<ScrollableArgs> = ({parentRef, children, ...flexProps}) => {\n  return (\n    <Flex\n      flex={1}\n      width={'100%'}\n      overflowY={'auto'}\n      overflowX={'hidden'}\n      direction={'column'}\n      alignItems={'flex-start'}\n      {...flexProps}\n    >\n      {children}\n    </Flex>\n  )\n}","import React from 'react'\nimport { strategies } from 'constants/strategies'\nimport { Translation } from 'components/Translation/Translation'\nimport { TextProps, BoxProps, Box, Flex, Text, HStack } from '@chakra-ui/react'\n\ntype StrategyLabelArgs = {\n  strategy?: string\n  customText?: string\n} & TextProps\n\nexport const StrategyLabel: React.FC<StrategyLabelArgs> = ({ strategy, customText, ...props }) => {\n  if (!strategy) return null\n  const strategyConfig = strategies[strategy]\n  if (!strategyConfig) return null\n  return (\n    <HStack\n      spacing={2}\n      alignItems={'center'}\n    >\n      <Translation component={Text} translation={customText || strategyConfig?.label} textStyle={'ctaStatic'} {...props} />\n      <Box\n        width={2}\n        height={2}\n        borderRadius={'50%'}\n        bg={strategyConfig.color}\n      />\n    </HStack>\n  )\n}","import { Icon } from 'components/Icon/Icon'\nimport React, { useMemo, useRef } from 'react'\nimport { DATETIME_FORMAT } from 'constants/vars'\nimport { Amount } from 'components/Amount/Amount'\nimport { formatDate, sortArrayByKey } from 'helpers/'\nimport { Card, CardProps } from 'components/Card/Card'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport type { AssetId, Transaction } from 'constants/types'\nimport { Scrollable } from 'components/Scrollable/Scrollable'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { VStack, HStack, Flex, Text, Skeleton } from '@chakra-ui/react'\nimport { TransactionLink } from 'components/TransactionLink/TransactionLink'\n\ntype TransactionItemArgs = {\n  transaction: Transaction\n}\n\nconst TransactionItem: React.FC<TransactionItemArgs> = ({ transaction }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={transaction.assetId}\n    >\n      <VStack\n        mb={2}\n        pb={4}\n        spacing={4}\n        width={'100%'}\n        alignItems={'flex-start'}\n        borderBottomWidth={'1px'}\n        borderBottomColor={'divider'}\n      >\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={3}\n            direction={'row'}\n            alignItems={'center'}\n          >\n            {/*<Icon IconComponent={transaction.icon} width={24} height={24} size={24} />*/}\n            <Translation component={Text} translation={`transactionRow.${transaction.action}`} textStyle={'captionSmall'} />\n          </HStack>\n          <Text textStyle={'captionSmall'}>{formatDate(+transaction.timeStamp*1000, DATETIME_FORMAT)}</Text>\n        </HStack>\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={2}\n            alignItems={'center'}\n          >\n            <AssetProvider.Icon size={'xs'} />\n            <HStack\n              spacing={1}\n              alignItems={'center'}\n            >\n              <Amount value={transaction.underlyingAmount} decimals={4} textStyle={'tableCell'} />\n              <AssetProvider.Name textStyle={'tableCell'} />\n            </HStack>\n          </HStack>\n          <TransactionLink hash={transaction.hash} />\n        </HStack>\n      </VStack>\n    </AssetProvider>\n  )\n}\n\ntype TransactionListArgs = {\n  assetIds?: AssetId[]\n  showTitleOnMobile?: boolean\n} & CardProps\n\nexport const TransactionList: React.FC<TransactionListArgs> = ({ assetIds, showTitleOnMobile = false, ...cardProps }) => {\n  const { account } = useWalletProvider()\n  const [ ref, dimensions ] = useBoundingRect()\n  const { isPortfolioLoaded, isVaultsPositionsLoaded, selectors: { selectVaultTransactions, selectVaultGauge } } = usePortfolioProvider()\n\n  const transactions: Transaction[] = useMemo(() => {\n    if (!account || !assetIds || !selectVaultTransactions || !selectVaultGauge) return []\n\n    return assetIds.reduce( (transactions: Transaction[], assetId: AssetId) => {\n      const gaugeVault = selectVaultGauge(assetId)\n      const vaultTransactions: Transaction[] = selectVaultTransactions(assetId)\n      const gaugeTransactions: Transaction[] = gaugeVault ? selectVaultTransactions(gaugeVault.id) : []\n      return [\n        ...transactions,\n        ...vaultTransactions,\n        ...gaugeTransactions\n      ]\n    }, [])\n\n  }, [account, assetIds, selectVaultTransactions, selectVaultGauge])\n\n  const isLoaded = useMemo(() => {\n    return isPortfolioLoaded && (!account || isVaultsPositionsLoaded)\n  }, [isPortfolioLoaded, account, isVaultsPositionsLoaded])\n\n  const transactionsList = useMemo(() => {\n    return isLoaded ?\n      transactions.length>0 ? \n        sortArrayByKey(transactions, 'timeStamp', 'desc').map( (transaction: Transaction) => (\n          <TransactionItem key={`tx_${transaction.hash}`} transaction={transaction} />\n        ))\n      : (\n        <Flex\n          flex={1}\n          minH={250}\n          width={'100%'}\n          alignItems={'center'}\n          justifyContent={'center'}\n        >\n          <Translation component={Text} translation={'assets.assetDetails.assetHistory.emptyTransactions'} />\n        </Flex>\n      )\n    : (\n      <VStack\n        spacing={4}\n        width={'100%'}\n      >\n        <Skeleton width={'100%'} height={10} />\n        <Skeleton width={'100%'} height={10} />\n        <Skeleton width={'100%'} height={10} />\n        <Skeleton width={'100%'} height={10} />\n      </VStack>\n    )\n  }, [isLoaded, transactions])\n\n  return (\n    <Card\n      flex={1}\n      {...cardProps}\n    >\n      <VStack\n        flex={1}\n        spacing={0}\n        height={'100%'}\n        alignItems={'flex-start'}\n        ref={ref as typeof useRef}\n        justifyContent={'flex-start'}\n      >\n        <Translation display={showTitleOnMobile ? 'block' : ['none', 'block']} component={Card.Heading} translation={'assets.assetDetails.assetHistory.transactionHistory'} />\n        <Scrollable maxH={[280, Math.max(dimensions?.height || 400)]}>\n          {transactionsList}\n        </Scrollable>\n      </VStack>\n    </Card>\n  )\n}"],"names":["AssetPage","children","navigate","useNavigate","isMobile","useThemeProvider","useBrowserRouter","params","location","searchParams","getSearchParams","setSearchParams","useState","selectedTabIndex","setSelectedTabIndex","usePortfolioProvider","isPortfolioLoaded","selectors","selectAssetById","selectVaultGauge","strategy","useMemo","Object","keys","strategies","find","route","asset","vaultGauge","useEffect","pathname","replace","tabs","id","label","component","Earn","actions","type","Deposit","steps","Approve","Withdraw","push","GaugeStaking","vaultId","TabComponent","selectedTabId","get","foundTab","tab","toString","tabIndex","indexOf","selectTab","useCallback","selectedTab","renderedTabs","index","variant","width","map","Translation","Tab","length","translation","onClick","AssetProvider","wrapFlex","assetId","my","direction","justifyContent","spacing","alignItems","AssetLabel","fontSize","flex","borderBottom","borderColor","StrategyLabel","color","textStyle","mb","InteractiveComponent","assetsData","assetGauge","strategyColor","strategyDescriptionCarousel","strategyProps","carouselItems","StrategyDescriptionCarousel","delay","userShare","vaultPosition","BNify","underlying","redeemable","div","totalSupply","columns","Text","suffix","rewardToken","token","textTransform","multiRewardsTokens","gaugeData","rewards","rewardId","rewardData","address","rewardAsset","Amount","value","rate","times","Heading","as","size","isEmpty","contractSendMethod","getClaimRewardsContractSendMethod","Card","p","px","field","apr","balance","TransactionButton","text","actionType","amount","disabled","lte","AssetGeneralData","showDeposit","setShowDeposit","showTransactions","setShowTransactions","left","zIndex","height","position","top","bg","undefined","sx","transition","bottom","py","borderBottomColor","display","Button","leftIcon","OperativeComponent","minHeight","borderRadius","TransactionList","assetIds","maxH","border","Scrollable","parentRef","flexProps","overflowY","overflowX","customText","props","strategyConfig","TransactionItem","transaction","pb","borderBottomWidth","action","formatDate","timeStamp","DATETIME_FORMAT","underlyingAmount","decimals","TransactionLink","hash","showTitleOnMobile","cardProps","account","useWalletProvider","useBoundingRect","ref","dimensions","isVaultsPositionsLoaded","selectVaultTransactions","transactions","reduce","gaugeVault","vaultTransactions","gaugeTransactions","isLoaded","transactionsList","sortArrayByKey","minH","Math","max"],"sourceRoot":""}