{"version":3,"file":"static/js/3665.bc4ae329.chunk.js","mappings":"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","sources":["components/AddressLink/AddressLink.tsx","components/AssetGeneralData/AssetGeneralData.tsx","components/AssetPage/Earn.tsx","hooks/usePerformanceChartData/usePerformanceChartData.ts","components/AssetsIcons/AssetsIcons.tsx","components/GenericChart/GenericChart.tsx","components/MaticNFTs/MaticNFTs.tsx","components/ProtocolLabel/ProtocolLabel.tsx","components/TimeframeSelector/TimeframeSelector.tsx","components/TransactionButton/TransactionButton.tsx","components/VaultReward/VaultReward.tsx","components/VaultRewards/VaultRewards.tsx","components/VaultUnderlyingProtocols/VaultUnderlyingProtocols.tsx","hooks/useBalanceChartData/useBalanceChartData.ts","webpack://idle-dashboard-new/./src/components/TransactionButton/progress.css?8ae6"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { LinkProps, Link } from '@chakra-ui/react'\nimport { getExplorerAddressUrl, shortenHash } from 'helpers/'\nimport { useWalletProvider } from 'contexts/WalletProvider'\n\ntype AddressLinkArgs = {\n  address: string\n} & LinkProps\n\nexport const AddressLink: React.FC<AddressLinkArgs> = ({ address, ...props }) => {\n  const { chainId, explorer } = useWalletProvider()\n  const url = useMemo(() => {\n    return getExplorerAddressUrl(chainId, explorer, address)\n  }, [chainId, explorer, address])\n\n  return (\n    <Link href={url} textStyle={'tableCell'} color={'link'} isExternal {...props}>{shortenHash(address)}</Link>\n  )\n}","import React, { useMemo } from 'react'\nimport { MdInfo } from 'react-icons/md'\nimport { Card } from 'components/Card/Card'\nimport { useTranslate } from 'react-polyglot'\nimport type { AssetId } from 'constants/types'\nimport { Translation } from 'components/Translation/Translation'\n// import { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { strategies, GeneralDataField } from 'constants/strategies'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { TooltipContent } from 'components/TooltipContent/TooltipContent'\nimport { useTheme, HStack, VStack, SimpleGrid, Text, Tooltip } from '@chakra-ui/react'\n\ntype AssetGeneralDataArgs = {\n  assetId?: AssetId\n}\n\ntype LabelProps = {\n  generalData: GeneralDataField\n}\n\nconst Label: React.FC<LabelProps> = ({generalData}) => {\n  const theme = useTheme()\n  const translate = useTranslate()\n  return generalData.tooltip ? (\n    <HStack\n      spacing={1}\n      alignItems={'center'}\n    >\n      <Translation component={Text} translation={generalData.label} textStyle={'captionSmall'} />\n      <Tooltip\n        hasArrow\n        placement={'top'}\n        label={translate(generalData.tooltip)}\n      >\n        <TooltipContent>\n          <MdInfo color={theme.colors.cta} size={16} />\n        </TooltipContent>\n      </Tooltip>\n    </HStack>\n  ) : (\n    <Translation component={Text} translation={generalData.label} textStyle={'captionSmall'} />\n  )\n}\n\nexport const AssetGeneralData: React.FC<AssetGeneralDataArgs> = ({ assetId }) => {\n  // const { params } = useBrowserRouter()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const strategy = useMemo(() => {\n    return asset?.type && strategies[asset.type]\n  }, [asset])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card.Dark>\n        <SimpleGrid\n          spacing={[6, 0]}\n          columns={[2, Math.min(strategy?.generalDataFields.length, 5)]}\n        >\n          {\n            strategy?.generalDataFields && strategy?.generalDataFields.slice(0, 5).map( (generalData: GeneralDataField) => {\n              return (\n                <VStack\n                  spacing={2}\n                  alignItems={'flex-start'}\n                  justifyContent={'flex-start'}\n                  key={`field_${generalData.field}`}\n                >\n                  <Label generalData={generalData} />\n                  <AssetProvider.GeneralData section={'asset'} field={generalData.field} />\n                </VStack>\n              )\n            })\n          }\n        </SimpleGrid>\n        {\n          strategy?.generalDataFields && strategy?.generalDataFields.length>5 && (\n            <SimpleGrid\n              pt={6}\n              mt={6}\n              spacing={[6, 0]}\n              columns={[2, Math.min(strategy?.generalDataFields.length, 5)]}\n              borderTop={'1px solid'}\n              borderTopColor={'divider'}\n            >\n              {\n                strategy?.generalDataFields.slice(5).map( (generalData: GeneralDataField) => {\n                  return (\n                    <VStack\n                      spacing={2}\n                      alignItems={'flex-start'}\n                      justifyContent={'flex-start'}\n                      key={`field_${generalData.field}`}\n                    >\n                      <Label generalData={generalData} />\n                      <AssetProvider.GeneralData section={'asset'} field={generalData.field} />\n                    </VStack>\n                  )\n                })\n              }\n            </SimpleGrid>\n          )\n        }\n      </Card.Dark>\n    </AssetProvider>\n  )\n}","import { strategies } from 'constants/'\nimport { Card } from 'components/Card/Card'\nimport { useTranslate } from 'react-polyglot'\nimport useLocalForge from 'hooks/useLocalForge'\nimport React, { useMemo, useState } from 'react'\nimport { Amount } from 'components/Amount/Amount'\nimport { useThemeProvider } from 'contexts/ThemeProvider'\nimport { MaticNFTs } from 'components/MaticNFTs/MaticNFTs'\nimport { BNify, abbreviateNumber, isEmpty } from 'helpers/'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport { HistoryTimeframe, BigNumber } from 'constants/types'\nimport { Translation } from 'components/Translation/Translation'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { VaultRewards } from 'components/VaultRewards/VaultRewards'\nimport { GenericChart } from 'components/GenericChart/GenericChart'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { AssetGeneralData } from 'components/AssetGeneralData/AssetGeneralData'\nimport { TimeframeSelector } from 'components/TimeframeSelector/TimeframeSelector'\nimport { useBalanceChartData } from 'hooks/useBalanceChartData/useBalanceChartData'\nimport { usePerformanceChartData } from 'hooks/usePerformanceChartData/usePerformanceChartData'\nimport { VaultUnderlyingProtocols } from 'components/VaultUnderlyingProtocols/VaultUnderlyingProtocols'\nimport { StrategyDescriptionCarousel } from 'components/StrategyDescriptionCarousel/StrategyDescriptionCarousel'\nimport { ContainerProps, Heading, Box, Flex, Stack, Text, SimpleGrid, HStack, Switch, VStack, SkeletonText, Button } from '@chakra-ui/react'\n\nexport const Earn: React.FC<ContainerProps> = ({ children, ...rest }) => {\n  const translate = useTranslate()\n  const { params } = useBrowserRouter()\n  const { account } = useWalletProvider()\n  const { isMobile } = useThemeProvider()\n  const [ timeframe, setTimeframe ] = useState<HistoryTimeframe>(HistoryTimeframe.MONTH)\n  const [ useDollarConversion, setUseDollarConversion ] = useLocalForge('useDollarConversion', true)\n  const { isPortfolioLoaded, isVaultsPositionsLoaded, selectors: { selectAssetById, selectVaultById, selectAssetBalanceUsd } } = usePortfolioProvider()\n\n  const strategy = useMemo(() => {\n    return Object.keys(strategies).find( strategy => strategies[strategy].route === params.strategy )\n  }, [params])\n\n  const strategyColor = useMemo(() => {\n    return strategy && strategies[strategy].color\n  }, [strategy])\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(params.asset)\n  }, [selectAssetById, params.asset])\n\n  const vault = useMemo(() => {\n    return asset && selectVaultById && selectVaultById(asset.id)\n  }, [selectVaultById, asset])\n\n  const assetBalance = useMemo(() => {\n    if (!asset?.id) return\n    return selectAssetBalanceUsd && selectAssetBalanceUsd(asset.id)\n  }, [asset, selectAssetBalanceUsd])\n\n  const userHasBalance = useMemo(() => {\n    return asset?.vaultPosition && assetBalance && assetBalance.gt(0)\n  }, [asset, assetBalance])\n\n  // console.log('asset', asset, assetBalance, userHasBalance)\n\n  const { balanceChartData } = useBalanceChartData({ assetIds: [asset?.id], timeframe, useDollarConversion })\n  const { performanceChartData } = usePerformanceChartData({ assetIds: [asset?.id], timeframe })\n\n  const chartData = useMemo(() => {\n    if (!isPortfolioLoaded) return\n    return userHasBalance ? balanceChartData : performanceChartData\n  }, [isPortfolioLoaded, userHasBalance, balanceChartData, performanceChartData])\n\n  // const onTabClick = useCallback((row: RowProps) => {\n  //   return navigate(`${location?.pathname}/${row.original.id}`)\n  // }, [navigate, location])\n\n  const chartHeading = useMemo(() => {\n    const earningsPercentage = userHasBalance ? asset?.vaultPosition?.earningsPercentage : chartData?.total?.length && BNify(chartData.total[chartData.total.length-1].value).div(chartData.total[0].value).minus(1).times(100)\n    const earningsDays = chartData?.total?.length ? BNify(chartData.total[chartData.total.length-1].date).minus(chartData.total[0].date).div(1000).div(86400) : BNify(0)\n    const apy = earningsPercentage && earningsDays.gt(0) ? earningsPercentage.times(365).div(earningsDays) : BNify(0)\n\n    // const earningsPercentage = performanceChartData?.total?.length && BNify(performanceChartData.total[performanceChartData.total.length-1].value).div(performanceChartData.total[0].value).minus(1).times(100)\n    // const earningsDays = performanceChartData?.total?.length ? BNify(performanceChartData.total[performanceChartData.total.length-1].date).minus(performanceChartData.total[0].date).div(1000).div(86400) : BNify(0)\n    // const apy = earningsPercentage && earningsDays.gt(0) ? earningsPercentage.times(365).div(earningsDays) : BNify(0)    \n\n    const isLoaded = (chartData?.total && chartData.total.length>0) && !!isPortfolioLoaded && (!account || isVaultsPositionsLoaded)\n    \n    return (\n      <VStack\n        spacing={1}\n        width={['100%','auto']}\n        alignItems={['center','flex-start']}\n      >\n        <SkeletonText noOfLines={2} isLoaded={isLoaded}>\n          <Translation translation={ userHasBalance ? 'dashboard.portfolio.totalChart' : 'dashboard.portfolio.assetPerformance'} component={Text} textStyle={'caption'} textAlign={['center','left']} />\n          {/*<Translation translation={'dashboard.portfolio.assetPerformance'} component={Text} textStyle={'caption'} textAlign={['center','left']} />*/}\n          <HStack\n            spacing={3}\n            width={['100%','auto']}\n            alignItems={'baseline'}\n          >\n            {/*<Amount.Percentage value={apy} suffix={' APY'} textStyle={'heading'} textAlign={['center','left']} fontSize={'2xl'} />*/}\n            {\n              userHasBalance ? (\n                useDollarConversion ? <AssetProvider.BalanceUsd textStyle={'heading'} textAlign={['center','left']} fontSize={'2xl'} /> : <AssetProvider.Redeemable textStyle={'heading'} textAlign={['center','left']} fontSize={'2xl'} suffix={` ${asset?.name}`} />\n              ) : (\n                <Stack\n                  spacing={[0, 2]}\n                  alignItems={'baseline'}\n                  direction={['column', 'row']}\n                >\n                  <Amount.Percentage value={apy} suffix={' APY'} textStyle={'heading'} textAlign={['center','left']} fontSize={'2xl'} />\n                  {\n                    asset?.apyBreakdown?.gauge && BNify(asset?.apyBreakdown?.gauge).gt(0) && (\n                      <Amount.Percentage prefix={'+'} value={asset?.apyBreakdown?.gauge} suffix={` (${translate('assets.assetDetails.apyBreakdown.gauge')})`} textStyle={'caption'} />\n                    )\n                  }\n                </Stack>\n              )\n            }\n            {\n              /*\n                <Stat>\n                  <HStack spacing={2}>\n                    {\n                      userHasBalance ? (\n                        <AssetProvider.RealizedApy suffix={' APY'} textStyle={'caption'} />\n                      ) : apy.gt(0) && (\n                        <HStack\n                          spacing={1}\n                        >\n                          <Amount.Percentage value={apy} suffix={' APY'} textStyle={'caption'} />\n                        </HStack>\n                      )\n                    }\n                    {\n                      earningsPercentage && (\n                        <StatArrow type={earningsPercentage.gt(0) ? 'increase' : 'decrease'} />\n                      )\n                    }\n                  </HStack>\n                </Stat>\n              */\n            }\n          </HStack>\n        </SkeletonText>\n      </VStack>\n    )\n  }, [asset, userHasBalance, translate, chartData, useDollarConversion, account, isVaultsPositionsLoaded, isPortfolioLoaded])\n\n  const fundsOverview = useMemo(() => {\n    if (!asset || !userHasBalance) return null\n    return (\n      <SimpleGrid\n        width={'100%'}\n        columns={[2, 4]}\n        spacing={[10, 14]}\n        alignItems={'flex-start'}\n      >\n        <VStack\n          spacing={2}\n          justifyContent={'center'}\n        >\n          <Translation component={Text} translation={'defi.deposited'} textStyle={'titleSmall'} />\n          <AssetProvider.DepositedUsd textStyle={'heading'} fontSize={'h3'} />\n          <HStack spacing={1}>\n            <AssetProvider.Deposited decimals={4} textStyle={'captionSmaller'} />\n            <AssetProvider.Name textStyle={'captionSmaller'} />\n          </HStack>\n        </VStack>\n\n        <VStack\n          spacing={2}\n          justifyContent={'center'}\n        >\n          <Translation component={Text} translation={'defi.redeemable'} textStyle={'titleSmall'} />\n          <AssetProvider.BalanceUsd textStyle={'heading'} fontSize={'h3'} />\n          <HStack spacing={1}>\n            <AssetProvider.Redeemable decimals={4} textStyle={'captionSmaller'} />\n            <AssetProvider.Name textStyle={'captionSmaller'} />\n          </HStack>\n        </VStack>\n\n        <VStack\n          spacing={2}\n          justifyContent={'center'}\n        >\n          <Translation component={Text} translation={'defi.netEarnings'} textStyle={'titleSmall'} />\n          <AssetProvider.NetEarningsUsd textStyle={'heading'} fontSize={'h3'} />\n          <HStack spacing={1}>\n            <AssetProvider.NetEarnings decimals={4} textStyle={'captionSmaller'} />\n            <AssetProvider.Name textStyle={'captionSmaller'} />\n          </HStack>\n        </VStack>\n\n        {\n          /*\n          <VStack\n            spacing={2}\n            justifyContent={'center'}\n          >\n            <Translation component={Text} translation={'defi.fees'} textStyle={'titleSmall'} />\n            <AssetProvider.FeesUsd textStyle={'heading'} fontSize={'h3'} />\n            <HStack spacing={1}>\n              <AssetProvider.Fees decimals={4} textStyle={'captionSmaller'} />\n              <AssetProvider.Name textStyle={'captionSmaller'} />\n            </HStack>\n          </VStack>\n          */\n        }\n\n        <VStack\n          spacing={2}\n          justifyContent={'center'}\n        >\n          <Translation component={Text} translation={'defi.realizedApy'} textStyle={'titleSmall'} />\n          <AssetProvider.RealizedApy textStyle={'heading'} fontSize={'h3'} />\n          <Text textStyle={'captionSmaller'}></Text>\n        </VStack>\n      </SimpleGrid>\n    )\n  }, [asset, userHasBalance])\n\n  const strategyDescriptionCarousel = useMemo(() => {\n    if (!strategy || !isPortfolioLoaded) return null\n    const strategyProps = strategies[strategy]\n    if (!strategyProps?.carouselItems) return null\n    return (\n      <StrategyDescriptionCarousel color={strategyColor} strategy={strategy} delay={10000} />\n    )\n  }, [strategy, strategyColor, isPortfolioLoaded])\n\n  const strategyDescription = useMemo(() => {\n    if (!vault || !(\"description\" in vault) || !vault.description) return null\n    return (\n      <VStack\n        spacing={6}\n        alignItems={'flex-start'}\n      >\n        <Translation component={Heading} as={'h3'} size={'md'} translation={'defi.strategyDescription'} />\n        <Card.Dark>\n          <Text dangerouslySetInnerHTML={{__html: vault.description}} />\n        </Card.Dark>\n      </VStack>\n    )\n  }, [vault])\n\n  const vaultRewards = useMemo(() => {\n    // console.log('vaultRewards', asset)\n    if (!asset || isEmpty(asset.rewards)) return null\n    const totalRewards = (Object.values(asset.rewards) as BigNumber[]).reduce( (totalRewards: BigNumber, amount: BigNumber) => totalRewards.plus(amount), BNify(0) )\n    return totalRewards.gt(0) ? (\n      <VaultRewards assetId={asset?.id} />\n    ) : null\n  }, [asset])\n\n  return (\n    <>\n      <Box>\n        <HStack\n          mb={6}\n          spacing={6}\n          alignItems={'center'}\n        >\n          <SkeletonText noOfLines={2} isLoaded={!!isPortfolioLoaded}>\n            <Translation component={Heading} as={'h3'} size={'md'} translation={userHasBalance ? 'defi.fundsOverview' : 'defi.historicalPerformance'} />\n          </SkeletonText>\n          {\n            userHasBalance && (\n              <HStack\n                spacing={2}\n              >\n                <AssetProvider.Name fontWeight={600} />\n                <Switch size={'md'} isChecked={useDollarConversion} onChange={ (e) => setUseDollarConversion(e.target.checked) } />\n                <Text fontWeight={600}>USD</Text>\n              </HStack>\n            )\n          }\n        </HStack>\n        <Card.Flex\n          p={0}\n          overflow={'hidden'}\n          direction={'column'}\n          minH={['auto', 460]}\n          layerStyle={'cardDark'}\n          justifyContent={'space-between'}\n        >\n          <Stack\n            pt={[6, 8]}\n            px={[6, 8]}\n            pb={[4, 0]}\n            width={'100%'}\n            alignItems={'flex-start'}\n            direction={['column', 'row']}\n            justifyContent={['center', 'space-between']}\n          >\n            {chartHeading}\n            <TimeframeSelector width={['100%', 'auto']} justifyContent={['center', 'flex-end']} timeframe={timeframe} setTimeframe={setTimeframe} />\n          </Stack>\n          <GenericChart\n            data={chartData}\n            percentChange={0}\n            color={strategyColor}\n            timeframe={timeframe}\n            isRainbowChart={false}\n            assetIds={[params.asset]}\n            setPercentChange={() => {}}\n            height={isMobile ? '300px' : '350px'}\n            margins={{ top: 10, right: 0, bottom: 65, left: 0 }}\n            formatFn={ !useDollarConversion ? ((n: any) => `${abbreviateNumber(n)} ${asset?.name}`) : undefined }\n            // formatFn={(n: any) => `${abbreviateNumber(n)} ${asset?.name}`}\n          />\n        </Card.Flex>\n      </Box>\n      {fundsOverview}\n      <MaticNFTs assetId={asset?.id} />\n      {vaultRewards}\n      <VStack\n        spacing={4}\n        width={'100%'}\n      >\n        {strategyDescriptionCarousel}\n        {strategyDescription}\n      </VStack>\n      <AssetGeneralData assetId={asset?.id} />\n      <VaultUnderlyingProtocols assetId={asset?.id} />\n    </>\n  )\n}","import { getTimeframeTimestamp } from 'helpers/'\nimport { useState, useMemo, useEffect } from 'react'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { AssetId, HistoryData, HistoryTimeframe, Asset } from 'constants/types'\n\nexport type RainbowData = {\n  date: number\n  total: number\n  [k: AssetId]: number\n}\n\nexport type PerformanceChartData = {\n  total: HistoryData[]\n  rainbow: RainbowData[]\n}\n\ntype UsePerformanceChartDataReturn = {\n  assets?: Asset[]\n  performanceChartData: PerformanceChartData\n  performanceChartDataLoading: boolean\n}\n\ntype UsePerformanceChartDataArgs = {\n  assetIds: AssetId[]\n  timeframe?: HistoryTimeframe\n}\n\ntype UsePerformanceChartData = (args: UsePerformanceChartDataArgs) => UsePerformanceChartDataReturn\n\nexport const usePerformanceChartData: UsePerformanceChartData = args => {\n  \n  const [ performanceChartDataLoading, setPerformanceChartDataLoading ] = useState<boolean>(true)\n  const { historicalPrices, selectors: { selectAssetsByIds, selectAssetHistoricalPrices } } = usePortfolioProvider()\n\n  const { assetIds, timeframe } = args\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    return selectAssetsByIds(assetIds)\n  }, [assetIds, selectAssetsByIds])\n\n  const timeframeStartTimestamp = useMemo((): number => {\n    if (!timeframe) return 0\n    return getTimeframeTimestamp(timeframe)\n  }, [timeframe])\n\n  const performanceChartData = useMemo((): PerformanceChartData => {\n\n    const chartData: PerformanceChartData = {\n      total: [],\n      rainbow: []\n    }\n\n    if (!Object.keys(historicalPrices).length) return chartData\n\n    const pricesByDate = assets.reduce( (pricesByDate: Record<number, RainbowData>, asset: Asset, assetIndex: number) => {\n      if (!asset.id) return pricesByDate\n      const prices = selectAssetHistoricalPrices(asset.id)\n      if (!prices) return pricesByDate\n      prices.forEach( (price: HistoryData) => {\n        const date = price.date\n        \n        if (date<timeframeStartTimestamp) return\n\n        const value = price.value\n\n        if (!pricesByDate[date]) {\n          pricesByDate[date] = {\n            date,\n            total: 0\n          }\n        }\n        if (asset.id) {\n          pricesByDate[date][asset.id] = value\n\n          // Take the first asset to populate the total chart\n          if (!assetIndex) {\n            chartData.total.push({\n              date,\n              value\n            })\n          }\n        }\n      })\n      return pricesByDate\n    }, {})\n\n    chartData.rainbow = Object.values(pricesByDate)\n    return chartData\n  }, [assets, historicalPrices, selectAssetHistoricalPrices, timeframeStartTimestamp])\n\n  useEffect(() => {\n    if (!performanceChartData.rainbow.length) return\n    setPerformanceChartDataLoading(false)\n\n    return () => {\n      setPerformanceChartDataLoading(true)\n    }\n  }, [performanceChartData])\n\n  return {\n    assets,\n    performanceChartData,\n    performanceChartDataLoading\n  }\n}","import type { AssetId } from 'constants/types'\nimport { HStack, AvatarProps } from '@chakra-ui/react'\nimport { IconProps, AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetsIconsProps = {\n  assetIds: AssetId[]\n} & IconProps\n\nexport const AssetsIcons: React.FC<AssetsIconsProps> = ({ assetIds, showTooltip, ...props }) => {\n  return (\n    <HStack\n      spacing={0}\n    >\n      {\n        assetIds.map( (assetId: AssetId, index) => (\n          <AssetProvider key={`asset_${index}`} assetId={assetId}>\n            <AssetProvider.Icon {...props} ml={index ? -1 : 0} showTooltip={showTooltip} />\n          </AssetProvider>\n        ))\n      }\n    </HStack>\n  )\n}","import { useMemo } from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { abbreviateNumber } from 'helpers/'\nimport { Graph } from 'components/Graph/Graph'\nimport type { AssetId, HistoryTimeframe } from 'constants/types'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { BalanceChartData } from 'hooks/useBalanceChartData/useBalanceChartData'\n\ntype GenericChartArgs = {\n  color?: string\n  height?: string\n  accountId?: string\n  assetIds: AssetId[]\n  formatFn?: Function\n  percentChange: number\n  isRainbowChart: boolean\n  data?: BalanceChartData\n  timeframe: HistoryTimeframe\n  setPercentChange: (percentChange: number) => void\n  margins?: { top: number; right: number; bottom: number; left: number }\n}\n\nexport const GenericChart: React.FC<GenericChartArgs> = ({\n  data,\n  assetIds,\n  accountId,\n  timeframe,\n  percentChange,\n  isRainbowChart,\n  height = '350px',\n  setPercentChange,\n  color = 'chart.stroke',\n  formatFn = (n: any) => `$${abbreviateNumber(n)}`,\n  margins = { top: 0, right: 0, bottom: 0, left: 0 }\n}) => {\n  const { selectors: { selectAssetsByIds } } = usePortfolioProvider()\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    return selectAssetsByIds(assetIds)\n  }, [assetIds, selectAssetsByIds])\n\n  // const color = useMemo(() => {\n  //   const defaultColor = 'chart.stroke'\n  //   if (assets?.length === 1){\n  //     return assets[0]?.color || defaultColor\n  //   }\n  //   return defaultColor\n  // }, [assets])\n\n  const chartData = useMemo((): BalanceChartData => {\n    return data || {\n      total: [],\n      rainbow: []\n    }\n  }, [data])\n\n  const loading = useMemo(() => {\n    return !chartData.rainbow.length\n  }, [chartData])\n\n  return (\n    <Box width={'full'} p={0} height={height}>\n      <Graph\n        color={color}\n        data={chartData}\n        loading={loading}\n        margins={margins}\n        isLoaded={!loading}\n        formatFn={formatFn}\n        isRainbowChart={isRainbowChart}\n      />\n    </Box>\n  )\n}\n","import { formatDate } from 'helpers/'\nimport React, { useMemo } from 'react'\nimport { Card } from 'components/Card/Card'\nimport { DATETIME_FORMAT } from 'constants/vars'\nimport { Amount } from 'components/Amount/Amount'\nimport { selectUnderlyingToken } from 'selectors/'\nimport { AssetId, MaticNFT } from 'constants/types'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { HStack, VStack, SimpleGrid, Text } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { TransactionButton } from 'components/TransactionButton/TransactionButton'\n\ntype MaticNFTsProps = {\n  assetId: AssetId\n}\nexport const MaticNFTs: React.FC<MaticNFTsProps> = ({ assetId }) => {\n  const { maticNFTs, selectors: { selectAssetById, selectVaultById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const vault = useMemo(() => {\n    return selectVaultById && selectVaultById(assetId)\n  }, [selectVaultById, assetId])\n\n  const showMaticNFTs = useMemo(() => {\n    return vault && (\"flags\" in vault) && vault.flags?.showMaticNFTs\n  }, [vault])\n  \n  if (!maticNFTs?.length) return null\n\n  return (\n    <VStack\n      spacing={6}\n      width={'100%'}\n      id={'vault-rewards'}\n      alignItems={'flex-start'}\n    >\n      <Translation translation={'defi.claimableNTFs'} component={Text} textStyle={'heading'} fontSize={'h3'} />\n      <SimpleGrid\n        spacing={6}\n        width={'100%'}\n        columns={[1, 3]}\n      >\n        {\n          maticNFTs && maticNFTs.map( (maticNFT: MaticNFT) => {\n            return (\n              <Card\n                p={6}\n                key={`nft_${maticNFT.tokenId}`}\n              >\n                <VStack\n                  spacing={6}\n                  width={'100%'}\n                  alignItems={'flex-start'}\n                >\n                  <HStack\n                    width={'100%'}\n                    justifyContent={'space-between'}\n                  >\n                    <AssetLabel assetId={assetId} />\n                    <Text textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'}>#{maticNFT.tokenId}</Text>\n                  </HStack>\n                  <HStack\n                    spacing={4}\n                    width={'100%'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      maticNFT.status === 'available' ? (\n                        <TransactionButton text={'defi.claim'} vaultId={vault?.id} assetId={asset?.underlyingId} contractSendMethod={maticNFT.contractSendMethod} actionType={'claim'} amount={maticNFT.amount.toString()} disabled={maticNFT.amount.lte(0)} />\n                      ) : (\n                        <VStack\n                          spacing={1}\n                          alignItems={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.estUnlockDate'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                          >\n                            <Text textStyle={'tableCell'}>{formatDate(maticNFT.unlockTimestamp, DATETIME_FORMAT)}</Text>\n                          </HStack>\n                        </VStack>\n                      )\n                    }\n                    <VStack\n                      spacing={1}\n                      alignItems={'flex-end'}\n                    >\n                      <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n                      <HStack\n                        spacing={1}\n                        justifyContent={'flex-end'}\n                      >\n                        <Amount value={maticNFT.amount} decimals={8} textStyle={'tableCell'} />\n                        <AssetProvider assetId={asset?.underlyingId}>\n                          <AssetProvider.Name textStyle={'tableCell'} />\n                        </AssetProvider>\n                      </HStack>\n                    </VStack>\n                  </HStack>\n                </VStack>\n              </Card>\n            )\n          })\n        }\n      </SimpleGrid>\n    </VStack>\n  )\n}","import { BsQuestion } from 'react-icons/bs'\nimport { selectProtocol } from 'selectors/selectProtocol'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { Avatar, AvatarProps, Text, HStack, TextProps } from '@chakra-ui/react'\n\ntype ProtocolIconProps = {\n  protocolId: string\n} & AvatarProps\n\nconst ProtocolIcon: React.FC<ProtocolIconProps> = ({children, protocolId, ...props}) => {\n  const protocol = selectProtocol(protocolId)\n  if (!protocol || !protocol.icon) return null\n  return (\n    <Avatar\n      p={0}\n      bg={'transparent'}\n      src={protocol.icon}\n      icon={<BsQuestion size={24} />}\n      sx={{\n        \"> img\": {\n          objectFit: 'contain'\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\ntype ProtocolLabelProps = {\n  size?: string\n  protocolId: string\n} & TextProps\n\nexport const ProtocolLabel: React.FC<ProtocolLabelProps> = ({ protocolId, size = 'sm', ...textProps }) => {\n  const protocol = selectProtocol(protocolId)\n  if (!protocol) return null\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'flex-start'}\n    >\n      <ProtocolIcon protocolId={protocolId} size={size} />\n      <Text textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps}>{protocol.label}</Text>\n    </HStack>\n  )\n}","import React from 'react'\nimport { HistoryTimeframe } from 'constants/types'\nimport { HStack, Text, StackProps } from '@chakra-ui/react'\n\ntype TimeframeSelectorArgs = {\n  timeframe: HistoryTimeframe\n  setTimeframe: Function\n} & StackProps\n\nexport const TimeframeSelector: React.FC<TimeframeSelectorArgs> = ({ timeframe: selectedTimeframe, setTimeframe, ...props }) => {\n  return (\n    <HStack\n      spacing={[6, 10]}\n      {...props}\n    >\n      {\n        Object.values(HistoryTimeframe).map( timeframe => {\n          const selected = timeframe === selectedTimeframe\n          return (\n            <Text\n              textStyle={'cta'}\n              color={'ctaDisabled'}\n              aria-selected={selected}\n              key={`timeframe_${timeframe}`}\n              onClick={() => setTimeframe(timeframe)}\n            >\n            {timeframe.toUpperCase()}\n            </Text>\n          )\n        })\n      }\n    </HStack>\n  )\n}","import './progress.css'\nimport type { AssetId } from 'constants/types'\nimport { ContractSendMethod } from 'web3-eth-contract'\nimport { MdOutlineDone, MdOutlineClose } from 'react-icons/md'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport React, { useRef, useCallback, useState, useMemo, useEffect } from 'react'\nimport { TranslationProps, Translation } from 'components/Translation/Translation'\nimport { TransactionStatus, useTransactionManager } from 'contexts/TransactionManagerProvider'\nimport { useTheme, ButtonProps, Button, Box, Flex, Spinner, Text, TextProps } from '@chakra-ui/react'\n\ntype TransactionButtonProps = {\n  text: string\n  amount?: string\n  assetId: AssetId\n  vaultId: AssetId\n  actionType?: string\n  contractSendMethod: ContractSendMethod\n}\n\nexport const TransactionButtonValue: React.FC<TransactionButtonProps & TextProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  const theme = useTheme()\n  const intervalId = useRef<any>(null)\n  const [ remainingTime, setRemainingTime ] = useState<number | null>(null)\n  const { state: { transaction }, cleanTransaction } = useTransactionManager()\n\n  // const transaction: TransactionStatus = useMemo(() => ({\n  //   hash: null,\n  //   error: null,\n  //   status: 'success',\n  //   amount: null,\n  //   assetId: null,\n  //   vaultId: null,\n  //   receipt: null,\n  //   created: null,\n  //   timestamp: null,\n  //   actionType: null,\n  //   transaction: null,\n  //   lastUpdated: null,\n  //   estimatedTime: null,\n  //   confirmationCount: 0,\n  //   contractSendMethod,\n  // }), [contractSendMethod])\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const transactionStarted = useMemo(() => {\n    return isRightTransaction && transaction.status && ['pending', 'success', 'failed'].includes(transaction.status) && transaction.estimatedTime\n  }, [transaction, isRightTransaction])\n\n  const transitionDuration = useMemo(() => {\n    return transactionStarted && transaction.status === 'pending' ? transaction.estimatedTime : 0.5\n  }, [transactionStarted, transaction])\n\n  const startCountdown = useCallback(() => {\n    // console.log('getRemainingTime', transaction)\n    if (!transaction.timestamp || !transaction.estimatedTime) return null\n    const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n    // console.log('getRemainingTime - targetTimestamp', targetTimestamp, Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000)))\n    const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n\n    setRemainingTime(remainingTime)\n    if (!remainingTime) return\n    // console.log('TransactionButton - startCountdown')\n    intervalId.current = setTimeout(() => {\n      startCountdown()\n    }, 1000)\n  }, [transaction])\n\n  useEffect(() => {\n    if (transaction.status === 'success' || transaction.status === 'failed'){\n      // console.log('Clear Interval', intervalId.current)\n      if (intervalId.current){\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n      // Clean transaction if success or failed\n      if (transaction.status === 'success' || transaction.error?.code !== 4001){\n        setTimeout(() => {\n          cleanTransaction()\n        }, 4000)\n      }\n    } else if (transaction.status === 'pending' && !intervalId.current){\n      startCountdown()\n    }\n  }, [transaction.status, startCountdown, cleanTransaction, transaction.error?.code])\n  \n  const textComponent = useMemo(() => {\n    if (isRightTransaction){\n      switch (transaction?.status){\n        case 'created':\n          return (\n            <Spinner size={'sm'} />\n          )\n        case 'pending':\n          if (!transaction.timestamp || !transaction.estimatedTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          // const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n          // const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n          // Return spinner if long transaction\n          if (!remainingTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          return (\n            <Text textStyle={'ctaStatic'}>{remainingTime}s</Text>\n          )\n        case 'success':\n          return (\n            <Flex\n              {...props}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              <MdOutlineDone size={24} color={theme.colors.green['400']} />\n            </Flex>\n          )\n        case 'failed':\n          if (transaction.error?.code !== 4001){\n            return (\n              <Flex\n                {...props}\n                alignItems={'center'}\n                justifyContent={'center'}\n              >\n                <MdOutlineClose size={24} color={theme.colors.red['400']} />\n              </Flex>\n            )\n          }\n        break\n        default:\n        break\n      }\n    }\n    return (\n      <Translation translation={text} textStyle={'ctaStatic'} />\n    )\n  }, [isRightTransaction, remainingTime, transaction, text, theme, props])\n\n  const progressBg = useMemo(() => {\n    switch (transaction.status){\n      case 'success':\n      case 'failed':\n        return 'transparent'\n      default:\n        return 'primary'\n    }\n  }, [transaction])\n\n  return (\n    <>\n      <Flex\n        top={0}\n        left={0}\n        bottom={0}\n        bg={progressBg}\n        overflow={'hidden'}\n        position={'absolute'}\n        alignItems={'center'}\n        justifyContent={'center'}\n        transition={'background 0.5s ease-in-out'}\n        sx={{\n          animationIterationCount: 1,\n          animationFillMode: 'forwards',\n          animationTimingFunction: 'ease-in-out',\n          animationDuration: `${transitionDuration}s`,\n          animationName: transactionStarted ? 'progress' : 'none',\n          animationPlayState: transactionStarted ? 'running' : 'stopped',\n        }}\n      >\n        <Flex\n          left={0}\n          width={props.width}\n          alignItems={'center'}\n          position={'absolute'}\n          justifyContent={'center'}\n          sx={{\n            '> *':{\n              color:'black !important',\n              borderColor:'black !important',\n            }\n          }}\n        >\n          {textComponent}\n        </Flex>\n      </Flex>\n      {textComponent}\n    </>\n  )\n}\n\nexport const TransactionButton: React.FC<TransactionButtonProps & ButtonProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  // @ts-ignore\n  const [ref, { width }] = useBoundingRect()\n  const { sendTransaction, state: { transaction } } = useTransactionManager()\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const onClick = useCallback(() => {\n    if (transaction.status === 'created' || transaction.status === 'pending') return\n    // console.log('onClick', vaultId, assetId, contractSendMethod)\n    return sendTransaction(vaultId, assetId, contractSendMethod, actionType, amount)\n  }, [transaction, vaultId, assetId, contractSendMethod, actionType, amount, sendTransaction])\n\n  const borderColor = useMemo(() => {\n    if (!isRightTransaction) return 'primary'\n    switch (transaction.status){\n      case 'success':\n        return 'green.400'\n      case 'failed':\n        return transaction.error?.code !== 4001 ? 'red.400' : 'primary'\n      default:\n        return 'primary'\n    }\n  }, [isRightTransaction, transaction])\n\n  return (\n    <Button\n      py={2}\n      px={10}\n      overflow={'hidden'}\n      position={'relative'}\n      width={width || 'auto'}\n      borderColor={borderColor}\n      onClick={() => onClick()}\n      ref={ref as typeof useRef}\n      variant={'ctaPrimaryOutline'}\n      transition={'border 0.5s ease-in-out'}\n      {...props}\n    >\n      <TransactionButtonValue text={text} vaultId={vaultId} assetId={assetId} contractSendMethod={contractSendMethod} width={width} />\n    </Button>\n  )\n}","import React from 'react'\nimport { Card } from 'components/Card/Card'\nimport { Amount } from 'components/Amount/Amount'\nimport type { BigNumber, AssetId } from 'constants/types'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { VStack, Button, HStack, Text, SimpleGrid } from '@chakra-ui/react'\n\ntype RewardProps = {\n  assetId: AssetId\n  amount: BigNumber\n}\n\nexport const VaultReward: React.FC<RewardProps> = ({\n  assetId,\n  amount\n}) => {\n  if (amount.lte(0)) return null\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        p={6}\n      >\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <AssetLabel assetId={assetId} />\n          <VStack\n            spacing={1}\n            alignItems={'flex-end'}\n          >\n            <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n            <HStack\n              spacing={1}\n              justifyContent={'flex-end'}\n            >\n              <Amount value={amount} decimals={8} textStyle={'tableCell'} />\n              <AssetProvider.Name textStyle={'tableCell'} />\n            </HStack>\n          </VStack>\n        </HStack>\n      </Card>\n    </AssetProvider>\n  )\n}","import { BNify } from 'helpers/'\nimport BigNumber from 'bignumber.js'\nimport React, { useMemo } from 'react'\nimport type { Balances, AssetId } from 'constants/types'\nimport { VStack, SimpleGrid, Text } from '@chakra-ui/react'\nimport { Translation } from 'components/Translation/Translation'\nimport { VaultReward } from 'components/VaultReward/VaultReward'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { TransactionButton } from 'components/TransactionButton/TransactionButton'\n\ntype RewardProps = {\n  assetId?: AssetId\n}\n\nexport const VaultRewards: React.FC<RewardProps> = ({ assetId }) => {\n  const { selectors: { selectAssetById, selectVaultById } } = usePortfolioProvider()\n\n  const vault = useMemo(() => {\n    return selectVaultById && selectVaultById(assetId)\n  }, [selectVaultById, assetId])\n  \n  const rewards = useMemo((): Balances | undefined => {\n    if (!selectAssetById || !assetId) return\n    const asset = selectAssetById(assetId)\n    return asset?.rewards\n  }, [selectAssetById, assetId])\n\n  const totalRewardsAmount: BigNumber = useMemo(() => {\n    return rewards ? (Object.values(rewards) as BigNumber[]).reduce( (total: BigNumber, amount: BigNumber) => total.plus(amount), BNify(0)) : BNify(0)\n  }, [rewards])\n\n  // console.log('totalRewardsAmount', vault, totalRewardsAmount)\n\n  const contractSendMethod = vault.getClaimRewardsContractSendMethod()\n\n  return (\n    <VStack\n      spacing={6}\n      width={'100%'}\n      id={'vault-rewards'}\n      alignItems={'flex-start'}\n    >\n      <Translation translation={'assets.assetDetails.generalData.claimableRewards'} component={Text} textStyle={'heading'} fontSize={'h3'} />\n      <SimpleGrid\n        spacing={6}\n        width={'100%'}\n        columns={[1, 3]}\n      >\n        {\n          rewards && Object.keys(rewards).map( (rewardId: AssetId) =>\n            <VaultReward\n              assetId={rewardId}\n              amount={rewards[rewardId]}\n              key={`reward_${rewardId}`}\n            />\n          )\n        }\n      </SimpleGrid>\n      {\n        assetId && vault && totalRewardsAmount.gt(0) && (\n          <TransactionButton text={'assets.assetCards.rewards.claimRewards'} vaultId={assetId} assetId={assetId} contractSendMethod={contractSendMethod} actionType={'claim'} amount={totalRewardsAmount.toString()} width={['100%', '150px']} disabled={totalRewardsAmount.lte(0)} />\n        )\n      }\n    </VStack>\n  )\n}","import { BNify } from 'helpers/'\nimport React, { useMemo } from 'react'\nimport { Card } from 'components/Card/Card'\nimport type { AssetId } from 'constants/types'\nimport { Amount } from 'components/Amount/Amount'\nimport { BestYieldVault } from 'vaults/BestYieldVault'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport type { IdleTokenProtocol } from 'constants/vaults'\nimport { AssetsIcons } from 'components/AssetsIcons/AssetsIcons'\nimport { AddressLink } from 'components/AddressLink/AddressLink'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { selectUnderlyingToken, selectProtocol } from 'selectors/'\nimport { ProtocolLabel } from 'components/ProtocolLabel/ProtocolLabel'\nimport { HStack, VStack, Heading, SimpleGrid, Text } from '@chakra-ui/react'\n\ntype VaultUnderlyingProtocols = {\n  assetId: AssetId | undefined\n}\n\nexport const VaultUnderlyingProtocols: React.FC<VaultUnderlyingProtocols> = ({ assetId }) => {\n  const { chainId } = useWalletProvider()\n  const { selectors: { selectAssetById, selectVaultById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const vault = useMemo(() => {\n    return selectVaultById && selectVaultById(assetId)\n  }, [selectVaultById, assetId])\n\n  if (!vault || !(vault instanceof BestYieldVault)) return null\n  if (!(\"tokenConfig\" in vault) || !vault.tokenConfig?.protocols) return null\n\n  return (\n    <VStack\n      spacing={6}\n      alignItems={'flex-start'}\n    >\n      <Translation component={Heading} as={'h3'} size={'md'} translation={'defi.underlyingProtocols'} />\n      <SimpleGrid\n        spacing={6}\n        width={'100%'}\n        columns={[1, 3]}\n      >\n      {\n        vault.tokenConfig?.protocols.map( (protocol: IdleTokenProtocol) => {\n          const protocolConfig = selectProtocol(protocol.name)\n          const allocationPercentage = BNify(asset.allocations?.[protocol.name]).div(100)\n          const allocationUsd = BNify(asset?.tvlUsd).times(allocationPercentage)\n          const assetIds = protocolConfig?.govTokens?.reduce( (assetIds: string[], tokenName: string) => {\n            const underlyingToken = selectUnderlyingToken(chainId, tokenName)\n            if (underlyingToken?.address){\n              assetIds.push(underlyingToken.address)\n            }\n            return assetIds\n          }, [])\n\n          return (\n            <Card\n              p={6}\n              key={`protocol_${protocol.name}`}\n            >\n              <VStack\n                spacing={6}\n                width={'100%'}\n                alignItems={'flex-start'}\n              >\n                <ProtocolLabel protocolId={protocol.name} size={'xs'} />\n                <HStack\n                  spacing={6}\n                >\n                  <VStack\n                    spacing={1}\n                    alignItems={'flex-start'}\n                  >\n                    <Translation component={Text} translation={'defi.poolAddress'} textStyle={'captionSmall'} />\n                    <AddressLink address={protocol.address} />\n                  </VStack>\n                  <VStack\n                    spacing={1}\n                    alignItems={'flex-start'}\n                  >\n                    <Translation component={Text} translation={'defi.govToken'} textStyle={'captionSmall'} />\n                    {\n                      !assetIds ? (\n                        <Text textStyle={'captionSmall'}>-</Text>\n                      ) : (\n                        <AssetsIcons assetIds={assetIds} showTooltip={true} size={'xs'} />\n                      )\n                    }\n                  </VStack>\n                  <VStack\n                    spacing={1}\n                    alignItems={'flex-start'}\n                  >\n                    <Translation component={Text} translation={'assets.assetDetails.generalData.allocation'} textStyle={'captionSmall'} />\n                    <Amount.Usd value={allocationUsd} textStyle={'tableCell'} />\n                  </VStack>\n                </HStack>\n              </VStack>\n            </Card>\n          )\n        })\n      }\n      </SimpleGrid>\n    </VStack>\n  )\n}","import dayjs from 'dayjs'\nimport BigNumber from 'bignumber.js'\nimport { useState, useMemo, useEffect } from 'react'\n// import { balanceChartDataMock } from './balanceChartData.mock'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { BNify, getTimestampRange, isEmpty, getTimeframeTimestamp } from 'helpers/'\nimport { AssetId, HistoryData, HistoryTimeframe, Asset, Transaction } from 'constants/types'\n\nexport type RainbowData = {\n  date: number\n  total: number\n  [k: AssetId]: number\n}\n\nexport type BalanceChartData = {\n  total: HistoryData[]\n  rainbow: RainbowData[]\n}\n\ntype UseBalanceChartDataReturn = {\n  assets?: Asset[]\n  balanceChartData: BalanceChartData\n  balanceChartDataLoading: boolean\n}\n\ntype UseBalanceChartDataArgs = {\n  assetIds: AssetId[]\n  accountId?: string\n  strategies?: string[]\n  timeframe?: HistoryTimeframe\n  useDollarConversion?: boolean\n}\n\ntype UseBalanceChartData = (args: UseBalanceChartDataArgs) => UseBalanceChartDataReturn\n\nexport const useBalanceChartData: UseBalanceChartData = ({\n  assetIds,\n  accountId,\n  strategies,\n  timeframe,\n  useDollarConversion = true\n}) => {\n\n  const {\n    isPortfolioLoaded,\n    historicalPrices,\n    historicalPricesUsd,\n    selectors: {\n      selectAssetsByIds,\n      selectVaultTransactions,\n      selectAssetHistoricalPriceByTimestamp,\n      selectAssetHistoricalPriceUsdByTimestamp\n    }\n  } = usePortfolioProvider()\n\n  const [balanceChartDataLoading, setBalanceChartDataLoading] = useState<boolean>(true)\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    const assets = selectAssetsByIds(assetIds)\n    return assets.filter( (asset: Asset) => !strategies || !asset.type || strategies.includes(asset.type) )\n  }, [assetIds, strategies, selectAssetsByIds])\n\n  const timeframeStartTimestamp = useMemo((): number => {\n    if (!timeframe) return 0\n    return getTimeframeTimestamp(timeframe)\n  }, [timeframe])\n\n  // console.log('assets', assets)\n\n  const balanceChartData = useMemo((): BalanceChartData => {\n\n    const chartData: BalanceChartData = {\n      total: [],\n      rainbow: []\n    }\n\n    if (!isPortfolioLoaded || isEmpty(historicalPrices) || isEmpty(historicalPricesUsd)) return chartData\n\n    // console.log('historicalPricesUsd', historicalPricesUsd)\n\n    const assetsBalancesByDate = assets.reduce( (assetsBalancesByDate: Record<number, Record<AssetId, number>>, asset: Asset) => {\n\n      if (!asset?.id) return assetsBalancesByDate\n\n      const assetId: AssetId = asset.id\n\n      const vaultTransactions = selectVaultTransactions(assetId)\n\n      if (!vaultTransactions.length) return assetsBalancesByDate\n\n      // Loop through asset transactions\n      const assetBalancesByDate = vaultTransactions.reduce( (balances: Record<string, any>, transaction: Transaction) => {\n        const timestamp = +(dayjs(+(transaction.timeStamp)*1000).startOf('day').valueOf())\n\n        switch (transaction.action) {\n          case 'deposit':\n            balances.total = balances.total.plus(transaction.idleAmount)\n            // console.log('Deposit', dayjs(timestamp).format('YYYY-MM-DD'), asset.name, transaction.idleAmount.toString(), balances.total.toString())\n          break;\n          case 'redeem':\n            balances.total = BigNumber.maximum(0, balances.total.minus(transaction.idleAmount))\n            // console.log('Redeem', dayjs(timestamp).format('YYYY-MM-DD'), asset.name, transaction.idleAmount.toString(), balances.total.toString())\n          break;\n          default:\n          break;\n        }\n\n        balances.byDate[timestamp] = balances.total\n\n        return balances\n      }, {\n        total: BNify(0),\n        byDate: {}\n      })\n\n      Object.keys(assetBalancesByDate.byDate).forEach( (timestamp: any) => {\n        if (!assetsBalancesByDate[timestamp]) {\n          assetsBalancesByDate[timestamp] = {}\n        }\n        if (asset.id) {\n          assetsBalancesByDate[timestamp][asset.id] = parseFloat(assetBalancesByDate.byDate[timestamp].toFixed(8))\n        }\n      })\n\n      // console.log(asset.id, transaction.action, assetBalancesByDate)\n\n      return assetsBalancesByDate\n    }, {})\n\n    if (isEmpty(assetsBalancesByDate)) return chartData\n\n    // console.log('assetsBalancesByDate', assetsBalancesByDate)\n\n    // Extend balances for each day between the first one and today\n    const startTimestamp = +(Object.keys(assetsBalancesByDate).sort()[0])\n    const endTimestamp = +(dayjs().endOf('day').valueOf())\n\n    const timestampRange = getTimestampRange(startTimestamp, endTimestamp)\n    const assetsBalancesByDateExtended: Record<number, Record<AssetId, number>> = {}\n    for (let timestampIndex: number = 0, prevTimestamp: number | null = null; timestampIndex < timestampRange.length; timestampIndex++) {\n      const timestamp = timestampRange[timestampIndex]\n\n      // Copy prev balances\n      assetsBalancesByDateExtended[timestamp] = {\n        ...(prevTimestamp ? assetsBalancesByDateExtended[prevTimestamp] : {}),\n        ...assetsBalancesByDate[timestamp],\n      }\n\n      // console.log('assetsBalancesByDateExtended', prevTimestamp, timestamp, (prevTimestamp ? assetsBalancesByDateExtended[prevTimestamp] : {}), assetsBalancesByDateExtended[timestamp])\n\n      prevTimestamp = timestamp\n    }\n\n    // console.log('assetsBalancesByDateExtended', assetsBalancesByDateExtended)\n\n    // Trailing prices\n    let prevVaultPriceInfo: Record<AssetId, HistoryData> = {}\n    let prevVaultPriceInfoUsd: Record<AssetId, HistoryData> = {}\n\n    // Add totals\n    Object.keys(assetsBalancesByDateExtended).forEach( (timestamp: any) => {\n\n      const assetsBalances = assetsBalancesByDateExtended[timestamp]\n\n      // Multiply balance by vault price\n      Object.keys(assetsBalances).forEach( (assetId: AssetId) => {\n        const asset = assets.find( (asset: Asset) => asset.id === assetId )\n        const underlyingId: AssetId | undefined = asset?.underlyingId\n\n        const vaultPriceInfo: HistoryData | null = selectAssetHistoricalPriceByTimestamp(assetId, timestamp) || prevVaultPriceInfo[assetId]\n        // console.log('vaultPriceInfo', assetId, timestamp, vaultPriceInfo, assetsBalances[assetId])\n        if (vaultPriceInfo) {\n          assetsBalances[assetId] = parseFloat(BNify(assetsBalances[assetId]).times(BNify(vaultPriceInfo.value)).toFixed(8))\n          prevVaultPriceInfo[assetId] = vaultPriceInfo\n        }\n\n        if (useDollarConversion) {\n          const vaultPriceInfoUsd: HistoryData | null = selectAssetHistoricalPriceUsdByTimestamp(underlyingId, timestamp) || prevVaultPriceInfoUsd[assetId]\n          // console.log('vaultPriceInfoUsd', assetId, underlyingId, timestamp, prevVaultPriceInfoUsd[assetId], vaultPriceInfoUsd, assetsBalances[assetId]);\n          if (vaultPriceInfoUsd) {\n            assetsBalances[assetId] = parseFloat(BNify(assetsBalances[assetId]).times(BNify(vaultPriceInfoUsd.value)).toFixed(8))\n            prevVaultPriceInfoUsd[assetId] = vaultPriceInfoUsd\n          }\n        }\n      })\n\n      // Calculate total balance\n      assetsBalances.total = Object.values(assetsBalances).reduce( (total: number, value: number) => (total+value), 0 )\n    })\n\n    // console.log('assetsBalancesByDateExtended', assetsBalancesByDateExtended)\n\n    // Generate total array\n    chartData.total = Object.keys(assetsBalancesByDateExtended).reduce( (total: HistoryData[], timestamp: any ) => {\n      if (timestamp<timeframeStartTimestamp) return total\n      total.push({\n        date: parseInt(timestamp),\n        value: assetsBalancesByDateExtended[timestamp].total\n      })\n      return total\n    }, [])\n\n    // Generate rainbow array\n    chartData.rainbow = Object.keys(assetsBalancesByDateExtended).reduce( (rainbow: RainbowData[], timestamp: any ) => {\n      if (timestamp<timeframeStartTimestamp) return rainbow\n      rainbow.push({\n        date: parseInt(timestamp),\n        total: assetsBalancesByDateExtended[timestamp].total,\n        ...assetsBalancesByDateExtended[timestamp]\n      })\n      return rainbow\n    }, [])\n    \n    return chartData\n  // eslint-disable-next-line\n  }, [assets, useDollarConversion, timeframeStartTimestamp, selectVaultTransactions, isPortfolioLoaded, historicalPrices, historicalPricesUsd, selectAssetHistoricalPriceByTimestamp, selectAssetHistoricalPriceUsdByTimestamp])\n\n  // console.log('balanceChartData', balanceChartData)\n\n  useEffect(() => {\n    if (!balanceChartData.rainbow.length) return\n    setBalanceChartDataLoading(false)\n\n    return () => {\n      setBalanceChartDataLoading(true)\n    }\n  }, [balanceChartData])\n\n  return {\n    assets,\n    balanceChartData,\n    balanceChartDataLoading\n  }\n}","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["AddressLink","address","props","useWalletProvider","chainId","explorer","url","useMemo","getExplorerAddressUrl","href","textStyle","color","isExternal","shortenHash","Label","generalData","theme","useTheme","translate","useTranslate","tooltip","spacing","alignItems","Translation","component","Text","translation","label","hasArrow","placement","TooltipContent","colors","cta","size","AssetGeneralData","assetId","selectAssetById","usePortfolioProvider","selectors","asset","strategy","type","strategies","AssetProvider","wrapFlex","Card","columns","Math","min","generalDataFields","length","slice","map","justifyContent","section","field","pt","mt","borderTop","borderTopColor","Earn","children","params","useBrowserRouter","account","isMobile","useThemeProvider","useState","HistoryTimeframe","timeframe","setTimeframe","useLocalForge","useDollarConversion","setUseDollarConversion","isPortfolioLoaded","isVaultsPositionsLoaded","selectVaultById","selectAssetBalanceUsd","Object","keys","find","route","strategyColor","vault","id","assetBalance","userHasBalance","vaultPosition","gt","balanceChartData","useBalanceChartData","assetIds","args","performanceChartDataLoading","setPerformanceChartDataLoading","historicalPrices","selectAssetsByIds","selectAssetHistoricalPrices","assets","timeframeStartTimestamp","getTimeframeTimestamp","performanceChartData","chartData","total","rainbow","pricesByDate","reduce","assetIndex","prices","forEach","price","date","value","push","values","useEffect","usePerformanceChartData","chartHeading","earningsPercentage","BNify","div","minus","times","earningsDays","apy","isLoaded","width","noOfLines","textAlign","fontSize","suffix","name","direction","Amount","apyBreakdown","gauge","prefix","fundsOverview","decimals","strategyDescriptionCarousel","strategyProps","carouselItems","StrategyDescriptionCarousel","delay","strategyDescription","description","Heading","as","dangerouslySetInnerHTML","__html","vaultRewards","isEmpty","rewards","totalRewards","amount","plus","VaultRewards","mb","fontWeight","isChecked","onChange","e","target","checked","p","overflow","minH","layerStyle","px","pb","TimeframeSelector","GenericChart","data","percentChange","isRainbowChart","setPercentChange","height","margins","top","right","bottom","left","formatFn","undefined","n","abbreviateNumber","MaticNFTs","VaultUnderlyingProtocols","AssetsIcons","showTooltip","index","ml","accountId","loading","Graph","maticNFTs","flags","showMaticNFTs","maticNFT","AssetLabel","whiteSpace","tokenId","status","TransactionButton","text","vaultId","underlyingId","contractSendMethod","actionType","toString","disabled","lte","formatDate","unlockTimestamp","DATETIME_FORMAT","ProtocolIcon","protocolId","protocol","selectProtocol","icon","bg","src","sx","objectFit","ProtocolLabel","textProps","selectedTimeframe","selected","onClick","toUpperCase","TransactionButtonValue","intervalId","useRef","remainingTime","setRemainingTime","useTransactionManager","transaction","state","cleanTransaction","isRightTransaction","JSON","stringify","_method","transactionStarted","includes","estimatedTime","transitionDuration","startCountdown","useCallback","timestamp","targetTimestamp","max","ceil","Date","now","current","setTimeout","clearInterval","error","code","textComponent","green","red","progressBg","position","transition","animationIterationCount","animationFillMode","animationTimingFunction","animationDuration","animationName","animationPlayState","borderColor","useBoundingRect","ref","sendTransaction","py","variant","VaultReward","totalRewardsAmount","getClaimRewardsContractSendMethod","rewardId","BestYieldVault","tokenConfig","protocols","protocolConfig","allocationPercentage","allocations","allocationUsd","tvlUsd","govTokens","tokenName","underlyingToken","selectUnderlyingToken","historicalPricesUsd","selectVaultTransactions","selectAssetHistoricalPriceByTimestamp","selectAssetHistoricalPriceUsdByTimestamp","balanceChartDataLoading","setBalanceChartDataLoading","filter","assetsBalancesByDate","vaultTransactions","assetBalancesByDate","balances","dayjs","timeStamp","startOf","valueOf","action","idleAmount","BigNumber","byDate","parseFloat","toFixed","startTimestamp","sort","endTimestamp","endOf","timestampRange","getTimestampRange","assetsBalancesByDateExtended","timestampIndex","prevTimestamp","prevVaultPriceInfo","prevVaultPriceInfoUsd","assetsBalances","vaultPriceInfo","vaultPriceInfoUsd","parseInt"],"sourceRoot":""}