{"version":3,"file":"static/js/3680.e8c7e8b8.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/table/dist/index.esm.js","../node_modules/react-table/src/publicUtils.js","../node_modules/react-table/src/utils.js","../node_modules/react-table/src/makeDefaultPluginHooks.js","../node_modules/react-table/src/hooks/useColumnVisibility.js","../node_modules/react-table/src/hooks/useTable.js","../node_modules/react-table/src/plugin-hooks/useExpanded.js","../node_modules/react-table/src/filterTypes.js","../node_modules/react-table/src/plugin-hooks/useFilters.js","../node_modules/react-table/src/plugin-hooks/useGlobalFilter.js","../node_modules/react-table/src/aggregations.js","../node_modules/react-table/src/plugin-hooks/useGroupBy.js","../node_modules/react-table/src/sortTypes.js","../node_modules/react-table/src/plugin-hooks/useSortBy.js","../node_modules/react-table/src/plugin-hooks/usePagination.js","../node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../node_modules/react-table/src/plugin-hooks/useRowSelect.js","../node_modules/react-table/src/plugin-hooks/useRowState.js","../node_modules/react-table/src/plugin-hooks/useColumnOrder.js","../node_modules/react-table/src/plugin-hooks/useResizeColumns.js","../node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js","../node_modules/react-table/src/plugin-hooks/useBlockLayout.js","../node_modules/react-table/src/plugin-hooks/useFlexLayout.js","../node_modules/react-table/src/plugin-hooks/useGridLayout.js","../node_modules/react-table/index.js"],"sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/table.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/table.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [TableStylesProvider, useTableStyles] = createContext({\n  name: `TableStylesContext`,\n  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" `\n});\nvar Table = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props);\n  const { className, ...tableProps } = omitThemingProps(props);\n  return /* @__PURE__ */ React.createElement(TableStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */ React.createElement(chakra.table, {\n    role: \"table\",\n    ref,\n    __css: styles.table,\n    className: cx(\"chakra-table\", className),\n    ...tableProps\n  }));\n});\nTable.displayName = \"Table\";\n\n// src/table-container.tsx\nimport { chakra as chakra2, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nvar TableContainer = forwardRef2((props, ref) => {\n  const { overflow, overflowX, className, ...rest } = props;\n  return /* @__PURE__ */ React.createElement(chakra2.div, {\n    ref,\n    className: cx(\"chakra-table__container\", className),\n    ...rest,\n    __css: {\n      display: \"block\",\n      whiteSpace: \"nowrap\",\n      WebkitOverflowScrolling: \"touch\",\n      overflowX: overflow ?? overflowX ?? \"auto\",\n      overflowY: \"hidden\",\n      maxWidth: \"100%\"\n    }\n  });\n});\n\n// src/table-caption.tsx\nimport { chakra as chakra3, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar TableCaption = forwardRef3((props, ref) => {\n  const { placement = \"bottom\", ...rest } = props;\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra3.caption, {\n    ...rest,\n    ref,\n    __css: {\n      ...styles.caption,\n      captionSide: placement\n    }\n  });\n});\nTableCaption.displayName = \"TableCaption\";\n\n// src/thead.tsx\nimport { chakra as chakra4, forwardRef as forwardRef4 } from \"@chakra-ui/system\";\nvar Thead = forwardRef4((props, ref) => {\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra4.thead, {\n    ...props,\n    ref,\n    __css: styles.thead\n  });\n});\n\n// src/tbody.tsx\nimport { chakra as chakra5, forwardRef as forwardRef5 } from \"@chakra-ui/system\";\nvar Tbody = forwardRef5((props, ref) => {\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra5.tbody, {\n    ...props,\n    ref,\n    __css: styles.tbody\n  });\n});\n\n// src/tfooter.tsx\nimport { chakra as chakra6, forwardRef as forwardRef6 } from \"@chakra-ui/system\";\nvar Tfoot = forwardRef6((props, ref) => {\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra6.tfoot, {\n    ...props,\n    ref,\n    __css: styles.tfoot\n  });\n});\n\n// src/th.tsx\nimport { chakra as chakra7, forwardRef as forwardRef7 } from \"@chakra-ui/system\";\nvar Th = forwardRef7(({ isNumeric, ...rest }, ref) => {\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra7.th, {\n    ...rest,\n    ref,\n    __css: styles.th,\n    \"data-is-numeric\": isNumeric\n  });\n});\n\n// src/tr.tsx\nimport { chakra as chakra8, forwardRef as forwardRef8 } from \"@chakra-ui/system\";\nvar Tr = forwardRef8((props, ref) => {\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra8.tr, {\n    role: \"row\",\n    ...props,\n    ref,\n    __css: styles.tr\n  });\n});\n\n// src/td.tsx\nimport { chakra as chakra9, forwardRef as forwardRef9 } from \"@chakra-ui/system\";\nvar Td = forwardRef9(({ isNumeric, ...rest }, ref) => {\n  const styles = useTableStyles();\n  return /* @__PURE__ */ React.createElement(chakra9.td, {\n    role: \"gridcell\",\n    ...rest,\n    ref,\n    __css: styles.td,\n    \"data-is-numeric\": isNumeric\n  });\n});\nexport {\n  Table,\n  TableCaption,\n  TableContainer,\n  Tbody,\n  Td,\n  Tfoot,\n  Th,\n  Thead,\n  Tr,\n  useTableStyles\n};\n","import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { rowsById } = instance\n\n    const isAllRowsExpanded =\n      Object.keys(rowsById).length === Object.keys(state.expanded).length\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows.map((row) => ({ ...row, depth }))\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (row) {\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true\n          } else {\n            delete newSelectedRowIds[id]\n          }\n        }\n\n        if (selectSubRows && getSubRows(row)) {\n          return getSubRows(row).forEach(row => handleRowById(row.id))\n        }\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    let raf\n    let mostRecentClientX\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnDoneResizing })\n    }\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX })\n    }\n\n    const scheduleDispatchMoveOnNextAnimationFrame = clientXPos => {\n      mostRecentClientX = clientXPos\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove)\n      }\n    }\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","import { actions } from '../publicUtils'\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getRowProps.push(getRowProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => {\n  const gridTemplateColumns = instance.visibleColumns.map(column => {\n    if (instance.state.gridLayout.columnWidths[column.id])\n      return `${instance.state.gridLayout.columnWidths[column.id]}px`\n    // When resizing, lock the width of all unset columns\n    // instead of using user-provided width or defaultColumn width,\n    // which could potentially be 'auto' or 'fr' units that don't scale linearly\n    if (instance.state.columnResizing?.isResizingColumn)\n      return `${instance.state.gridLayout.startWidths[column.id]}px`\n    if (typeof column.width === 'number') return `${column.width}px`\n    return column.width\n  })\n  return [\n    props,\n    {\n      style: {\n        display: `grid`,\n        gridTemplateColumns: gridTemplateColumns.join(` `),\n      },\n    },\n  ]\n}\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky`, //enables a scroll wrapper to be placed around the table and have sticky headers\n      gridColumn: `span ${column.totalVisibleHeaderCount}`,\n    },\n  },\n]\n\nconst getRowProps = (props, { row }) => {\n  if (row.isExpanded) {\n    return [\n      props,\n      {\n        style: {\n          gridColumn: `1 / ${row.cells.length + 1}`,\n        },\n      },\n    ]\n  }\n  return [props, {}]\n}\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      gridLayout: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      gridLayout: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { columnId, headerIdWidths } = action\n    const columnWidth = getElementWidth(columnId)\n\n    if (columnWidth !== undefined) {\n      const startWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: getElementWidth(column.id),\n        }),\n        {}\n      )\n      const minWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.minWidth,\n        }),\n        {}\n      )\n      const maxWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.maxWidth,\n        }),\n        {}\n      )\n\n      const headerIdGridWidths = headerIdWidths.map(([headerId]) => [\n        headerId,\n        getElementWidth(headerId),\n      ])\n\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          startWidths,\n          minWidths,\n          maxWidths,\n          headerIdGridWidths,\n          columnWidth,\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX } = state.columnResizing\n    const {\n      columnWidth,\n      minWidths,\n      maxWidths,\n      headerIdGridWidths = [],\n    } = state.gridLayout\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdGridWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.min(\n        Math.max(\n          minWidths[headerId],\n          headerWidth + headerWidth * percentageDeltaX\n        ),\n        maxWidths[headerId]\n      )\n    })\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: {\n          ...state.gridLayout.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        startWidths: {},\n        minWidths: {},\n        maxWidths: {},\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n"],"names":["cx","classNames","filter","Boolean","join","createContext","name","errorMessage","TableStylesProvider","useTableStyles","Table","forwardRef","props","ref","styles","useMultiStyleConfig","omitThemingProps","className","tableProps","React","value","chakra","role","__css","table","displayName","forwardRef2","overflow","overflowX","rest","chakra2","display","whiteSpace","WebkitOverflowScrolling","overflowY","maxWidth","forwardRef3","placement","chakra3","caption","captionSide","Thead","forwardRef4","chakra4","thead","Tbody","forwardRef5","chakra5","tbody","Th","forwardRef6","chakra6","tfoot","forwardRef7","isNumeric","chakra7","th","Tr","forwardRef8","chakra8","tr","Td","forwardRef9","chakra9","td","actions","init","defaultRenderer","t","emptyRenderer","defaultColumn","Cell","width","minWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","next","style","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","r","setExpanded","exists","shouldExist","f","s","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","__proto__","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","undefined","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","unique","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","_row$subRows","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","alphanumeric","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","u","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_rowsById$_rowId","_rowsById$_rowId$cell","w","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","raf","mostRecentClientX","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchEnd","window","cancelAnimationFrame","dispatchMove","scheduleDispatchMoveOnNextAnimationFrame","clientXPos","requestAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","addEventListener","err","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","_instance$state$colum","startWidths","gridColumn","getElementWidth","acc","minWidths","maxWidths","headerIdGridWidths","getElementById","_document$getElementB","offsetWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","userColumns","getStateReducer","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups","module","exports"],"sourceRoot":""}