{"version":3,"file":"static/js/4219.0175ab68.chunk.js","mappings":"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","sources":["components/DonutChart/DonutChart.tsx"],"sourcesContent":["import { Group } from '@visx/group';\nimport React, { useState } from 'react';\nimport { scaleOrdinal } from '@visx/scale'\nimport { ParentSize } from '@visx/responsive'\nimport { animated, useTransition, interpolate } from '@react-spring/web';\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\n\nexport type DonutChartKey = string\nexport type DonutChartData = {\n  label: DonutChartKey\n  value: number\n  extraData?: any\n}\nexport type DonutChartColors = Record<DonutChartKey, string>\n\ntype DonutChartInitialData = {\n  getSliceData?: Function\n  data: DonutChartData[]\n  colors: DonutChartColors\n}\n\nconst defaultMargin = { top: 0, right: 0, bottom: 0, left: 0 };\n\nexport type PieProps = {\n  width: number;\n  height: number;\n  margin?: typeof defaultMargin;\n  animate?: boolean;\n} & DonutChartInitialData\n\nexport function PieChart({\n  data,\n  colors,\n  width,\n  height,\n  margin = defaultMargin,\n  animate = true,\n  getSliceData\n}: PieProps) {\n  const [selectedSlice, setSelectedSlice] = useState<DonutChartData | null>(null);\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const radius = Math.min(innerWidth, innerHeight) / 2;\n  const centerY = innerHeight / 2;\n  const centerX = innerWidth / 2;\n  const donutThickness = 30;\n\n  const keys = data.map( d => d.label )\n  const keysColors = keys.map( key => colors[key] )\n\n  const getColor = scaleOrdinal({\n    domain: keys,\n    range: keysColors,\n  })\n\n  const sliceData = getSliceData && getSliceData(selectedSlice)\n\n  // accessor functions\n  const pieValue = (d: DonutChartData) => d.value;\n\n  return (\n    <svg width={width} height={height}>\n      <rect rx={14} width={width} height={height} fill=\"url('#visx-pie-gradient')\" />\n      {sliceData}\n      <Group top={centerY + margin.top} left={centerX + margin.left}>\n        <Pie\n          padAngle={0}\n          cornerRadius={0}\n          pieValue={pieValue}\n          outerRadius={radius}\n          innerRadius={radius - donutThickness}\n          data={data/*selectedSlice ? data.filter( d => d.label === selectedSlice ) : data*/}\n        >\n          {(pie) => (\n            <AnimatedPie<DonutChartData>\n              {...pie}\n              animate={animate}\n              onMouseOver={({data}) =>\n                setSelectedSlice(data)\n              }\n              getKey={(arc) => arc.data.label}\n              onMouseOut={() => setSelectedSlice(null)}\n              getColor={(arc) => getColor(arc.data.label)}\n            />\n          )}\n        </Pie>\n      </Group>\n    </svg>\n  );\n}\n\n// react-spring transition definitions\ntype AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };\n\nconst fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({\n  // enter from 360° if end angle is > 180°\n  startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  opacity: 0,\n});\nconst enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({\n  startAngle,\n  endAngle,\n  opacity: 1,\n});\n\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\n  animate?: boolean;\n  getKey: (d: PieArcDatum<Datum>) => string;\n  getColor: (d: PieArcDatum<Datum>) => string;\n  onClickDatum?: (d: PieArcDatum<Datum>) => void;\n  onMouseOver?: (d: PieArcDatum<Datum>) => void;\n  onMouseOut?: (d: PieArcDatum<Datum>) => void;\n  delay?: number;\n};\n\nfunction AnimatedPie<Datum>({\n  animate,\n  arcs,\n  path,\n  getKey,\n  getColor,\n  onMouseOut,\n  onMouseOver,\n  onClickDatum,\n}: AnimatedPieProps<Datum>) {\n  const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(arcs, {\n    from: animate ? fromLeaveTransition : enterUpdateTransition,\n    enter: enterUpdateTransition,\n    update: enterUpdateTransition,\n    leave: animate ? fromLeaveTransition : enterUpdateTransition,\n    keys: getKey,\n  });\n  return transitions((props, arc, { key }) => {\n    // const [centroidX, centroidY] = path.centroid(arc);\n    // const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n\n    return (\n      <g key={Math.random()}>\n        <animated.path\n          // compute interpolated path d attribute from intermediate angle values\n          d={interpolate([props.startAngle, props.endAngle], (startAngle, endAngle) =>\n            path({\n              ...arc,\n              startAngle,\n              endAngle,\n            }),\n          )}\n          fill={getColor(arc)}\n          onClick={() => onClickDatum && onClickDatum(arc)}\n          onMouseOver={() => onMouseOver && onMouseOver(arc)}\n          onMouseOut={() => onMouseOut && onMouseOut(arc)}\n          onTouchStart={() => onClickDatum && onClickDatum(arc)}\n        />\n      </g>\n    )\n  })\n}\n\nexport const DonutChart = ({\n  data,\n  colors,\n  getSliceData\n}: DonutChartInitialData) => {\n  return (\n    <ParentSize debounceTime={10}>\n      { parent => (\n        <PieChart\n          data={data}\n          colors={colors}\n          width={parent.width}\n          height={parent.height}\n          getSliceData={getSliceData}\n        />\n      )}\n    </ParentSize>\n  )\n}"],"names":["defaultMargin","top","right","bottom","left","PieChart","data","colors","width","height","margin","animate","getSliceData","useState","selectedSlice","setSelectedSlice","innerWidth","innerHeight","radius","Math","min","centerY","centerX","keys","map","d","label","keysColors","key","getColor","scaleOrdinal","domain","range","sliceData","rx","fill","padAngle","cornerRadius","pieValue","value","outerRadius","innerRadius","pie","AnimatedPie","onMouseOver","getKey","arc","onMouseOut","fromLeaveTransition","endAngle","startAngle","PI","opacity","enterUpdateTransition","arcs","path","onClickDatum","useTransition","from","enter","update","leave","transitions","props","animated","interpolate","onClick","onTouchStart","random","DonutChart","debounceTime","parent"],"sourceRoot":""}