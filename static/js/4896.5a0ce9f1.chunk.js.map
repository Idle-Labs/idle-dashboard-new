{"version":3,"file":"static/js/4896.5a0ce9f1.chunk.js","mappings":"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","sources":["components/AssetLabel/AssetLabel.tsx","components/Card/Card.tsx","components/ReactTable/ReactTable.tsx","components/Strategy/Strategy.tsx","components/VaultCard/VaultCard.tsx","../node_modules/@chakra-ui/stat/dist/index.esm.js"],"sourcesContent":["import type { AssetId } from 'constants/types'\nimport { HStack, TextProps } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetLabelProps = {\n  size?: string\n  assetId: AssetId | undefined\n} & TextProps\n\nexport const AssetLabel: React.FC<AssetLabelProps> = ({ assetId, size = 'sm', ...textProps }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <HStack\n        alignItems={'center'}\n        justifyContent={'flex-start'}\n      >\n        <AssetProvider.Icon size={size} />\n        <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps} />\n      </HStack>\n    </AssetProvider>\n  )\n}","import { Heading, Flex, Box, FlexProps, BoxProps, ThemingProps } from '@chakra-ui/react'\n\nexport type CardProps = BoxProps & ThemingProps \n\nconst HeadingTitle = (props: CardProps) => {\n  const { children, ...rest } = props\n  return (\n    <Heading as={'h3'} size={'md'} mb={6} {...rest}>{children}</Heading>\n  )\n}\n\nexport const Card = (props: CardProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Box\n      width={'100%'}\n      position={'relative'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const CardFlex = (props: CardProps & FlexProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Flex\n      width={'100%'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n\nexport const Dark = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardDark'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Light = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardLight'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Outline = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardOutline'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nCard.Dark = Dark\nCard.Light = Light\nCard.Flex = CardFlex\nCard.Outline = Outline\nCard.Heading = HeadingTitle","import { useMemo } from 'react'\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md'\nimport { Column, Row, TableState, useSortBy, useTable } from 'react-table'\nimport { Flex, Table, Tbody, Td, Th, Thead, Tr, useColorModeValue, useTheme } from '@chakra-ui/react'\n\ntype ReactTableProps<T extends {}> = {\n  columns: Column<T>[]\n  data: T[]\n  displayHeaders?: boolean\n  onRowClick?: (row: Row<T>) => void\n  initialState?: Partial<TableState<{}>>\n}\n\nconst TableHeader: React.FC<any> = ({column}) => {\n  const theme = useTheme()\n  return (\n    <Flex\n      alignItems={'center'}\n      layerStyle={'tableHeader'}\n      justifyContent={'space-between'}\n    >\n      {column.render('Header')}\n      {\n        column.canSort && (\n          <Flex\n            direction={'column'}\n          >\n            <MdKeyboardArrowUp size={20} fill={column.isSorted ? (column.isSortedDesc ? theme.colors.primary : theme.colors.table.arrow) : theme.colors.table.arrow} aria-label='sorted ascending' style={{position:'absolute'}} />\n            <MdKeyboardArrowDown size={20} fill={column.isSorted ? (column.isSortedDesc ? theme.colors.table.arrow : theme.colors.primary) : theme.colors.table.arrow} aria-label='sorted descending' style={{marginTop:10}} />\n          </Flex>\n        )\n      }\n    </Flex>\n  )\n}\n\nexport const ReactTable = <T extends {}>({\n  columns,\n  data,\n  displayHeaders = true,\n  onRowClick,\n  initialState,\n}: ReactTableProps<T>) => {\n  const hoverColor = useColorModeValue('black', 'white')\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable<T>(\n    {\n      columns,\n      data,\n      initialState,\n    },\n    useSortBy,\n  )\n\n  const renderRows = useMemo(() => {\n    return rows.map( row => {\n      let firstCellFound = false\n      prepareRow(row)\n      return (\n        <Tr\n          {...row.getRowProps()}\n          tabIndex={row.index}\n          layerStyle={'tableRow'}\n          onClick={() => onRowClick?.(row)}\n          cursor={onRowClick ? 'pointer' : undefined}\n        >\n          {row.cells.map( (cell, cellIndex) => {\n            const isFirstCell = !firstCellFound && cell.column.display !== 'none'\n            const isLastCell = cellIndex === row.cells.length-1\n            if (isFirstCell) {\n              firstCellFound = true\n            }\n            const sx = isFirstCell ? {borderTopLeftRadius:8, borderBottomLeftRadius:8} : (isLastCell ? {borderTopRightRadius:8, borderBottomRightRadius:8} : {})\n            return (\n              <Td {...cell.getCellProps()} display={cell.column.display} sx={sx}>\n                {cell.render('Cell')}\n              </Td>\n            )\n          })}\n        </Tr>\n      )\n    })\n  }, [prepareRow, rows, onRowClick])\n\n  return (\n    <Table variant='clickable' size={{ base: 'sm', md: 'md' }} {...getTableProps()}>\n      {displayHeaders && (\n        <Thead>\n          {headerGroups.map(headerGroup => {\n            let firstColumnFound = false\n            return (\n              <Tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map( (column, colIndex) => {\n                  \n                  const isFirstCell = !firstColumnFound && column.display !== 'none'\n                  const isLastCell = colIndex === headerGroup.headers.length-1\n                  if (isFirstCell) {\n                    firstColumnFound = true\n                  }\n                  const style = isFirstCell ? {paddingLeft:0, paddingRight: 4} : (isLastCell ? {paddingLeft:4, paddingRight: 0} : {paddingLeft:4, paddingRight: 4})\n                  return (\n                    <Th\n                      {...column.getHeaderProps(column.getSortByToggleProps({title: undefined /*remove mouse hover tooltip*/}))}\n                      color={'gray.500'}\n                      display={column.display}\n                      textAlign={column.textAlign}\n                      _hover={{ color: column.canSort ? hoverColor : 'gray.500' }}\n                      style={style}\n                    >\n                      <TableHeader column={column} />\n                    </Th>\n                  )\n                })}\n              </Tr>\n            )\n          })}\n        </Thead>\n      )}\n      <Tbody {...getTableBodyProps()}>{renderRows}</Tbody>\n    </Table>\n  )\n}\n","import { Column, Row } from 'react-table'\nimport { Card } from 'components/Card/Card'\nimport { useTranslate } from 'react-polyglot'\nimport type { BigNumber } from 'bignumber.js'\nimport { useNavigate } from 'react-router-dom'\nimport { sortNumeric, sortAlpha } from 'helpers/'\nimport { Amount } from 'components/Amount/Amount'\nimport React, { useMemo, useCallback } from 'react'\nimport { useThemeProvider } from 'contexts/ThemeProvider'\nimport { VaultCard } from 'components/VaultCard/VaultCard'\nimport { ReactTable, } from 'components/ReactTable/ReactTable'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Asset, AssetId, VaultPosition } from 'constants/types'\nimport { Translation } from 'components/Translation/Translation'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { strategies, StrategyColumn } from 'constants/strategies'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { ContainerProps, Flex, VStack, Heading, Image, Stack, Skeleton, SkeletonText, Stat, StatNumber, StatArrow } from '@chakra-ui/react'\n\ntype RowProps = Row<Asset>\n\ntype TableFieldProps = {\n  row: RowProps\n  field: string\n  value: any\n}\n\nexport const TableField: React.FC<TableFieldProps> = ({ field, row, value }) => {\n  const assetId = row.original.id\n  return (\n    <SkeletonText noOfLines={2} isLoaded={!!value}>\n      <AssetProvider assetId={assetId}>\n        <AssetProvider.GeneralData section={'strategy'} field={field} size={'sm'} />\n      </AssetProvider>\n    </SkeletonText>\n  )\n\n  /*\n  switch (field) {\n    case 'protocol':\n      return (\n        <SkeletonText noOfLines={2} isLoaded={!!value}>\n          <AssetProvider assetId={assetId}>\n            <Flex\n              width={'100%'}\n              alignItems={'center'}\n            >\n              <AssetProvider.ProtocolIcon size={'sm'} mr={2} />\n              <AssetProvider.ProtocolName textStyle={'tableCell'} />\n            </Flex>\n          </AssetProvider>\n        </SkeletonText>\n      )\n    case 'asset':\n      return (\n        <AssetProvider assetId={assetId}>\n          <Flex\n            width={'100%'}\n            alignItems={'center'}\n          >\n            <AssetProvider.Icon size={'sm'} mr={2} />\n            <AssetProvider.Name textStyle={'tableCell'} />\n          </Flex>\n        </AssetProvider>\n      )\n    case 'tvl':\n      return (\n        <Skeleton isLoaded={!!value}>\n          <Amount prefix={'$ '} value={value} textStyle={'tableCell'} />\n        </Skeleton>\n      )\n    case 'apy':\n      return (\n        <SkeletonText noOfLines={2} isLoaded={!!value}>\n          <Amount.Percentage value={value} textStyle={'tableCell'} />\n        </SkeletonText>\n      )\n    case 'rewards':\n      return (\n        <SkeletonText noOfLines={2} isLoaded={!!value}>\n          <AssetProvider assetId={assetId}>\n            <AssetProvider.Rewards size={'sm'} />\n          </AssetProvider>\n        </SkeletonText>\n      )\n    case 'protocols':\n      return (\n        <SkeletonText noOfLines={2} isLoaded={!!value}>\n          <AssetProvider assetId={assetId}>\n            <AssetProvider.Protocols size={'sm'} />\n          </AssetProvider>\n        </SkeletonText>\n      )\n    default:\n      return null\n  }\n  */\n}\n\nexport const Strategy: React.FC<ContainerProps> = ({ children, ...rest }) => {\n\n  const navigate = useNavigate()\n  const translate = useTranslate()\n  const { screenSize } = useThemeProvider()\n  const { location, params } = useBrowserRouter()\n\n  const { isPortfolioLoaded, selectors: {\n    selectVaultsByType,\n    selectVaultsWithBalance,\n    selectVaultsAssetsByType,\n    selectVaultsAssetsWithBalance\n  } } = usePortfolioProvider()\n\n  const isMobile = useMemo(() => screenSize==='sm', [screenSize])\n\n  const strategy = useMemo(() => (\n    Object.keys(strategies).find( strategy => strategies[strategy].route === params.strategy )\n  ), [params])\n\n  const onRowClick = useCallback((row: RowProps) => {\n    return navigate(`${location?.pathname.replace(/\\/$/, '')}/${row.original.id}`)\n  }, [navigate, location])\n\n  const columns = useMemo(() => {\n    return strategy && strategies[strategy].columns\n  }, [strategy])\n\n  const strategyColumns: Column<Asset>[] = useMemo(() => {\n    if (!strategy || !columns) return []\n    return columns.map( (column: StrategyColumn) => {\n      const { id, accessor, sortType } = column\n      const sortTypeFn = sortType==='alpha' ? sortAlpha : sortType==='numeric' ? sortNumeric : undefined\n      return {\n        id,\n        accessor,\n        disableSortBy: !sortTypeFn,\n        defaultCanSort: !!sortTypeFn,\n        Header: translate(`defi.${id}`),\n        sortType: sortTypeFn ? (a: any, b: any, field: any, c: any) => sortTypeFn(a, b, accessor, c) : undefined,\n        Cell: ({ value, row }: { value: any; row: RowProps }) => {\n          return (\n            <TableField field={id} value={value} row={row} />\n          )\n        }\n      }\n    })\n  }, [strategy, columns, translate])\n\n  const strategyColumnsDeposit: Column<Asset>[] = useMemo(() => {\n    if (!strategy || !columns) return []\n    return columns.filter( (column: StrategyColumn) => !column.tables || column.tables.includes('Deposited') ).map( (column: StrategyColumn) => {\n      const { id, accessor, sortType } = column\n      const sortTypeFn = sortType==='alpha' ? sortAlpha : sortType==='numeric' ? sortNumeric : undefined\n      return {\n        id,\n        accessor,\n        disableSortBy: !sortTypeFn,\n        defaultCanSort: !!sortTypeFn,\n        Header: translate(`defi.${id}`),\n        sortType: sortTypeFn ? (a: any, b: any, field: any, c: any) => sortTypeFn(a, b, accessor, c) : undefined,\n        Cell: ({ value, row }: { value: any; row: RowProps }) => {\n          return (\n            <TableField field={id} value={value} row={row} />\n          )\n        }\n      }\n    })\n  }, [strategy, columns, translate])\n\n  const depositedAssetsColumns: Column<Asset>[] = useMemo(() => ([\n    {\n      Header: '#',\n      accessor: 'id',\n      display: 'none'\n    },\n    ...strategyColumnsDeposit,\n    {\n      accessor:'balanceUsd',\n      Header:translate('defi.balance'),\n      Cell: ({ value, row }: { value: BigNumber | undefined; row: RowProps }) => {\n        return (\n          <SkeletonText noOfLines={2} isLoaded={!!value}>\n            <Amount prefix={'$ '} value={value} textStyle={'tableCell'} />\n          </SkeletonText>\n        )\n      },\n      sortType: sortNumeric\n    },\n    {\n      accessor:'vaultPosition',\n      Header:translate('defi.realizedApy'),\n      Cell: ({ value, row }: { value: VaultPosition | undefined; row: RowProps }) => {\n        return (\n          <SkeletonText noOfLines={2} isLoaded={!!value}>\n            {\n              value && (\n                <Stat>\n                  <StatNumber>\n                    <Flex\n                      direction={'row'}\n                      alignItems={'center'}\n                    >\n                      <StatArrow type={'increase'} />\n                      <Amount.Percentage value={value.realizedApy} textStyle={'tableCell'} />\n                    </Flex>\n                  </StatNumber>\n                  {/*<Amount prefix={'$ '} value={value.usd.earnings} textStyle={'captionSmall'} />*/}\n                </Stat>\n              )\n            }\n          </SkeletonText>\n        )\n      },\n      sortType: (a: any, b: any, field: any, c: any): number => sortNumeric(a, b, 'vaultPosition.earningsPercentage', c)\n    },\n  ]), [translate, strategyColumnsDeposit])\n\n  const availableAssetsColumns: Column<Asset>[] = useMemo(() => ([\n    {\n      Header: '#',\n      accessor: 'id',\n      display: 'none'\n    },\n    ...strategyColumns\n    /*{\n      accessor: 'id',\n      canSort: false,\n      id: 'aprLastWeek',\n      disableSortBy: true,\n      defaultCanSort: false,\n      Header: translate('defi.aprLastWeek'),\n      Cell: ({ value, row }: { value: AssetId | undefined; row: RowProps }) => {\n        // console.log('aprLastWeek', value)\n        return (\n          <SkeletonText noOfLines={2} isLoaded={!!value}>\n            <AssetProvider assetId={value}>\n              <AssetProvider.HistoricalRates height={'50px'} />\n            </AssetProvider>\n          </SkeletonText>\n        )\n      }\n    },*/\n  ]), [strategyColumns])\n\n  const depositedAssetsData = useMemo(() => {\n    if (!selectVaultsWithBalance || !isPortfolioLoaded) return []\n    return selectVaultsAssetsWithBalance(strategy)\n  }, [isPortfolioLoaded, selectVaultsWithBalance, selectVaultsAssetsWithBalance, strategy])\n\n  const availableAssetsData = useMemo(() => {\n    if (!selectVaultsByType || !isPortfolioLoaded) return []\n    const vaultsAssets = selectVaultsAssetsByType(strategy)\n    return vaultsAssets.filter( (vaultAsset: Asset) => !depositedAssetsData.map( (asset: Asset) => asset.id ).includes(vaultAsset.id) )\n  }, [isPortfolioLoaded, selectVaultsByType, selectVaultsAssetsByType, depositedAssetsData, strategy])\n\n  const depositedAssets = useMemo(() => {\n    if (!depositedAssetsData.length) return null\n\n    const initialState = {\n      sortBy: [\n        {\n          id: 'balanceUsd',\n          desc: false\n        }\n      ]\n    }\n\n    return isMobile ? (\n      <VStack\n        mt={20}\n        spacing={6}\n        width={'100%'}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.depositedAssets'} component={Heading} as={'h2'} fontSize={'lg'} />\n        <VStack\n          spacing={2}\n          width={'100%'}\n          alignItems={'flex-start'}\n        >\n          {\n            depositedAssetsData.map( (asset: Asset) => asset.id && <VaultCard key={`vault_${asset.id}`} assetId={asset.id} />)\n          }\n        </VStack>\n      </VStack>\n    ) : (\n      <Card mt={10}>\n        <Translation translation={'defi.depositedAssets'} component={Card.Heading} />\n        <ReactTable columns={depositedAssetsColumns} data={depositedAssetsData} initialState={initialState} onRowClick={onRowClick} />\n      </Card>\n    )\n  }, [isMobile, depositedAssetsColumns, depositedAssetsData, onRowClick])\n\n  const availableAssets = useMemo(() => {\n    if (isPortfolioLoaded && !availableAssetsData.length) return null\n\n    const initialState = {\n      sortBy: [\n        {\n          id: 'tvl',\n          desc: false\n        }\n      ]\n    }\n\n    return isMobile ? (\n      <VStack\n        mt={20}\n        spacing={6}\n        width={'100%'}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.availableAssets'} component={Heading} as={'h2'} fontSize={'lg'} />\n        <VStack\n          spacing={2}\n          width={'100%'}\n          alignItems={'flex-start'}\n        >\n          {\n            availableAssetsData.map( (asset: Asset) => asset.id && <VaultCard key={`vault_${asset.id}`} assetId={asset.id} />)\n          }\n        </VStack>\n      </VStack>\n    ) : (\n      <Card mt={10}>\n        <Translation translation={'defi.availableAssets'} component={Card.Heading} />\n        {\n          !availableAssetsData.length ? (\n            <Stack\n            >\n              <Skeleton />\n              <Skeleton />\n            </Stack>\n          ) : (\n            <ReactTable columns={availableAssetsColumns} data={availableAssetsData} initialState={initialState} onRowClick={onRowClick} />\n          )\n        }\n      </Card>\n    )\n  }, [isMobile, isPortfolioLoaded, availableAssetsColumns, availableAssetsData, onRowClick])\n\n  const heading = useMemo(() => {\n    if (!strategy) return null\n    return (\n      <Stack\n        spacing={[10, 0]}\n        direction={['column', 'row']}\n        alignItems={['center', 'flex-start']}\n        width={['100%', '100%', '100%', '80%', '55%']}\n      >\n        <VStack\n          pr={[0, 14]}\n          pt={[0, 20]}\n          spacing={10}\n          direction={'column'}\n          width={['100%', '65%']}\n          alignItems={['center', 'flex-start']}\n        >\n          <Translation translation={strategies[strategy].label} component={Heading} as={'h2'} size={'3xl'} />\n          {\n            !isMobile && (\n              <Translation translation={strategies[strategy].description} textAlign={['center', 'left']} />\n            )\n          }\n        </VStack>\n        <Image width={['70%', '35%']} src={strategies[strategy].image} />\n        {\n          isMobile && (\n            <Translation translation={strategies[strategy].description} textAlign={['center', 'left']} />\n          )\n        }\n      </Stack>\n    )\n  }, [strategy, isMobile])\n\n  return (\n    <Flex\n      mt={14}\n      width={'100%'}\n      direction={'column'}\n      alignItems={'center'}\n    >\n      {heading}\n      {depositedAssets}\n      {availableAssets}\n    </Flex>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { AssetId } from 'constants/types'\nimport { useNavigate } from 'react-router-dom'\nimport { CardProps, Card } from 'components/Card/Card'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { VStack, SimpleGrid, HStack, Box, Text, Button } from '@chakra-ui/react'\n\nexport type VaultCardProps = {\n  assetId: AssetId\n}\n\ntype VaultCardField = {\n  label: string\n  field: string\n}\n\nexport type VaultCardInlineProps = {\n  fields: VaultCardField[]\n  onClick?: Function\n} & VaultCardProps & CardProps\n\nconst Inline = ({ assetId, fields, onClick, ...cardProps }: VaultCardInlineProps) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        py={2}\n        px={[4, 6]}\n        layerStyle={['card', 'cardHover']}\n        onClick={onClick}\n        {...cardProps}\n      >\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={3}\n            width={'100%'}\n            alignItems={'center'}\n          >\n            <AssetProvider.Icon size={'xs'} />\n            {/*<AssetProvider.Name textStyle={'tableCell'} />*/}\n            {\n              fields.map( (fieldInfo, index) => (\n                <React.Fragment key={`field_${index}`}>\n                  <Box\n                    width={1}\n                    height={1}\n                    bg={'divider'}\n                    borderRadius={'50%'}\n                  />\n                  <HStack\n                    spacing={2}\n                  >\n                    <Translation translation={fieldInfo.label} component={Text} textStyle={'captionSmall'} />\n                    <AssetProvider.GeneralData field={fieldInfo.field} textStyle={'tableCell'} />\n                  </HStack>\n                </React.Fragment>\n              ))\n            }\n          </HStack>\n        </HStack>\n      </Card>\n    </AssetProvider>\n  )\n}\n\nexport const VaultCard = ({ assetId }: VaultCardProps) => {\n  const navigate = useNavigate()\n  const { location } = useBrowserRouter()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    if (!selectAssetById) return\n    return selectAssetById(assetId)\n  }, [assetId, selectAssetById])\n\n  const depositedOrRewards = useMemo(() => {\n    return asset?.vaultPosition?.usd.deposited ? (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.deposited'} textStyle={'captionSmall'} />\n        <AssetProvider.DepositedUsd textStyle={'tableCell'} />\n      </VStack>\n    ) : asset?.type === 'BY' ? (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.protocols'} textStyle={'captionSmall'} />\n        <AssetProvider.Protocols iconMargin={-1} size={'xs'} />\n      </VStack>\n    ) : (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.rewards'} textStyle={'captionSmall'} />\n        <AssetProvider.Rewards iconMargin={-1} size={'xs'} />\n      </VStack>\n    )\n  }, [asset])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        p={4}\n        onClick={() => navigate(`${location?.pathname}/${assetId}`)}\n      >\n        <VStack\n          spacing={3}\n          alignItems={'flex-start'}\n        >\n          <AssetLabel assetId={assetId} size={'sm'} />\n          <SimpleGrid\n            pt={3}\n            pl={4}\n            columns={3}\n            width={'100%'}\n            borderTop={'1px solid'}\n            borderTopColor={'divider'}\n          >\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation translation={'defi.pool'} textStyle={'captionSmall'} />\n              <AssetProvider.PoolUsd textStyle={'tableCell'} />\n            </VStack>\n\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation translation={'defi.apy'} textStyle={'captionSmall'} />\n              <AssetProvider.Apy textStyle={'tableCell'} />\n            </VStack>\n            {depositedOrRewards}\n          </SimpleGrid>\n        </VStack>\n      </Card>\n    </AssetProvider>\n  )\n}\n\nVaultCard.Inline = Inline","// ../../react-shim.js\nimport React from \"react\";\n\n// src/stat-arrow.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\n\n// src/stat.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/stat.tsx\nvar [StatStylesProvider, useStatStyles] = createContext({\n  name: `StatStylesContext`,\n  errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Stat />\" `\n});\nvar Stat = forwardRef(function Stat2(props, ref) {\n  const styles = useMultiStyleConfig(\"Stat\", props);\n  const statStyles = {\n    position: \"relative\",\n    flex: \"1 1 0%\",\n    ...styles.container\n  };\n  const { className, children, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ React.createElement(StatStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */ React.createElement(chakra.div, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-stat\", className),\n    __css: statStyles\n  }, /* @__PURE__ */ React.createElement(\"dl\", null, children)));\n});\nStat.displayName = \"Stat\";\n\n// src/stat-arrow.tsx\nvar StatDownArrow = (props) => /* @__PURE__ */ React.createElement(Icon, {\n  color: \"red.400\",\n  ...props\n}, /* @__PURE__ */ React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z\"\n}));\nStatDownArrow.displayName = \"StatDownArrow\";\nfunction StatUpArrow(props) {\n  return /* @__PURE__ */ React.createElement(Icon, {\n    color: \"green.400\",\n    ...props\n  }, /* @__PURE__ */ React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z\"\n  }));\n}\nStatUpArrow.displayName = \"StatUpArrow\";\nfunction StatArrow(props) {\n  const { type, \"aria-label\": ariaLabel, ...rest } = props;\n  const styles = useStatStyles();\n  const BaseIcon = type === \"increase\" ? StatUpArrow : StatDownArrow;\n  const defaultAriaLabel = type === \"increase\" ? \"increased by\" : \"decreased by\";\n  const label = ariaLabel || defaultAriaLabel;\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(chakra2.span, {\n    srOnly: true\n  }, label), /* @__PURE__ */ React.createElement(BaseIcon, {\n    \"aria-hidden\": true,\n    ...rest,\n    __css: styles.icon\n  }));\n}\nStatArrow.displayName = \"StatArrow\";\n\n// src/stat-group.tsx\nimport { chakra as chakra3, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nvar StatGroup = forwardRef2(function StatGroup2(props, ref) {\n  return /* @__PURE__ */ React.createElement(chakra3.div, {\n    ...props,\n    ref,\n    role: \"group\",\n    className: cx(\"chakra-stat__group\", props.className),\n    __css: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      alignItems: \"flex-start\"\n    }\n  });\n});\nStatGroup.displayName = \"StatGroup\";\n\n// src/stat-help-text.tsx\nimport { chakra as chakra4, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar StatHelpText = forwardRef3(function StatHelpText2(props, ref) {\n  const styles = useStatStyles();\n  return /* @__PURE__ */ React.createElement(chakra4.dd, {\n    ref,\n    ...props,\n    className: cx(\"chakra-stat__help-text\", props.className),\n    __css: styles.helpText\n  });\n});\nStatHelpText.displayName = \"StatHelpText\";\n\n// src/stat-label.tsx\nimport { chakra as chakra5, forwardRef as forwardRef4 } from \"@chakra-ui/system\";\nvar StatLabel = forwardRef4(function StatLabel2(props, ref) {\n  const styles = useStatStyles();\n  return /* @__PURE__ */ React.createElement(chakra5.dt, {\n    ref,\n    ...props,\n    className: cx(\"chakra-stat__label\", props.className),\n    __css: styles.label\n  });\n});\nStatLabel.displayName = \"StatLabel\";\n\n// src/stat-number.tsx\nimport { chakra as chakra6, forwardRef as forwardRef5 } from \"@chakra-ui/system\";\nvar StatNumber = forwardRef5(function StatNumber2(props, ref) {\n  const styles = useStatStyles();\n  return /* @__PURE__ */ React.createElement(chakra6.dd, {\n    ref,\n    ...props,\n    className: cx(\"chakra-stat__number\", props.className),\n    __css: {\n      ...styles.number,\n      fontFeatureSettings: \"pnum\",\n      fontVariantNumeric: \"proportional-nums\"\n    }\n  });\n});\nStatNumber.displayName = \"StatNumber\";\nexport {\n  Stat,\n  StatArrow,\n  StatDownArrow,\n  StatGroup,\n  StatHelpText,\n  StatLabel,\n  StatNumber,\n  StatUpArrow,\n  useStatStyles\n};\n"],"names":["AssetLabel","assetId","size","textProps","AssetProvider","wrapFlex","alignItems","justifyContent","textStyle","fontSize","whiteSpace","Card","props","children","layerStyle","rest","width","position","CardFlex","Dark","concat","Light","Outline","Flex","Heading","as","mb","TableHeader","column","theme","useTheme","render","canSort","direction","fill","isSorted","isSortedDesc","colors","primary","table","arrow","style","marginTop","ReactTable","columns","data","displayHeaders","onRowClick","initialState","hoverColor","useColorModeValue","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderRows","useMemo","map","row","firstCellFound","Tr","getRowProps","tabIndex","index","onClick","cursor","undefined","cells","cell","cellIndex","isFirstCell","display","isLastCell","length","sx","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","Td","getCellProps","variant","base","md","headerGroup","firstColumnFound","getHeaderGroupProps","headers","colIndex","paddingLeft","paddingRight","Th","getHeaderProps","getSortByToggleProps","title","color","textAlign","_hover","TableField","field","value","original","id","noOfLines","isLoaded","section","Strategy","navigate","useNavigate","translate","useTranslate","screenSize","useThemeProvider","useBrowserRouter","location","params","usePortfolioProvider","isPortfolioLoaded","selectors","selectVaultsByType","selectVaultsWithBalance","selectVaultsAssetsByType","selectVaultsAssetsWithBalance","isMobile","strategy","Object","keys","strategies","find","route","useCallback","pathname","replace","strategyColumns","accessor","sortType","sortTypeFn","sortAlpha","sortNumeric","disableSortBy","defaultCanSort","Header","a","b","c","Cell","strategyColumnsDeposit","filter","tables","includes","depositedAssetsColumns","Amount","prefix","type","realizedApy","availableAssetsColumns","depositedAssetsData","availableAssetsData","vaultAsset","asset","depositedAssets","mt","spacing","Translation","translation","component","VaultCard","sortBy","desc","availableAssets","heading","pr","pt","label","description","src","image","selectAssetById","depositedOrRewards","vaultPosition","usd","deposited","iconMargin","p","pl","borderTop","borderTopColor","Inline","fields","cardProps","py","px","fieldInfo","height","bg","borderRadius","Text","cx","classNames","Boolean","join","createContext","name","errorMessage","StatStylesProvider","useStatStyles","Stat","forwardRef","ref","styles","useMultiStyleConfig","statStyles","flex","container","omitThemingProps","className","React","chakra","__css","displayName","StatDownArrow","Icon","d","StatUpArrow","StatArrow","ariaLabel","BaseIcon","chakra2","srOnly","icon","forwardRef2","chakra3","role","flexWrap","forwardRef3","chakra4","helpText","forwardRef4","chakra5","StatNumber","forwardRef5","chakra6","number","fontFeatureSettings","fontVariantNumeric"],"sourceRoot":""}