{"version":3,"file":"static/js/9509.2719e0e7.chunk.js","mappings":"qRAaMA,EAA6B,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAC7BC,GAAQC,EAAAA,EAAAA,MACd,OACE,UAAC,KAAD,CACEC,WAAY,SACZC,WAAY,cACZC,eAAgB,gBAHlB,UAKGL,EAAOM,OAAO,UAEbN,EAAOO,UACL,UAAC,KAAD,CACEC,UAAW,SADb,WAGE,SAAC,MAAD,CAAmBC,KAAM,GAAIC,KAAMV,EAAOW,UAAYX,EAAOY,aAAeX,EAAMY,OAAOC,QAAsCb,EAAMY,OAAOE,MAAMC,MAAO,aAAW,mBAAmBC,MAAO,CAACC,SAAS,eACxM,SAAC,MAAD,CAAqBT,KAAM,GAAIC,KAAMV,EAAOW,SAAYX,EAAOY,aAAeX,EAAMY,OAAOE,MAAMC,MAAQf,EAAMY,OAAOC,QAAWb,EAAMY,OAAOE,MAAMC,MAAO,aAAW,oBAAoBC,MAAO,CAACE,UAAU,WAMvN,EAEYC,EAAa,YAMC,IALzBC,EAKwB,EALxBA,QACAC,EAIwB,EAJxBA,KAIwB,IAHxBC,eAAAA,OAGwB,SAFxBC,EAEwB,EAFxBA,WACAC,EACwB,EADxBA,aAEMC,GAAaC,EAAAA,EAAAA,IAAkB,QAAS,SAC9C,GAA6EC,EAAAA,EAAAA,UAC3E,CACEP,QAAAA,EACAC,KAAAA,EACAG,aAAAA,GAEFI,EAAAA,WANMC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,kBAAmBC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,KAAMC,EAA9D,EAA8DA,WASxDC,GAAaC,EAAAA,EAAAA,UAAQ,WACzB,OAAOH,EAAKI,KAAK,SAAAC,GACf,IAAIC,GAAiB,EAErB,OADAL,EAAWI,IAET,SAAC,EAAAE,IAAD,kBACMF,EAAIG,eADV,IAEEC,SAAUJ,EAAIK,MACdvC,WAAY,WACZwC,QAAS,yBAAMpB,QAAN,IAAMA,OAAN,EAAMA,EAAac,EAAnB,EACTO,OAAQrB,EAAa,eAAYsB,EALnC,SAOGR,EAAIS,MAAMV,KAAK,SAACW,EAAMC,GACrB,IAAMC,GAAeX,GAA0C,SAAxBS,EAAKhD,OAAOmD,QAC7CC,EAAaH,IAAcX,EAAIS,MAAMM,OAAO,EAC9CH,IACFX,GAAiB,GAEnB,IAAMe,EAAKJ,EAAc,CAACK,oBAAoB,EAAGC,uBAAuB,GAAMJ,EAAa,CAACK,qBAAqB,EAAGC,wBAAwB,GAAK,CAAC,EAClJ,OACE,SAAC,EAAAC,IAAD,kBAAQX,EAAKY,gBAAb,IAA6BT,QAASH,EAAKhD,OAAOmD,QAASG,GAAIA,EAA/D,SACGN,EAAK1C,OAAO,UAGlB,MAGN,GACF,GAAE,CAAC4B,EAAYD,EAAMT,IAEtB,OACE,UAAC,MAAD,gBAAOqC,QAAQ,YAAYpD,KAAM,CAAEqD,KAAM,KAAMC,GAAI,OAAYjC,KAA/D,cACGP,IACC,SAAC,KAAD,UACGS,EAAaK,KAAI,SAAA2B,GAChB,IAAIC,GAAmB,EACvB,OACE,SAAC,EAAAzB,IAAD,kBAAQwB,EAAYE,uBAApB,aACGF,EAAYG,QAAQ9B,KAAK,SAACrC,EAAQoE,GAEjC,IAAMlB,GAAee,GAAuC,SAAnBjE,EAAOmD,QAC1CC,EAAagB,IAAaJ,EAAYG,QAAQd,OAAO,EACvDH,IACFe,GAAmB,GAErB,IAAMhD,EAAQiC,EAAc,CAACmB,YAAY,EAAGC,aAAc,GAAMlB,EAAa,CAACiB,YAAY,EAAGC,aAAc,GAAK,CAACD,YAAY,EAAGC,aAAc,GAC9I,OACE,SAAC,EAAAC,IAAD,kBACMvE,EAAOwE,eAAexE,EAAOyE,qBAAqB,CAACC,WAAO5B,MADhE,IAEE6B,MAAO,WACPxB,QAASnD,EAAOmD,QAChByB,UAAW5E,EAAO4E,UAClBC,OAAQ,CAAEF,MAAO3E,EAAOO,QAAUmB,EAAa,YAC/CT,MAAOA,EANT,UAQE,SAAClB,EAAD,CAAaC,OAAQA,MAG1B,MAGN,OAGL,SAAC,MAAD,kBAAW+B,KAAX,aAAiCI,QAGtC,C","sources":["components/ReactTable/ReactTable.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md'\nimport { Column, Row, TableState, useSortBy, useTable } from 'react-table'\nimport { Flex, Table, Tbody, Td, Th, Thead, Tr, useColorModeValue, useTheme } from '@chakra-ui/react'\n\ntype ReactTableProps<T extends {}> = {\n  columns: Column<T>[]\n  data: T[]\n  displayHeaders?: boolean\n  onRowClick?: (row: Row<T>) => void\n  initialState?: Partial<TableState<{}>>\n}\n\nconst TableHeader: React.FC<any> = ({column}) => {\n  const theme = useTheme()\n  return (\n    <Flex\n      alignItems={'center'}\n      layerStyle={'tableHeader'}\n      justifyContent={'space-between'}\n    >\n      {column.render('Header')}\n      {\n        column.canSort && (\n          <Flex\n            direction={'column'}\n          >\n            <MdKeyboardArrowUp size={20} fill={column.isSorted ? (column.isSortedDesc ? theme.colors.primary : theme.colors.table.arrow) : theme.colors.table.arrow} aria-label='sorted ascending' style={{position:'absolute'}} />\n            <MdKeyboardArrowDown size={20} fill={column.isSorted ? (column.isSortedDesc ? theme.colors.table.arrow : theme.colors.primary) : theme.colors.table.arrow} aria-label='sorted descending' style={{marginTop:10}} />\n          </Flex>\n        )\n      }\n    </Flex>\n  )\n}\n\nexport const ReactTable = <T extends {}>({\n  columns,\n  data,\n  displayHeaders = true,\n  onRowClick,\n  initialState,\n}: ReactTableProps<T>) => {\n  const hoverColor = useColorModeValue('black', 'white')\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable<T>(\n    {\n      columns,\n      data,\n      initialState,\n    },\n    useSortBy,\n  )\n\n  const renderRows = useMemo(() => {\n    return rows.map( row => {\n      let firstCellFound = false\n      prepareRow(row)\n      return (\n        <Tr\n          {...row.getRowProps()}\n          tabIndex={row.index}\n          layerStyle={'tableRow'}\n          onClick={() => onRowClick?.(row)}\n          cursor={onRowClick ? 'pointer' : undefined}\n        >\n          {row.cells.map( (cell, cellIndex) => {\n            const isFirstCell = !firstCellFound && cell.column.display !== 'none'\n            const isLastCell = cellIndex === row.cells.length-1\n            if (isFirstCell) {\n              firstCellFound = true\n            }\n            const sx = isFirstCell ? {borderTopLeftRadius:8, borderBottomLeftRadius:8} : (isLastCell ? {borderTopRightRadius:8, borderBottomRightRadius:8} : {})\n            return (\n              <Td {...cell.getCellProps()} display={cell.column.display} sx={sx}>\n                {cell.render('Cell')}\n              </Td>\n            )\n          })}\n        </Tr>\n      )\n    })\n  }, [prepareRow, rows, onRowClick])\n\n  return (\n    <Table variant='clickable' size={{ base: 'sm', md: 'md' }} {...getTableProps()}>\n      {displayHeaders && (\n        <Thead>\n          {headerGroups.map(headerGroup => {\n            let firstColumnFound = false\n            return (\n              <Tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map( (column, colIndex) => {\n                  \n                  const isFirstCell = !firstColumnFound && column.display !== 'none'\n                  const isLastCell = colIndex === headerGroup.headers.length-1\n                  if (isFirstCell) {\n                    firstColumnFound = true\n                  }\n                  const style = isFirstCell ? {paddingLeft:0, paddingRight: 4} : (isLastCell ? {paddingLeft:4, paddingRight: 0} : {paddingLeft:4, paddingRight: 4})\n                  return (\n                    <Th\n                      {...column.getHeaderProps(column.getSortByToggleProps({title: undefined /*remove mouse hover tooltip*/}))}\n                      color={'gray.500'}\n                      display={column.display}\n                      textAlign={column.textAlign}\n                      _hover={{ color: column.canSort ? hoverColor : 'gray.500' }}\n                      style={style}\n                    >\n                      <TableHeader column={column} />\n                    </Th>\n                  )\n                })}\n              </Tr>\n            )\n          })}\n        </Thead>\n      )}\n      <Tbody {...getTableBodyProps()}>{renderRows}</Tbody>\n    </Table>\n  )\n}\n"],"names":["TableHeader","column","theme","useTheme","alignItems","layerStyle","justifyContent","render","canSort","direction","size","fill","isSorted","isSortedDesc","colors","primary","table","arrow","style","position","marginTop","ReactTable","columns","data","displayHeaders","onRowClick","initialState","hoverColor","useColorModeValue","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderRows","useMemo","map","row","firstCellFound","Tr","getRowProps","tabIndex","index","onClick","cursor","undefined","cells","cell","cellIndex","isFirstCell","display","isLastCell","length","sx","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","Td","getCellProps","variant","base","md","headerGroup","firstColumnFound","getHeaderGroupProps","headers","colIndex","paddingLeft","paddingRight","Th","getHeaderProps","getSortByToggleProps","title","color","textAlign","_hover"],"sourceRoot":""}