{"version":3,"file":"static/js/2839.7771efa8.chunk.js","mappings":"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","sources":["components/CompositionChart/CompositionChart.tsx","components/DonutChart/DonutChart.tsx","hooks/useCompositionChartData/useCompositionChartData.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport { abbreviateNumber } from 'helpers/'\nimport { useTranslate } from 'react-polyglot'\nimport type { AssetId } from 'constants/types'\nimport { useTheme, Box } from '@chakra-ui/react'\nimport { DonutChart } from 'components/DonutChart/DonutChart'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport type { DonutChartData } from 'components/DonutChart/DonutChart'\nimport { useCompositionChartData, Compositions, UseCompositionChartDataReturn } from 'hooks/useCompositionChartData/useCompositionChartData'\n\ntype CompositionChartArgs = {\n  type: keyof Compositions\n  assetIds: AssetId[],\n  strategies?: string[]\n}\n\nexport const CompositionChart: React.FC<CompositionChartArgs> = ({ assetIds, strategies: enabledStrategies, type }) => {\n  const theme = useTheme()\n  const translate = useTranslate()\n  const { protocolToken } = usePortfolioProvider()\n\n  const {\n    compositions,\n    colors,\n  }: UseCompositionChartDataReturn = useCompositionChartData({ assetIds, strategies: enabledStrategies })\n\n  const getSliceData = useCallback((selectedSlice: DonutChartData) => {\n    switch (type){\n      case 'assets':\n        const totalFunds = compositions[type].reduce( (total: number, asset: DonutChartData) => total += asset.value, 0)\n        const formatFn = (n: any) => `$${abbreviateNumber(n)}`\n        const asset = selectedSlice?.extraData?.asset\n        const icon = asset?.icon || protocolToken?.icon\n        const label = asset?.name || translate('dashboard.portfolio.totalChart')\n        const value = selectedSlice ? formatFn(selectedSlice.value) : formatFn(totalFunds)\n\n        if (selectedSlice && !asset) return null\n\n        return (\n          <>\n            {\n              icon && (\n                <image\n                  y={'35%'}\n                  x={'46.5%'}\n                  href={icon}\n                  height={\"34\"}\n                  width={\"34\"}\n                  textAnchor={\"middle\"}\n                />\n              )\n            }\n            <text\n              x={'50%'}\n              y={'54%'}\n              fill={\"white\"}\n              fontSize={26}\n              fontWeight={600}\n              textAnchor={\"middle\"}\n              pointerEvents={\"none\"}\n            >\n              {value}\n            </text>\n            <text\n              x={'50%'}\n              y={'61%'}\n              fontSize={14}\n              fontWeight={400}\n              textAnchor={\"middle\"}\n              pointerEvents={\"none\"}\n              fill={theme.colors.cta}\n            >\n              {label}\n            </text>\n          </>\n        )\n      default:\n      break;\n    }\n  }, [protocolToken, compositions, theme, translate, type])\n\n  // console.log('compositions', compositions)\n\n  return (\n    <Box\n      height={350}\n      width={'100%'}\n    >\n      {\n        compositions && compositions[type] && compositions[type].length ? (\n          <DonutChart\n            colors={colors[type]}\n            data={compositions[type]}\n            getSliceData={getSliceData}\n          />\n        ) : (\n          <DonutChart\n            colors={{\n              placeholder1:'#4c515d',\n              placeholder2:'#2a3243',\n              placeholder3:'#727680'\n            }}\n            data={[\n              {\n                value:40,\n                label:'placeholder1'\n              },\n              {\n                value:60,\n                label:'placeholder2'\n              },\n              {\n                value:30,\n                label:'placeholder3'\n              }\n            ]}\n          />\n        )\n      }\n    </Box>\n  )\n}","import { Group } from '@visx/group';\nimport React, { useState } from 'react';\nimport { scaleOrdinal } from '@visx/scale'\nimport { ParentSize } from '@visx/responsive'\nimport { animated, useTransition, interpolate } from '@react-spring/web';\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\n\nexport type DonutChartKey = string\nexport type DonutChartData = {\n  label: DonutChartKey\n  value: number\n  extraData?: any\n}\nexport type DonutChartColors = Record<DonutChartKey, string>\n\ntype DonutChartInitialData = {\n  getSliceData?: Function\n  data: DonutChartData[]\n  colors: DonutChartColors\n}\n\nconst defaultMargin = { top: 0, right: 0, bottom: 0, left: 0 };\n\nexport type PieProps = {\n  width: number;\n  height: number;\n  margin?: typeof defaultMargin;\n  animate?: boolean;\n} & DonutChartInitialData\n\nexport function PieChart({\n  data,\n  colors,\n  width,\n  height,\n  margin = defaultMargin,\n  animate = true,\n  getSliceData\n}: PieProps) {\n  const [selectedSlice, setSelectedSlice] = useState<DonutChartData | null>(null);\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const radius = Math.min(innerWidth, innerHeight) / 2;\n  const centerY = innerHeight / 2;\n  const centerX = innerWidth / 2;\n  const donutThickness = 30;\n\n  const keys = data.map( d => d.label )\n  const keysColors = keys.map( key => colors[key] )\n\n  const getColor = scaleOrdinal({\n    domain: keys,\n    range: keysColors,\n  })\n\n  const sliceData = getSliceData && getSliceData(selectedSlice)\n\n  // accessor functions\n  const pieValue = (d: DonutChartData) => d.value;\n\n  return (\n    <svg width={width} height={height}>\n      <rect rx={14} width={width} height={height} fill=\"url('#visx-pie-gradient')\" />\n      {sliceData}\n      <Group top={centerY + margin.top} left={centerX + margin.left}>\n        <Pie\n          padAngle={0}\n          cornerRadius={0}\n          pieValue={pieValue}\n          outerRadius={radius}\n          innerRadius={radius - donutThickness}\n          data={data/*selectedSlice ? data.filter( d => d.label === selectedSlice ) : data*/}\n        >\n          {(pie) => (\n            <AnimatedPie<DonutChartData>\n              {...pie}\n              animate={animate}\n              onMouseOver={({data}) =>\n                setSelectedSlice(data)\n              }\n              getKey={(arc) => arc.data.label}\n              onMouseOut={() => setSelectedSlice(null)}\n              getColor={(arc) => getColor(arc.data.label)}\n            />\n          )}\n        </Pie>\n      </Group>\n    </svg>\n  );\n}\n\n// react-spring transition definitions\ntype AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };\n\nconst fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({\n  // enter from 360° if end angle is > 180°\n  startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  opacity: 0,\n});\nconst enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({\n  startAngle,\n  endAngle,\n  opacity: 1,\n});\n\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\n  animate?: boolean;\n  getKey: (d: PieArcDatum<Datum>) => string;\n  getColor: (d: PieArcDatum<Datum>) => string;\n  onClickDatum?: (d: PieArcDatum<Datum>) => void;\n  onMouseOver?: (d: PieArcDatum<Datum>) => void;\n  onMouseOut?: (d: PieArcDatum<Datum>) => void;\n  delay?: number;\n};\n\nfunction AnimatedPie<Datum>({\n  animate,\n  arcs,\n  path,\n  getKey,\n  getColor,\n  onMouseOut,\n  onMouseOver,\n  onClickDatum,\n}: AnimatedPieProps<Datum>) {\n  const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(arcs, {\n    from: animate ? fromLeaveTransition : enterUpdateTransition,\n    enter: enterUpdateTransition,\n    update: enterUpdateTransition,\n    leave: animate ? fromLeaveTransition : enterUpdateTransition,\n    keys: getKey,\n  });\n  return transitions((props, arc, { key }) => {\n    // const [centroidX, centroidY] = path.centroid(arc);\n    // const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n\n    return (\n      <g key={Math.random()}>\n        <animated.path\n          // compute interpolated path d attribute from intermediate angle values\n          d={interpolate([props.startAngle, props.endAngle], (startAngle, endAngle) =>\n            path({\n              ...arc,\n              startAngle,\n              endAngle,\n            }),\n          )}\n          fill={getColor(arc)}\n          onClick={() => onClickDatum && onClickDatum(arc)}\n          onMouseOver={() => onMouseOver && onMouseOver(arc)}\n          onMouseOut={() => onMouseOut && onMouseOut(arc)}\n          onTouchStart={() => onClickDatum && onClickDatum(arc)}\n        />\n      </g>\n    )\n  })\n}\n\nexport const DonutChart = ({\n  data,\n  colors,\n  getSliceData\n}: DonutChartInitialData) => {\n  return (\n    <ParentSize debounceTime={10}>\n      { parent => (\n        <PieChart\n          data={data}\n          colors={colors}\n          width={parent.width}\n          height={parent.height}\n          getSliceData={getSliceData}\n        />\n      )}\n    </ParentSize>\n  )\n}","import { useMemo } from 'react'\nimport { BNify } from 'helpers/'\nimport { useTranslate } from 'react-polyglot'\nimport type { Asset, AssetId, Balances } from 'constants/types'\nimport { strategies, StrategyProps } from 'constants/strategies'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport type { DonutChartData, DonutChartColors } from 'components/DonutChart/DonutChart'\n\ntype UseCompositionChartDataArgs = {\n  assetIds: AssetId[]\n  strategies?: string[]\n}\n\ntype Colors = {\n  [key: string]: DonutChartColors\n}\n\ntype ExtraData = {\n  colors: Colors\n}\n\nexport type Compositions = {\n  [key: string]: DonutChartData[]\n}\n\nexport type UseCompositionChartDataReturn = {\n  compositions: Compositions\n} & ExtraData\n\ntype UseCompositionChartData = (args: UseCompositionChartDataArgs) => UseCompositionChartDataReturn\n\nexport const useCompositionChartData: UseCompositionChartData = ({ assetIds, strategies: enabledStrategies }) => {\n  const translate = useTranslate()\n  const { selectors: { selectAssetById, selectAssetsByIds } } = usePortfolioProvider()\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    return selectAssetsByIds(assetIds)\n  }, [assetIds, selectAssetsByIds])\n\n  const strategiesInitialBalances = Object.keys(strategies).reduce( (balances: Record<string, Balances>, strategy: string) => {\n    return {\n      ...balances,\n      [strategy]: {\n        balance:BNify(0),\n        weightedRealizedApy: BNify(0)\n      }\n    }\n  }, {})\n\n  const strategiesBalances = useMemo(() => {\n    const filteredAssets = assets.filter( (asset: Asset) => asset.type && (!enabledStrategies || enabledStrategies.includes(asset.type)) )\n    return filteredAssets.reduce( (strategiesBalances: Record<string, Balances>, asset: Asset) => {\n      if (!asset.type || !asset.vaultPosition) return strategiesBalances\n\n      strategiesBalances[asset.type].balance = strategiesBalances[asset.type].balance.plus(asset.vaultPosition.usd.redeemable)\n      strategiesBalances[asset.type].weightedRealizedApy = strategiesBalances[asset.type].weightedRealizedApy.plus(asset.vaultPosition.realizedApy.times(asset.vaultPosition.usd.redeemable))\n\n      return strategiesBalances\n    }, strategiesInitialBalances)\n  }, [assets, enabledStrategies, strategiesInitialBalances])\n\n  const assetsBalances = useMemo(() => {\n    const filteredAssets = assets.filter( (asset: Asset) => asset.type && (!enabledStrategies || enabledStrategies.includes(asset.type)) )\n    return filteredAssets.reduce( (assetsBalances: Balances, asset: Asset) => {\n      if (!asset.underlyingId || !asset.vaultPosition) return assetsBalances\n\n      const underlyingAsset = selectAssetById(asset.underlyingId)\n      if (!underlyingAsset) return assetsBalances\n\n      if (!assetsBalances[underlyingAsset.id]) {\n        assetsBalances[underlyingAsset.id] = BNify(0)\n      }\n      assetsBalances[underlyingAsset.id] = assetsBalances[underlyingAsset.id].plus(asset.vaultPosition.usd.redeemable)\n      return assetsBalances\n    }, {})\n  }, [assets, enabledStrategies, selectAssetById])\n\n  const compositions: Compositions = {\n    assets: [],\n    strategies: []\n  }\n\n  compositions.strategies = useMemo((): DonutChartData[] => {\n    return Object.keys(strategiesBalances).map( (strategy: string) => {\n      const label = translate(strategies[strategy].label)\n      const avgRealizedApy = strategiesBalances[strategy].balance.gt(0) ? parseFloat(strategiesBalances[strategy].weightedRealizedApy.div(strategiesBalances[strategy].balance)) : 0\n      return {\n        label,\n        extraData: {\n          avgRealizedApy,\n          strategy: strategies[strategy],\n        },\n        value: parseFloat(strategiesBalances[strategy].balance)\n      }\n    })\n  }, [strategiesBalances, translate])\n\n  compositions.assets = useMemo((): DonutChartData[] => {\n    return Object.keys(assetsBalances).reduce( (compositionAssets: DonutChartData[], assetId: string) => {\n      const asset = selectAssetById(assetId)\n      if (!asset || (asset.type && (!enabledStrategies || enabledStrategies.includes(asset.type)))) return compositionAssets\n      return [\n        ...compositionAssets,\n        {\n          label: asset.name,\n          extraData: {\n            asset\n          },\n          value: parseFloat(assetsBalances[assetId])\n        }\n      ]\n    }, [])\n  }, [assetsBalances, selectAssetById, enabledStrategies])\n\n  const colors: Colors = {\n    assets: {},\n    strategies: {}\n  }\n\n  colors.strategies = useMemo((): DonutChartColors => {\n    return Object.values(strategies).reduce( (colors: DonutChartColors, strategy: StrategyProps) => {\n      const label = translate(strategy.label)\n      return {\n        ...colors,\n        [label]: strategy.color\n      }\n    }, {})\n  }, [translate])\n\n  colors.assets = useMemo((): DonutChartColors => {\n    return Object.keys(assetsBalances).reduce( (colors: DonutChartColors, assetId: string) => {\n      const asset = selectAssetById(assetId)\n      if (!asset) return colors\n      const label = asset.name\n      return {\n        ...colors,\n        [label]: asset.color\n      }\n    }, {})\n  }, [assetsBalances, selectAssetById])\n\n  return {\n    colors,\n    compositions\n  }\n}"],"names":["CompositionChart","assetIds","enabledStrategies","strategies","type","theme","useTheme","translate","useTranslate","protocolToken","usePortfolioProvider","useCompositionChartData","compositions","colors","getSliceData","useCallback","selectedSlice","totalFunds","reduce","total","asset","value","formatFn","n","abbreviateNumber","extraData","icon","label","name","y","x","href","height","width","textAnchor","fill","fontSize","fontWeight","pointerEvents","cta","length","DonutChart","data","placeholder1","placeholder2","placeholder3","defaultMargin","top","right","bottom","left","PieChart","margin","animate","useState","setSelectedSlice","innerWidth","innerHeight","radius","Math","min","centerY","centerX","keys","map","d","keysColors","key","getColor","scaleOrdinal","domain","range","sliceData","rx","padAngle","cornerRadius","pieValue","outerRadius","innerRadius","pie","AnimatedPie","onMouseOver","getKey","arc","onMouseOut","fromLeaveTransition","endAngle","startAngle","PI","opacity","enterUpdateTransition","arcs","path","onClickDatum","useTransition","from","enter","update","leave","transitions","props","animated","interpolate","onClick","onTouchStart","random","debounceTime","parent","selectors","selectAssetById","selectAssetsByIds","assets","useMemo","strategiesInitialBalances","Object","balances","strategy","balance","BNify","weightedRealizedApy","strategiesBalances","filter","includes","vaultPosition","plus","usd","redeemable","realizedApy","times","assetsBalances","underlyingId","underlyingAsset","id","avgRealizedApy","gt","parseFloat","div","compositionAssets","assetId","values","color"],"sourceRoot":""}