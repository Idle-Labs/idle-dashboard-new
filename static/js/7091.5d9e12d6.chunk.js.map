{"version":3,"file":"static/js/7091.5d9e12d6.chunk.js","mappings":"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","sources":["components/AddressLink/AddressLink.tsx","components/AssetsIcons/AssetsIcons.tsx","components/Card/Card.tsx","components/ProtocolLabel/ProtocolLabel.tsx","components/VaultUnderlyingProtocols/VaultUnderlyingProtocols.tsx"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { LinkProps, Link } from '@chakra-ui/react'\nimport { getExplorerAddressUrl, shortenHash } from 'helpers/'\nimport { useWalletProvider } from 'contexts/WalletProvider'\n\ntype AddressLinkArgs = {\n  address: string\n} & LinkProps\n\nexport const AddressLink: React.FC<AddressLinkArgs> = ({ address, ...props }) => {\n  const { chainId, explorer } = useWalletProvider()\n  const url = useMemo(() => {\n    return getExplorerAddressUrl(chainId, explorer, address)\n  }, [chainId, explorer, address])\n\n  return (\n    <Link href={url} textStyle={'tableCell'} color={'link'} isExternal {...props}>{shortenHash(address)}</Link>\n  )\n}","import type { AssetId } from 'constants/types'\nimport { HStack, AvatarProps } from '@chakra-ui/react'\nimport { IconProps, AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetsIconsProps = {\n  assetIds: AssetId[]\n} & IconProps\n\nexport const AssetsIcons: React.FC<AssetsIconsProps> = ({ assetIds, showTooltip, ...props }) => {\n  return (\n    <HStack\n      spacing={0}\n    >\n      {\n        assetIds.map( (assetId: AssetId, index) => (\n          <AssetProvider key={`asset_${index}`} assetId={assetId}>\n            <AssetProvider.Icon {...props} ml={index ? -1 : 0} showTooltip={showTooltip} />\n          </AssetProvider>\n        ))\n      }\n    </HStack>\n  )\n}","import { Heading, Flex, Box, FlexProps, BoxProps, ThemingProps } from '@chakra-ui/react'\n\nexport type CardProps = BoxProps & ThemingProps \n\nconst HeadingTitle = (props: CardProps) => {\n  const { children, ...rest } = props\n  return (\n    <Heading as={'h3'} size={'md'} mb={6} {...rest}>{children}</Heading>\n  )\n}\n\nexport const Card = (props: CardProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Box\n      width={'100%'}\n      position={'relative'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const CardFlex = (props: CardProps & FlexProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Flex\n      width={'100%'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n\nexport const Dark = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardDark'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Light = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardLight'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Outline = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardOutline'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nCard.Dark = Dark\nCard.Light = Light\nCard.Flex = CardFlex\nCard.Outline = Outline\nCard.Heading = HeadingTitle","import { BsQuestion } from 'react-icons/bs'\nimport { selectProtocol } from 'selectors/selectProtocol'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { Avatar, AvatarProps, Text, HStack, TextProps } from '@chakra-ui/react'\n\ntype ProtocolIconProps = {\n  protocolId: string\n} & AvatarProps\n\nconst ProtocolIcon: React.FC<ProtocolIconProps> = ({children, protocolId, ...props}) => {\n  const protocol = selectProtocol(protocolId)\n  if (!protocol || !protocol.icon) return null\n  return (\n    <Avatar\n      p={0}\n      bg={'transparent'}\n      src={protocol.icon}\n      icon={<BsQuestion size={24} />}\n      sx={{\n        \"> img\": {\n          objectFit: 'contain'\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\ntype ProtocolLabelProps = {\n  size?: string\n  protocolId: string\n} & TextProps\n\nexport const ProtocolLabel: React.FC<ProtocolLabelProps> = ({ protocolId, size = 'sm', ...textProps }) => {\n  const protocol = selectProtocol(protocolId)\n  if (!protocol) return null\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'flex-start'}\n    >\n      <ProtocolIcon protocolId={protocolId} size={size} />\n      <Text textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps}>{protocol.label}</Text>\n    </HStack>\n  )\n}","import { BNify } from 'helpers/'\nimport React, { useMemo } from 'react'\nimport { Card } from 'components/Card/Card'\nimport type { AssetId } from 'constants/types'\nimport { Amount } from 'components/Amount/Amount'\nimport { BestYieldVault } from 'vaults/BestYieldVault'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport type { IdleTokenProtocol } from 'constants/vaults'\nimport { AssetsIcons } from 'components/AssetsIcons/AssetsIcons'\nimport { AddressLink } from 'components/AddressLink/AddressLink'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { selectUnderlyingToken, selectProtocol } from 'selectors/'\nimport { ProtocolLabel } from 'components/ProtocolLabel/ProtocolLabel'\nimport { HStack, VStack, Heading, SimpleGrid, Text } from '@chakra-ui/react'\n\ntype VaultUnderlyingProtocols = {\n  assetId: AssetId | undefined\n}\n\nexport const VaultUnderlyingProtocols: React.FC<VaultUnderlyingProtocols> = ({ assetId }) => {\n  const { chainId } = useWalletProvider()\n  const { selectors: { selectAssetById, selectVaultById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const vault = useMemo(() => {\n    return selectVaultById && selectVaultById(assetId)\n  }, [selectVaultById, assetId])\n\n  if (!vault || !(vault instanceof BestYieldVault)) return null\n  if (!(\"tokenConfig\" in vault) || !vault.tokenConfig?.protocols) return null\n\n  return (\n    <VStack\n      spacing={6}\n      alignItems={'flex-start'}\n    >\n      <Translation component={Heading} as={'h3'} size={'md'} translation={'defi.underlyingProtocols'} />\n      <SimpleGrid\n        spacing={6}\n        width={'100%'}\n        columns={[1, 3]}\n      >\n      {\n        vault.tokenConfig?.protocols.map( (protocol: IdleTokenProtocol) => {\n          const protocolConfig = selectProtocol(protocol.name)\n          const allocationPercentage = BNify(asset.allocations?.[protocol.name]).div(100)\n          const allocationUsd = BNify(asset?.tvlUsd).times(allocationPercentage)\n          const assetIds = protocolConfig?.govTokens?.reduce( (assetIds: string[], tokenName: string) => {\n            const underlyingToken = selectUnderlyingToken(chainId, tokenName)\n            if (underlyingToken?.address){\n              assetIds.push(underlyingToken.address)\n            }\n            return assetIds\n          }, [])\n\n          return (\n            <Card\n              p={6}\n              key={`protocol_${protocol.name}`}\n            >\n              <VStack\n                spacing={6}\n                width={'100%'}\n                alignItems={'flex-start'}\n              >\n                <ProtocolLabel protocolId={protocol.name} size={'xs'} />\n                <HStack\n                  spacing={6}\n                >\n                  <VStack\n                    spacing={1}\n                    alignItems={'flex-start'}\n                  >\n                    <Translation component={Text} translation={'defi.poolAddress'} textStyle={'captionSmall'} />\n                    <AddressLink address={protocol.address} />\n                  </VStack>\n                  <VStack\n                    spacing={1}\n                    alignItems={'flex-start'}\n                  >\n                    <Translation component={Text} translation={'defi.govToken'} textStyle={'captionSmall'} />\n                    {\n                      !assetIds ? (\n                        <Text textStyle={'captionSmall'}>-</Text>\n                      ) : (\n                        <AssetsIcons assetIds={assetIds} showTooltip={true} size={'xs'} />\n                      )\n                    }\n                  </VStack>\n                  <VStack\n                    spacing={1}\n                    alignItems={'flex-start'}\n                  >\n                    <Translation component={Text} translation={'assets.assetDetails.generalData.allocation'} textStyle={'captionSmall'} />\n                    <Amount.Usd value={allocationUsd} textStyle={'tableCell'} />\n                  </VStack>\n                </HStack>\n              </VStack>\n            </Card>\n          )\n        })\n      }\n      </SimpleGrid>\n    </VStack>\n  )\n}"],"names":["AddressLink","address","props","useWalletProvider","chainId","explorer","url","useMemo","getExplorerAddressUrl","href","textStyle","color","isExternal","shortenHash","AssetsIcons","assetIds","showTooltip","spacing","map","assetId","index","AssetProvider","ml","Card","children","layerStyle","rest","width","position","CardFlex","Dark","concat","Light","Outline","Flex","Heading","as","size","mb","ProtocolIcon","protocolId","protocol","selectProtocol","icon","p","bg","src","sx","objectFit","ProtocolLabel","textProps","alignItems","justifyContent","fontSize","whiteSpace","label","VaultUnderlyingProtocols","usePortfolioProvider","selectors","selectAssetById","selectVaultById","asset","vault","BestYieldVault","tokenConfig","protocols","Translation","component","translation","columns","protocolConfig","name","allocationPercentage","BNify","allocations","div","allocationUsd","tvlUsd","times","govTokens","reduce","tokenName","underlyingToken","selectUnderlyingToken","push","Text","Amount","value"],"sourceRoot":""}