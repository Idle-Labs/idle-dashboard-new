{"version":3,"file":"static/js/5633.1d1e4d8f.chunk.js","mappings":"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","sources":["components/AssetLabel/AssetLabel.tsx","components/Card/Card.tsx","components/VaultCard/VaultCard.tsx"],"sourcesContent":["import type { AssetId } from 'constants/types'\nimport { HStack, TextProps } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetLabelProps = {\n  size?: string\n  assetId: AssetId | undefined\n} & TextProps\n\nexport const AssetLabel: React.FC<AssetLabelProps> = ({ assetId, size = 'sm', ...textProps }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <HStack\n        alignItems={'center'}\n        justifyContent={'flex-start'}\n      >\n        <AssetProvider.Icon size={size} />\n        <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps} />\n      </HStack>\n    </AssetProvider>\n  )\n}","import { Heading, Flex, Box, FlexProps, BoxProps, ThemingProps } from '@chakra-ui/react'\n\nexport type CardProps = BoxProps & ThemingProps \n\nconst HeadingTitle = (props: CardProps) => {\n  const { children, ...rest } = props\n  return (\n    <Heading as={'h3'} size={'md'} mb={6} {...rest}>{children}</Heading>\n  )\n}\n\nexport const Card = (props: CardProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Box\n      width={'100%'}\n      position={'relative'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const CardFlex = (props: CardProps & FlexProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Flex\n      width={'100%'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n\nexport const Dark = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardDark'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Light = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardLight'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Outline = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardOutline'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nCard.Dark = Dark\nCard.Light = Light\nCard.Flex = CardFlex\nCard.Outline = Outline\nCard.Heading = HeadingTitle","import React, { useMemo } from 'react'\nimport { AssetId } from 'constants/types'\nimport { useNavigate } from 'react-router-dom'\nimport { CardProps, Card } from 'components/Card/Card'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { VStack, SimpleGrid, HStack, Box, Text, Button } from '@chakra-ui/react'\n\nexport type VaultCardProps = {\n  assetId: AssetId\n}\n\ntype VaultCardField = {\n  label: string\n  field: string\n}\n\nexport type VaultCardInlineProps = {\n  fields: VaultCardField[]\n  onClick?: Function\n} & VaultCardProps & CardProps\n\nconst Inline = ({ assetId, fields, onClick, ...cardProps }: VaultCardInlineProps) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        py={2}\n        px={[4, 6]}\n        layerStyle={['card', 'cardHover']}\n        onClick={onClick}\n        {...cardProps}\n      >\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={3}\n            width={'100%'}\n            alignItems={'center'}\n          >\n            <AssetProvider.Icon size={'xs'} />\n            {/*<AssetProvider.Name textStyle={'tableCell'} />*/}\n            {\n              fields.map( (fieldInfo, index) => (\n                <React.Fragment key={`field_${index}`}>\n                  <Box\n                    width={1}\n                    height={1}\n                    bg={'divider'}\n                    borderRadius={'50%'}\n                  />\n                  <HStack\n                    spacing={2}\n                  >\n                    <Translation translation={fieldInfo.label} component={Text} textStyle={'captionSmall'} />\n                    <AssetProvider.GeneralData field={fieldInfo.field} textStyle={'tableCell'} />\n                  </HStack>\n                </React.Fragment>\n              ))\n            }\n          </HStack>\n        </HStack>\n      </Card>\n    </AssetProvider>\n  )\n}\n\nexport const VaultCard = ({ assetId }: VaultCardProps) => {\n  const navigate = useNavigate()\n  const { location } = useBrowserRouter()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    if (!selectAssetById) return\n    return selectAssetById(assetId)\n  }, [assetId, selectAssetById])\n\n  const depositedOrRewards = useMemo(() => {\n    return asset?.vaultPosition?.usd.deposited ? (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.deposited'} textStyle={'captionSmall'} />\n        <AssetProvider.DepositedUsd textStyle={'tableCell'} />\n      </VStack>\n    ) : asset?.type === 'BY' ? (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.protocols'} textStyle={'captionSmall'} />\n        <AssetProvider.Protocols iconMargin={-1} size={'xs'} />\n      </VStack>\n    ) : (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.rewards'} textStyle={'captionSmall'} />\n        <AssetProvider.Rewards iconMargin={-1} size={'xs'} />\n      </VStack>\n    )\n  }, [asset])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        p={4}\n        onClick={() => navigate(`${location?.pathname}/${assetId}`)}\n      >\n        <VStack\n          spacing={3}\n          alignItems={'flex-start'}\n        >\n          <AssetLabel assetId={assetId} size={'sm'} />\n          <SimpleGrid\n            pt={3}\n            pl={4}\n            columns={3}\n            width={'100%'}\n            borderTop={'1px solid'}\n            borderTopColor={'divider'}\n          >\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation translation={'defi.pool'} textStyle={'captionSmall'} />\n              <AssetProvider.PoolUsd textStyle={'tableCell'} />\n            </VStack>\n\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation translation={'defi.apy'} textStyle={'captionSmall'} />\n              <AssetProvider.Apy textStyle={'tableCell'} />\n            </VStack>\n            {depositedOrRewards}\n          </SimpleGrid>\n        </VStack>\n      </Card>\n    </AssetProvider>\n  )\n}\n\nVaultCard.Inline = Inline"],"names":["AssetLabel","assetId","size","textProps","AssetProvider","wrapFlex","alignItems","justifyContent","textStyle","fontSize","whiteSpace","Card","props","children","layerStyle","rest","width","position","CardFlex","Dark","concat","Light","Outline","Flex","Heading","as","mb","VaultCard","navigate","useNavigate","location","useBrowserRouter","selectAssetById","usePortfolioProvider","selectors","asset","useMemo","depositedOrRewards","vaultPosition","usd","deposited","spacing","Translation","translation","type","iconMargin","p","onClick","pathname","pt","pl","columns","borderTop","borderTopColor","Inline","fields","cardProps","py","px","map","fieldInfo","index","height","bg","borderRadius","label","component","Text","field"],"sourceRoot":""}