{"version":3,"file":"static/js/8880.66f3fb46.chunk.js","mappings":"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","sources":["components/AssetGeneralData/AssetGeneralData.tsx","components/AssetPage/GaugeStaking.tsx","components/TransactionButton/TransactionButton.tsx","webpack://idle-dashboard-new/./src/components/TransactionButton/progress.css?8ae6","../node_modules/framer-motion/dist/es/animation/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/use-animation.mjs","../node_modules/framer-motion/dist/es/value/use-motion-value.mjs"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { MdInfo } from 'react-icons/md'\nimport { Card } from 'components/Card/Card'\nimport { useTranslate } from 'react-polyglot'\nimport type { AssetId } from 'constants/types'\nimport { Translation } from 'components/Translation/Translation'\n// import { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { strategies, GeneralDataField } from 'constants/strategies'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { TooltipContent } from 'components/TooltipContent/TooltipContent'\nimport { useTheme, HStack, VStack, SimpleGrid, Text, Tooltip } from '@chakra-ui/react'\n\ntype AssetGeneralDataArgs = {\n  assetId?: AssetId\n}\n\ntype LabelProps = {\n  generalData: GeneralDataField\n}\n\nconst Label: React.FC<LabelProps> = ({generalData}) => {\n  const theme = useTheme()\n  const translate = useTranslate()\n  return generalData.tooltip ? (\n    <HStack\n      spacing={1}\n      alignItems={'center'}\n    >\n      <Translation component={Text} translation={generalData.label} textStyle={'captionSmall'} />\n      <Tooltip\n        hasArrow\n        placement={'top'}\n        label={translate(generalData.tooltip)}\n      >\n        <TooltipContent>\n          <MdInfo color={theme.colors.cta} size={16} />\n        </TooltipContent>\n      </Tooltip>\n    </HStack>\n  ) : (\n    <Translation component={Text} translation={generalData.label} textStyle={'captionSmall'} />\n  )\n}\n\nexport const AssetGeneralData: React.FC<AssetGeneralDataArgs> = ({ assetId }) => {\n  // const { params } = useBrowserRouter()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const strategy = useMemo(() => {\n    return asset?.type && strategies[asset.type]\n  }, [asset])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card.Dark>\n        <SimpleGrid\n          spacing={[6, 0]}\n          columns={[2, Math.min(strategy?.generalDataFields.length, 5)]}\n        >\n          {\n            strategy?.generalDataFields && strategy?.generalDataFields.slice(0, 5).map( (generalData: GeneralDataField) => {\n              return (\n                <VStack\n                  spacing={2}\n                  alignItems={'flex-start'}\n                  justifyContent={'flex-start'}\n                  key={`field_${generalData.field}`}\n                >\n                  <Label generalData={generalData} />\n                  <AssetProvider.GeneralData section={'asset'} field={generalData.field} />\n                </VStack>\n              )\n            })\n          }\n        </SimpleGrid>\n        {\n          strategy?.generalDataFields && strategy?.generalDataFields.length>5 && (\n            <SimpleGrid\n              pt={6}\n              mt={6}\n              spacing={[6, 0]}\n              columns={[2, Math.min(strategy?.generalDataFields.length, 5)]}\n              borderTop={'1px solid'}\n              borderTopColor={'divider'}\n            >\n              {\n                strategy?.generalDataFields.slice(5).map( (generalData: GeneralDataField) => {\n                  return (\n                    <VStack\n                      spacing={2}\n                      alignItems={'flex-start'}\n                      justifyContent={'flex-start'}\n                      key={`field_${generalData.field}`}\n                    >\n                      <Label generalData={generalData} />\n                      <AssetProvider.GeneralData section={'asset'} field={generalData.field} />\n                    </VStack>\n                  )\n                })\n              }\n            </SimpleGrid>\n          )\n        }\n      </Card.Dark>\n    </AssetProvider>\n  )\n}","import { strategies } from 'constants/'\nimport { BNify, isEmpty } from 'helpers/'\nimport { Card } from 'components/Card/Card'\nimport React, { useMemo, useEffect } from 'react'\nimport { Amount } from 'components/Amount/Amount'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { AssetGeneralData } from 'components/AssetGeneralData/AssetGeneralData'\nimport { TransactionButton } from 'components/TransactionButton/TransactionButton'\nimport { VStack, Heading, Text, Stack, HStack, Button, SimpleGrid } from '@chakra-ui/react'\nimport { StrategyDescriptionCarousel } from 'components/StrategyDescriptionCarousel/StrategyDescriptionCarousel'\n\nexport const GaugeStaking: React.FC = () => {\n  const { params } = useBrowserRouter()\n  const { assetsData, selectors: { selectAssetById, selectVaultGauge } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    const asset = selectAssetById && selectAssetById(params.asset)\n    // console.log('GaugeStaking - useMemo - asset', asset)\n    return asset\n  }, [selectAssetById, params.asset])\n\n  const vaultGauge = useMemo(() => {\n    return asset && selectVaultGauge && selectVaultGauge(asset.id)\n  }, [selectVaultGauge, asset])\n\n  const assetGauge = useMemo(() => {\n    const asset = selectAssetById && vaultGauge && selectAssetById(vaultGauge.id)\n    // console.log('GaugeStaking - useMemo - assetGauge', asset)\n    return asset\n  }, [vaultGauge, selectAssetById])\n\n  const strategy = useMemo(() => {\n    return Object.keys(strategies).find( strategy => strategies[strategy].route === params.strategy )\n  }, [params])\n\n  const strategyColor = useMemo(() => {\n    return strategy && strategies[strategy].color\n  }, [strategy])\n\n  const strategyDescriptionCarousel = useMemo(() => {\n    if (!vaultGauge) return null\n    const strategyProps = strategies[vaultGauge.type]\n    if (!strategyProps?.carouselItems) return null\n    return (\n      <StrategyDescriptionCarousel color={strategyColor} strategy={vaultGauge.type} delay={10000} />\n    )\n  }, [vaultGauge, strategyColor])\n\n  const userShare = useMemo(() => {\n    return assetGauge?.vaultPosition && BNify(assetGauge?.vaultPosition?.underlying.redeemable).div(assetGauge.totalSupply)\n  }, [assetGauge])\n\n  // console.log('vaultGauge', vaultGauge)\n  // console.log('assetGauge', assetGauge)\n\n  return (\n    <VStack\n      spacing={10}\n      width={'100%'}\n    >\n      {\n        assetGauge.vaultPosition && (\n          <AssetProvider\n            wrapFlex={false}\n            assetId={vaultGauge.id}\n          >\n            <SimpleGrid\n              width={'100%'}\n              columns={[2, 4]}\n              spacing={[10, 14]}\n              alignItems={'flex-start'}\n            >\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.deposited'} textStyle={'titleSmall'} />\n                <HStack\n                  spacing={1}\n                  alignItems={'baseline'}\n                >\n                  <AssetProvider.Deposited textStyle={'heading'} fontSize={'h3'} />\n                  <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} />\n                </HStack>\n              </VStack>\n\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.share'} textStyle={'titleSmall'} />\n                <AssetProvider.GaugeShare textStyle={'heading'} fontSize={'h3'} />\n              </VStack>\n\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.idleDistribution'} textStyle={'titleSmall'} />\n                <HStack\n                  spacing={1}\n                  alignItems={'baseline'}\n                >\n                  <AssetProvider.GaugeUserDistribution suffix={` ${vaultGauge.rewardToken?.token}`} textStyle={'heading'} fontSize={'h3'} />\n                  <Translation component={Text} translation={['/','common.day']} textStyle={'captionSmall'} textTransform={'lowercase'} />\n                </HStack>\n              </VStack>\n\n              <VStack\n                spacing={2}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={'defi.additionalRewards'} textStyle={'titleSmall'} />\n                <VStack\n                  spacing={2}\n                >\n                  {\n                    vaultGauge.multiRewardsTokens?.length>0 ? Object.keys(assetGauge.gaugeData?.rewards).map( rewardId => {\n                      const rewardData = assetGauge.gaugeData.rewards[rewardId]\n                      if (rewardId === vaultGauge.rewardToken.address) return null\n                      const rewardAsset = selectAssetById(rewardId)\n                      return (\n                        <HStack\n                          spacing={1}\n                          alignItems={'baseline'}\n                          key={`reward_${rewardId}`}\n                        >\n                          <Amount value={rewardData.rate.times(userShare)} suffix={` ${rewardAsset.token}`} textStyle={'heading'} fontSize={'h3'} />\n                          <Translation component={Text} translation={['/','common.day']} textStyle={'captionSmall'} textTransform={'lowercase'} />\n                        </HStack>\n                      )\n                    }) : (\n                      <Text textStyle={'heading'} fontSize={'h3'}>-</Text>\n                    )\n                  }\n                </VStack>\n              </VStack>\n            </SimpleGrid>\n          </AssetProvider>\n        )\n      }\n      <VStack\n        spacing={6}\n        width={'100%'}\n        alignItems={'flex-start'}\n      >\n        <Translation component={Heading} as={'h3'} size={'md'} translation={'defi.rewards'} />\n        <VStack\n          spacing={4}\n          width={'100%'}\n        >\n          {\n            !isEmpty(assetGauge.gaugeData?.rewards) ? Object.keys(assetGauge.gaugeData?.rewards).map( rewardId => {\n              const rewardData = assetGauge.gaugeData.rewards[rewardId]\n              const contractSendMethod = vaultGauge.getClaimRewardsContractSendMethod(rewardId)\n              return (\n                <AssetProvider\n                  wrapFlex={false}\n                  assetId={rewardId}\n                  key={`reward_${rewardId}`}\n                >\n                  <Card\n                    p={6}\n                    px={8}\n                    width={'100%'}\n                  >\n                    <Stack\n                      width={'100%'}\n                      spacing={[4, 0]}\n                      alignItems={'center'}\n                      direction={['column', 'row']}\n                      justifyContent={'space-between'}\n                    >\n                      <SimpleGrid\n                        width={'100%'}\n                        spacing={[6, 0]}\n                        columns={[2, 4]}\n                      >\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.asset'} textStyle={'captionSmall'} />\n                          <AssetProvider.GeneralData size={'xs'} field={'asset'} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.apr'} textStyle={'captionSmall'} />\n                          <Amount.Percentage textStyle={'tableCell'} value={rewardData.apr} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.dailyDistribution'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                            width={'100%'}\n                          >\n                            <Amount textStyle={'tableCell'} value={rewardData.rate} />\n                            <AssetProvider.Name textStyle={'tableCell'} />\n                          </HStack>\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                            width={'100%'}\n                          >\n                            <Amount textStyle={'tableCell'} value={rewardData.balance} />\n                            <AssetProvider.Name textStyle={'tableCell'} />\n                          </HStack>\n                        </VStack>\n                      </SimpleGrid>\n                      <TransactionButton text={'defi.claim'} vaultId={asset.id} assetId={rewardId} contractSendMethod={contractSendMethod} actionType={'claim'} amount={rewardData.balance.toString()} width={['100%', '150px']} disabled={rewardData.balance.lte(0)} />\n                    </Stack>\n                  </Card>\n                </AssetProvider>\n              )\n            }) : null\n          }\n        </VStack>\n      </VStack>\n      <AssetGeneralData assetId={vaultGauge?.id} />\n      {strategyDescriptionCarousel}\n    </VStack>\n  )\n}","import './progress.css'\nimport type { AssetId } from 'constants/types'\nimport { ContractSendMethod } from 'web3-eth-contract'\nimport { MdOutlineDone, MdOutlineClose } from 'react-icons/md'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport React, { useRef, useCallback, useState, useMemo, useEffect } from 'react'\nimport { TranslationProps, Translation } from 'components/Translation/Translation'\nimport { TransactionStatus, useTransactionManager } from 'contexts/TransactionManagerProvider'\nimport { useTheme, ButtonProps, Button, Box, Flex, Spinner, Text, TextProps } from '@chakra-ui/react'\n\ntype TransactionButtonProps = {\n  text: string\n  amount?: string\n  assetId: AssetId\n  vaultId: AssetId\n  actionType?: string\n  contractSendMethod: ContractSendMethod\n}\n\nexport const TransactionButtonValue: React.FC<TransactionButtonProps & TextProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  const theme = useTheme()\n  const intervalId = useRef<any>(null)\n  const [ remainingTime, setRemainingTime ] = useState<number | null>(null)\n  const { state: { transaction }, cleanTransaction } = useTransactionManager()\n\n  // const transaction: TransactionStatus = useMemo(() => ({\n  //   hash: null,\n  //   error: null,\n  //   status: 'success',\n  //   amount: null,\n  //   assetId: null,\n  //   vaultId: null,\n  //   receipt: null,\n  //   created: null,\n  //   timestamp: null,\n  //   actionType: null,\n  //   transaction: null,\n  //   lastUpdated: null,\n  //   estimatedTime: null,\n  //   confirmationCount: 0,\n  //   contractSendMethod,\n  // }), [contractSendMethod])\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const transactionStarted = useMemo(() => {\n    return isRightTransaction && transaction.status && ['pending', 'success', 'failed'].includes(transaction.status) && transaction.estimatedTime\n  }, [transaction, isRightTransaction])\n\n  const transitionDuration = useMemo(() => {\n    return transactionStarted && transaction.status === 'pending' ? transaction.estimatedTime : 0.5\n  }, [transactionStarted, transaction])\n\n  const startCountdown = useCallback(() => {\n    // console.log('getRemainingTime', transaction)\n    if (!transaction.timestamp || !transaction.estimatedTime) return null\n    const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n    // console.log('getRemainingTime - targetTimestamp', targetTimestamp, Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000)))\n    const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n\n    setRemainingTime(remainingTime)\n    if (!remainingTime) return\n    // console.log('TransactionButton - startCountdown')\n    intervalId.current = setTimeout(() => {\n      startCountdown()\n    }, 1000)\n  }, [transaction])\n\n  useEffect(() => {\n    if (transaction.status === 'success' || transaction.status === 'failed'){\n      // console.log('Clear Interval', intervalId.current)\n      if (intervalId.current){\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n      // Clean transaction if success or failed\n      if (transaction.status === 'success' || transaction.error?.code !== 4001){\n        setTimeout(() => {\n          cleanTransaction()\n        }, 4000)\n      }\n    } else if (transaction.status === 'pending' && !intervalId.current){\n      startCountdown()\n    }\n  }, [transaction.status, startCountdown, cleanTransaction, transaction.error?.code])\n  \n  const textComponent = useMemo(() => {\n    if (isRightTransaction){\n      switch (transaction?.status){\n        case 'created':\n          return (\n            <Spinner size={'sm'} />\n          )\n        case 'pending':\n          if (!transaction.timestamp || !transaction.estimatedTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          // const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n          // const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n          // Return spinner if long transaction\n          if (!remainingTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          return (\n            <Text textStyle={'ctaStatic'}>{remainingTime}s</Text>\n          )\n        case 'success':\n          return (\n            <Flex\n              {...props}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              <MdOutlineDone size={24} color={theme.colors.green['400']} />\n            </Flex>\n          )\n        case 'failed':\n          if (transaction.error?.code !== 4001){\n            return (\n              <Flex\n                {...props}\n                alignItems={'center'}\n                justifyContent={'center'}\n              >\n                <MdOutlineClose size={24} color={theme.colors.red['400']} />\n              </Flex>\n            )\n          }\n        break\n        default:\n        break\n      }\n    }\n    return (\n      <Translation translation={text} textStyle={'ctaStatic'} />\n    )\n  }, [isRightTransaction, remainingTime, transaction, text, theme, props])\n\n  const progressBg = useMemo(() => {\n    switch (transaction.status){\n      case 'success':\n      case 'failed':\n        return 'transparent'\n      default:\n        return 'primary'\n    }\n  }, [transaction])\n\n  return (\n    <>\n      <Flex\n        top={0}\n        left={0}\n        bottom={0}\n        bg={progressBg}\n        overflow={'hidden'}\n        position={'absolute'}\n        alignItems={'center'}\n        justifyContent={'center'}\n        transition={'background 0.5s ease-in-out'}\n        sx={{\n          animationIterationCount: 1,\n          animationFillMode: 'forwards',\n          animationTimingFunction: 'ease-in-out',\n          animationDuration: `${transitionDuration}s`,\n          animationName: transactionStarted ? 'progress' : 'none',\n          animationPlayState: transactionStarted ? 'running' : 'stopped',\n        }}\n      >\n        <Flex\n          left={0}\n          width={props.width}\n          alignItems={'center'}\n          position={'absolute'}\n          justifyContent={'center'}\n          sx={{\n            '> *':{\n              color:'black !important',\n              borderColor:'black !important',\n            }\n          }}\n        >\n          {textComponent}\n        </Flex>\n      </Flex>\n      {textComponent}\n    </>\n  )\n}\n\nexport const TransactionButton: React.FC<TransactionButtonProps & ButtonProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  // @ts-ignore\n  const [ref, { width }] = useBoundingRect()\n  const { sendTransaction, state: { transaction } } = useTransactionManager()\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const onClick = useCallback(() => {\n    if (transaction.status === 'created' || transaction.status === 'pending') return\n    // console.log('onClick', vaultId, assetId, contractSendMethod)\n    return sendTransaction(vaultId, assetId, contractSendMethod, actionType, amount)\n  }, [transaction, vaultId, assetId, contractSendMethod, actionType, amount, sendTransaction])\n\n  const borderColor = useMemo(() => {\n    if (!isRightTransaction) return 'primary'\n    switch (transaction.status){\n      case 'success':\n        return 'green.400'\n      case 'failed':\n        return transaction.error?.code !== 4001 ? 'red.400' : 'primary'\n      default:\n        return 'primary'\n    }\n  }, [isRightTransaction, transaction])\n\n  return (\n    <Button\n      py={2}\n      px={10}\n      overflow={'hidden'}\n      position={'relative'}\n      width={width || 'auto'}\n      borderColor={borderColor}\n      onClick={() => onClick()}\n      ref={ref as typeof useRef}\n      variant={'ctaPrimaryOutline'}\n      transition={'border 0.5s ease-in-out'}\n      {...props}\n    >\n      <TransactionButtonValue text={text} vaultId={vaultId} assetId={assetId} contractSendMethod={contractSendMethod} width={width} />\n    </Button>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {};","import { __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { stopAnimation, animateVisualElement } from '../render/utils/animation.mjs';\nimport { setValues } from '../render/utils/setters.mjs';\n\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    var hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */\n    var pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */\n    var subscribers = new Set();\n    var controls = {\n        subscribe: function (visualElement) {\n            subscribers.add(visualElement);\n            return function () { return void subscribers.delete(visualElement); };\n        },\n        start: function (definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */\n            if (hasMounted) {\n                var animations_1 = [];\n                subscribers.forEach(function (visualElement) {\n                    animations_1.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride: transitionOverride,\n                    }));\n                });\n                return Promise.all(animations_1);\n            }\n            else {\n                return new Promise(function (resolve) {\n                    pendingAnimations.push({\n                        animation: [definition, transitionOverride],\n                        resolve: resolve,\n                    });\n                });\n            }\n        },\n        set: function (definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach(function (visualElement) {\n                setValues(visualElement, definition);\n            });\n        },\n        stop: function () {\n            subscribers.forEach(function (visualElement) {\n                stopAnimation(visualElement);\n            });\n        },\n        mount: function () {\n            hasMounted = true;\n            pendingAnimations.forEach(function (_a) {\n                var animation = _a.animation, resolve = _a.resolve;\n                controls.start.apply(controls, __spreadArray([], __read(animation), false)).then(resolve);\n            });\n            return function () {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.mjs';\nimport { useEffect } from 'react';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    var controls = useConstant(animationControls);\n    useEffect(controls.mount, []);\n    return controls;\n}\nvar useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import { __read } from 'tslib';\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    var value = useConstant(function () { return motionValue(initial); });\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    var isStatic = useContext(MotionConfigContext).isStatic;\n    if (isStatic) {\n        var _a = __read(useState(initial), 2), setLatest_1 = _a[1];\n        useEffect(function () { return value.onChange(setLatest_1); }, []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n"],"names":["Label","generalData","theme","useTheme","translate","useTranslate","tooltip","spacing","alignItems","Translation","component","Text","translation","label","textStyle","hasArrow","placement","TooltipContent","color","colors","cta","size","AssetGeneralData","assetId","selectAssetById","usePortfolioProvider","selectors","asset","useMemo","strategy","type","strategies","AssetProvider","wrapFlex","Card","columns","Math","min","generalDataFields","length","slice","map","justifyContent","section","field","pt","mt","borderTop","borderTopColor","GaugeStaking","params","useBrowserRouter","assetsData","selectVaultGauge","vaultGauge","id","assetGauge","Object","keys","find","route","strategyColor","strategyDescriptionCarousel","strategyProps","carouselItems","StrategyDescriptionCarousel","delay","userShare","vaultPosition","BNify","underlying","redeemable","div","totalSupply","width","fontSize","suffix","rewardToken","token","textTransform","multiRewardsTokens","gaugeData","rewards","rewardId","rewardData","address","rewardAsset","Amount","value","rate","times","Heading","as","isEmpty","contractSendMethod","getClaimRewardsContractSendMethod","p","px","direction","apr","balance","TransactionButton","text","vaultId","actionType","amount","toString","disabled","lte","TransactionButtonValue","props","intervalId","useRef","useState","remainingTime","setRemainingTime","useTransactionManager","transaction","state","cleanTransaction","isRightTransaction","JSON","stringify","_method","transactionStarted","status","includes","estimatedTime","transitionDuration","startCountdown","useCallback","timestamp","targetTimestamp","max","ceil","Date","now","current","setTimeout","useEffect","clearInterval","error","code","textComponent","green","red","progressBg","top","left","bottom","bg","overflow","position","transition","sx","animationIterationCount","animationFillMode","animationTimingFunction","animationDuration","animationName","animationPlayState","borderColor","useBoundingRect","ref","sendTransaction","onClick","py","variant","animationControls","hasMounted","pendingAnimations","subscribers","Set","controls","subscribe","visualElement","add","delete","start","definition","transitionOverride","animations_1","forEach","push","animateVisualElement","Promise","all","resolve","animation","set","invariant","setValues","stop","stopAnimation","mount","_a","apply","__spreadArray","__read","then","useAnimation","useConstant","useMotionValue","initial","motionValue","useContext","MotionConfigContext","isStatic","setLatest_1","onChange"],"sourceRoot":""}