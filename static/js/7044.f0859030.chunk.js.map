{"version":3,"file":"static/js/7044.f0859030.chunk.js","mappings":"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","sources":["components/AssetGeneralData/AssetGeneralData.tsx","components/Card/Card.tsx"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { MdInfo } from 'react-icons/md'\nimport { Card } from 'components/Card/Card'\nimport { useTranslate } from 'react-polyglot'\nimport type { AssetId } from 'constants/types'\nimport { Translation } from 'components/Translation/Translation'\n// import { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimportÂ { strategies, GeneralDataField } from 'constants/strategies'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { TooltipContent } from 'components/TooltipContent/TooltipContent'\nimport { useTheme, HStack, VStack, SimpleGrid, Text, Tooltip } from '@chakra-ui/react'\n\ntype AssetGeneralDataArgs = {\n  assetId?: AssetId\n}\n\ntype LabelProps = {\n  generalData: GeneralDataField\n}\n\nconst Label: React.FC<LabelProps> = ({generalData}) => {\n  const theme = useTheme()\n  const translate = useTranslate()\n  return generalData.tooltip ? (\n    <HStack\n      spacing={1}\n      alignItems={'center'}\n    >\n      <Translation component={Text} translation={generalData.label} textStyle={'captionSmall'} />\n      <Tooltip\n        hasArrow\n        placement={'top'}\n        label={translate(generalData.tooltip)}\n      >\n        <TooltipContent>\n          <MdInfo color={theme.colors.cta} size={16} />\n        </TooltipContent>\n      </Tooltip>\n    </HStack>\n  ) : (\n    <Translation component={Text} translation={generalData.label} textStyle={'captionSmall'} />\n  )\n}\n\nexport const AssetGeneralData: React.FC<AssetGeneralDataArgs> = ({ assetId }) => {\n  // const { params } = useBrowserRouter()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const strategy = useMemo(() => {\n    return asset?.type && strategies[asset.type]\n  }, [asset])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card.Dark>\n        <SimpleGrid\n          spacing={[6, 0]}\n          columns={[2, Math.min(strategy?.generalDataFields.length, 5)]}\n        >\n          {\n            strategy?.generalDataFields && strategy?.generalDataFields.slice(0, 5).map( (generalData: GeneralDataField) => {\n              return (\n                <VStack\n                  spacing={2}\n                  alignItems={'flex-start'}\n                  justifyContent={'flex-start'}\n                  key={`field_${generalData.field}`}\n                >\n                  <Label generalData={generalData} />\n                  <AssetProvider.GeneralData section={'asset'} field={generalData.field} />\n                </VStack>\n              )\n            })\n          }\n        </SimpleGrid>\n        {\n          strategy?.generalDataFields && strategy?.generalDataFields.length>5 && (\n            <SimpleGrid\n              pt={6}\n              mt={6}\n              spacing={[6, 0]}\n              columns={[2, Math.min(strategy?.generalDataFields.length, 5)]}\n              borderTop={'1px solid'}\n              borderTopColor={'divider'}\n            >\n              {\n                strategy?.generalDataFields.slice(5).map( (generalData: GeneralDataField) => {\n                  return (\n                    <VStack\n                      spacing={2}\n                      alignItems={'flex-start'}\n                      justifyContent={'flex-start'}\n                      key={`field_${generalData.field}`}\n                    >\n                      <Label generalData={generalData} />\n                      <AssetProvider.GeneralData section={'asset'} field={generalData.field} />\n                    </VStack>\n                  )\n                })\n              }\n            </SimpleGrid>\n          )\n        }\n      </Card.Dark>\n    </AssetProvider>\n  )\n}","import { Heading, Flex, Box, FlexProps, BoxProps, ThemingProps } from '@chakra-ui/react'\n\nexport type CardProps = BoxProps & ThemingProps \n\nconst HeadingTitle = (props: CardProps) => {\n  const { children, ...rest } = props\n  return (\n    <Heading as={'h3'} size={'md'} mb={6} {...rest}>{children}</Heading>\n  )\n}\n\nexport const Card = (props: CardProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Box\n      width={'100%'}\n      position={'relative'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const CardFlex = (props: CardProps & FlexProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Flex\n      width={'100%'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n\nexport const Dark = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardDark'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Light = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardLight'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Outline = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardOutline'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nCard.Dark = Dark\nCard.Light = Light\nCard.Flex = CardFlex\nCard.Outline = Outline\nCard.Heading = HeadingTitle"],"names":["Label","generalData","theme","useTheme","translate","useTranslate","tooltip","spacing","alignItems","Translation","component","Text","translation","label","textStyle","hasArrow","placement","TooltipContent","color","colors","cta","size","AssetGeneralData","assetId","selectAssetById","usePortfolioProvider","selectors","asset","useMemo","strategy","type","strategies","AssetProvider","wrapFlex","Card","columns","Math","min","generalDataFields","length","slice","map","justifyContent","section","field","pt","mt","borderTop","borderTopColor","props","children","layerStyle","rest","width","position","CardFlex","Dark","concat","Light","Outline","Flex","Heading","as","mb"],"sourceRoot":""}