{"version":3,"file":"static/js/6721.c386d939.chunk.js","mappings":"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","sources":["components/AssetLabel/AssetLabel.tsx","components/AssetsIcons/AssetsIcons.tsx","components/BalanceChart/BalanceChart.tsx","components/Card/Card.tsx","components/CompositionChart/CompositionChart.tsx","components/Dashboard/Dashboard.tsx","components/DonutChart/DonutChart.tsx","components/JoinCommunity/JoinCommunity.tsx","components/Scrollable/Scrollable.tsx","components/StrategyLabel/StrategyLabel.tsx","components/TimeframeSelector/TimeframeSelector.tsx","components/TransactionButton/TransactionButton.tsx","components/TransactionList/TransactionList.tsx","components/VaultCard/VaultCard.tsx","components/VaultRewardOverview/VaultRewardOverview.tsx","hooks/useBalanceChartData/useBalanceChartData.ts","hooks/useBoundingRect/useBoundingRect.ts","hooks/useCompositionChartData/useCompositionChartData.ts","../node_modules/@chakra-ui/stat/dist/index.esm.js","webpack://idle-dashboard-new/./src/components/TransactionButton/progress.css?8ae6"],"sourcesContent":["import type { AssetId } from 'constants/types'\nimport { HStack, TextProps } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetLabelProps = {\n  size?: string\n  assetId: AssetId | undefined\n} & TextProps\n\nexport const AssetLabel: React.FC<AssetLabelProps> = ({ assetId, size = 'sm', ...textProps }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <HStack\n        alignItems={'center'}\n        justifyContent={'flex-start'}\n      >\n        <AssetProvider.Icon size={size} />\n        <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps} />\n      </HStack>\n    </AssetProvider>\n  )\n}","import type { AssetId } from 'constants/types'\nimport { HStack, AvatarProps } from '@chakra-ui/react'\nimport { IconProps, AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetsIconsProps = {\n  assetIds: AssetId[]\n} & IconProps\n\nexport const AssetsIcons: React.FC<AssetsIconsProps> = ({ assetIds, showTooltip, ...props }) => {\n  return (\n    <HStack\n      spacing={0}\n    >\n      {\n        assetIds.map( (assetId: AssetId, index) => (\n          <AssetProvider key={`asset_${index}`} assetId={assetId}>\n            <AssetProvider.Icon {...props} ml={index ? -1 : 0} showTooltip={showTooltip} />\n          </AssetProvider>\n        ))\n      }\n    </HStack>\n  )\n}","import { Box } from '@chakra-ui/react'\nimport { useEffect, useMemo } from 'react'\nimport { Graph } from 'components/Graph/Graph'\nimport type { AssetId, HistoryTimeframe } from 'constants/types'\nimport { abbreviateNumber, calculatePercentChange } from 'helpers/'\nimport { useBalanceChartData } from 'hooks/useBalanceChartData/useBalanceChartData'\n\ntype BalanceChartArgs = {\n  color?: string\n  accountId?: string\n  assetIds: AssetId[]\n  strategies?: string[]\n  percentChange: number\n  isRainbowChart: boolean\n  timeframe: HistoryTimeframe\n  setPercentChange: (percentChange: number) => void\n  margins?: { top: number; right: number; bottom: number; left: number }\n}\n\nexport const BalanceChart: React.FC<BalanceChartArgs> = ({\n  assetIds,\n  accountId,\n  timeframe,\n  strategies,\n  percentChange,\n  isRainbowChart,\n  setPercentChange,\n  color = 'chart.stroke',\n  margins = { top: 0, right: 0, bottom: 0, left: 0 }\n}) => {\n  const { assets, balanceChartData, balanceChartDataLoading } = useBalanceChartData({\n    assetIds,\n    accountId,\n    timeframe,\n    strategies\n  })\n\n  const { total } = balanceChartData\n\n  useEffect(() => setPercentChange(calculatePercentChange(total)), [total, setPercentChange])\n\n  // const color = useMemo(() => {\n  //   const defaultColor = 'chart.stroke'\n  //   if (assets?.length === 1){\n  //     return assets[0]?.color || defaultColor\n  //   }\n  //   return defaultColor\n  // }, [assets])\n\n  const formatFn = (n: any) => `$${abbreviateNumber(n)}`\n\n  return (\n    <Box width={'full'} p={0} height={'350px'}>\n      <Graph\n        color={color}\n        margins={margins}\n        formatFn={formatFn}\n        data={balanceChartData}\n        isRainbowChart={isRainbowChart}\n        loading={balanceChartDataLoading}\n        isLoaded={!balanceChartDataLoading}\n      />\n    </Box>\n  )\n}\n","import { Heading, Flex, Box, FlexProps, BoxProps, ThemingProps } from '@chakra-ui/react'\n\nexport type CardProps = BoxProps & ThemingProps \n\nconst HeadingTitle = (props: CardProps) => {\n  const { children, ...rest } = props\n  return (\n    <Heading as={'h3'} size={'md'} mb={6} {...rest}>{children}</Heading>\n  )\n}\n\nexport const Card = (props: CardProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Box\n      width={'100%'}\n      position={'relative'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const CardFlex = (props: CardProps & FlexProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Flex\n      width={'100%'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n\nexport const Dark = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardDark'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Light = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardLight'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Outline = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardOutline'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nCard.Dark = Dark\nCard.Light = Light\nCard.Flex = CardFlex\nCard.Outline = Outline\nCard.Heading = HeadingTitle","import { useCallback } from 'react'\nimport { abbreviateNumber } from 'helpers/'\nimport { useTranslate } from 'react-polyglot'\nimport type { AssetId } from 'constants/types'\nimport { useTheme, Box } from '@chakra-ui/react'\nimport { DonutChart } from 'components/DonutChart/DonutChart'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport type { DonutChartData } from 'components/DonutChart/DonutChart'\nimport { useCompositionChartData, Compositions, UseCompositionChartDataReturn } from 'hooks/useCompositionChartData/useCompositionChartData'\n\ntype CompositionChartArgs = {\n  type: keyof Compositions\n  assetIds: AssetId[],\n  strategies?: string[]\n}\n\nexport const CompositionChart: React.FC<CompositionChartArgs> = ({ assetIds, strategies: enabledStrategies, type }) => {\n  const theme = useTheme()\n  const translate = useTranslate()\n  const { protocolToken } = usePortfolioProvider()\n\n  const {\n    compositions,\n    colors,\n  }: UseCompositionChartDataReturn = useCompositionChartData({ assetIds, strategies: enabledStrategies })\n\n  const getSliceData = useCallback((selectedSlice: DonutChartData) => {\n    switch (type){\n      case 'assets':\n        const totalFunds = compositions[type].reduce( (total: number, asset: DonutChartData) => total += asset.value, 0)\n        const formatFn = (n: any) => `$${abbreviateNumber(n)}`\n        const asset = selectedSlice?.extraData?.asset\n        const icon = asset?.icon || protocolToken?.icon\n        const label = asset?.name || translate('dashboard.portfolio.totalChart')\n        const value = selectedSlice ? formatFn(selectedSlice.value) : formatFn(totalFunds)\n\n        if (selectedSlice && !asset) return null\n\n        return (\n          <>\n            {\n              icon && (\n                <image\n                  y={'35%'}\n                  x={'46.5%'}\n                  href={icon}\n                  height={\"34\"}\n                  width={\"34\"}\n                  textAnchor={\"middle\"}\n                />\n              )\n            }\n            <text\n              x={'50%'}\n              y={'54%'}\n              fill={\"white\"}\n              fontSize={26}\n              fontWeight={600}\n              textAnchor={\"middle\"}\n              pointerEvents={\"none\"}\n            >\n              {value}\n            </text>\n            <text\n              x={'50%'}\n              y={'61%'}\n              fontSize={14}\n              fontWeight={400}\n              textAnchor={\"middle\"}\n              pointerEvents={\"none\"}\n              fill={theme.colors.cta}\n            >\n              {label}\n            </text>\n          </>\n        )\n      default:\n      break;\n    }\n  }, [protocolToken, compositions, theme, translate, type])\n\n  // console.log('compositions', compositions)\n\n  return (\n    <Box\n      height={350}\n      width={'100%'}\n    >\n      {\n        compositions && compositions[type] && compositions[type].length ? (\n          <DonutChart\n            colors={colors[type]}\n            data={compositions[type]}\n            getSliceData={getSliceData}\n          />\n        ) : (\n          <DonutChart\n            colors={{\n              placeholder1:'#4c515d',\n              placeholder2:'#2a3243',\n              placeholder3:'#727680'\n            }}\n            data={[\n              {\n                value:40,\n                label:'placeholder1'\n              },\n              {\n                value:60,\n                label:'placeholder2'\n              },\n              {\n                value:30,\n                label:'placeholder3'\n              }\n            ]}\n          />\n        )\n      }\n    </Box>\n  )\n}","import { Card } from 'components/Card/Card'\nimport { useNavigate } from 'react-router-dom'\nimport useLocalForge from 'hooks/useLocalForge'\nimport { Amount } from 'components/Amount/Amount'\nimport { strategies } from 'constants/strategies'\nimport { useThemeProvider } from 'contexts/ThemeProvider'\nimport { VaultCard } from 'components/VaultCard/VaultCard'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport { Scrollable } from 'components/Scrollable/Scrollable'\nimport { VAULTS_MIN_TVL, PROTOCOL_TOKEN } from 'constants/vars'\nimport { AssetsIcons } from 'components/AssetsIcons/AssetsIcons'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { BalanceChart } from 'components/BalanceChart/BalanceChart'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport React, { useRef, useState, useMemo, useCallback } from 'react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { JoinCommunity } from 'components/JoinCommunity/JoinCommunity'\nimport { StrategyLabel } from 'components/StrategyLabel/StrategyLabel'\nimport type { DonutChartData } from 'components/DonutChart/DonutChart'\n// import { ProductUpdates } from 'components/ProductUpdates/ProductUpdates'\nimport { TransactionList } from 'components/TransactionList/TransactionList'\nimport { CompositionChart } from 'components/CompositionChart/CompositionChart'\nimport { TimeframeSelector } from 'components/TimeframeSelector/TimeframeSelector'\nimport { TransactionButton } from 'components/TransactionButton/TransactionButton'\nimport { VaultRewardOverview } from 'components/VaultRewardOverview/VaultRewardOverview'\nimport { AssetId, BigNumber, Asset, HistoryTimeframe, VaultPosition } from 'constants/types'\n// import { StrategyAssetsCarousel } from 'components/StrategyAssetsCarousel/StrategyAssetsCarousel'\nimport { BNify, getRoutePath, isEmpty, openWindow, formatDate, getLegacyDashboardUrl } from 'helpers/'\nimport { useCompositionChartData, UseCompositionChartDataReturn } from 'hooks/useCompositionChartData/useCompositionChartData'\nimport { ContainerProps, Box, Text, Skeleton, SkeletonText, SimpleGrid, Stack, VStack, HStack, Stat, StatArrow, Heading, Button, Center } from '@chakra-ui/react'\n\nexport const Dashboard: React.FC<ContainerProps> = ({ children, ...rest }) => {\n  const [ ref, dimensions ] = useBoundingRect()\n  const { screenSize, isMobile } = useThemeProvider()\n  const [ percentChange, setPercentChange ] = useState(0)\n  const [ timeframe, setTimeframe ] = useState<HistoryTimeframe>(HistoryTimeframe.YEAR)\n  const [ selectedStrategies, setSelectedStrategies ] = useLocalForge('selectedStrategies', Object.keys(strategies))\n\n  const navigate = useNavigate()\n  const { account, walletInitialized } = useWalletProvider()\n  const { stakingData, isVaultsPositionsLoaded, isPortfolioLoaded, vaultsPositions, gaugesRewards, vaultsRewards, selectors: { selectAssetById, selectAssetsByIds, selectVaultsAssetsByType, selectVaultsByType } } = usePortfolioProvider()\n\n  const enabledStrategies = Object.keys(strategies).filter( strategy => strategies[strategy].visible )\n\n  const accountAndPortfolioLoaded = useMemo(() => {\n    return walletInitialized && isPortfolioLoaded && (!account || isVaultsPositionsLoaded)\n  }, [walletInitialized, account, isPortfolioLoaded, isVaultsPositionsLoaded])\n\n  const stakedIdleVault = useMemo(() => {\n    return selectVaultsByType && selectVaultsByType('staking')?.[0]\n  }, [selectVaultsByType])\n\n  const assetIds = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    const assetIds = Object.keys(vaultsPositions)\n    const assets = selectAssetsByIds(assetIds)\n    return assets.filter( (asset: Asset) => !selectedStrategies || !asset.type || (selectedStrategies.includes(asset.type) && enabledStrategies.includes(asset.type)) ).map( (asset: Asset) => asset.id )\n  }, [vaultsPositions, selectedStrategies, enabledStrategies, selectAssetsByIds])\n\n  const totalDeposited = useMemo(() => {\n    return Object.keys(vaultsPositions).filter( assetId => assetIds.includes(assetId) ).map( assetId => vaultsPositions[assetId] ).reduce( (amount: BigNumber, vaultPosition: VaultPosition) => {\n      return amount.plus(vaultPosition.usd.deposited)\n    }, BNify(0))\n  }, [assetIds, vaultsPositions])\n\n  const totalFunds = useMemo(() => {\n    return Object.keys(vaultsPositions).filter( assetId => assetIds.includes(assetId) ).map( assetId => vaultsPositions[assetId] ).reduce( (amount: BigNumber, vaultPosition: VaultPosition) => {\n      return amount.plus(vaultPosition.usd.redeemable)\n    }, BNify(0))\n  }, [assetIds, vaultsPositions])\n\n  // console.log('totalFunds', vaultsPositions, totalFunds.toString())\n\n  const earningsPercentage = useMemo(() => {\n    return totalFunds.div(totalDeposited).minus(1).times(100)\n  }, [totalDeposited, totalFunds])\n\n  const userHasFunds = useMemo(() => {\n    return account && isVaultsPositionsLoaded && totalFunds.gt(0)\n  }, [account, isVaultsPositionsLoaded, totalFunds])\n\n  const { compositions }: UseCompositionChartDataReturn = useCompositionChartData({ assetIds: Object.keys(vaultsPositions), strategies: enabledStrategies })\n\n  const toggleStrategy = useCallback((strategy: string) => {\n    if (!selectedStrategies.includes(strategy)){\n      setSelectedStrategies([\n        ...selectedStrategies,\n        strategy\n      ])\n    // Remove strategy\n    } else {\n      setSelectedStrategies(selectedStrategies.filter( (s: string) => s !== strategy ))\n    }\n  }, [selectedStrategies, setSelectedStrategies])\n\n  const strategiesOverview = useMemo(() => {\n    if (!selectVaultsAssetsByType) return null\n    return (\n      <SimpleGrid\n        mt={6}\n        spacing={6}\n        width={'100%'}\n        columns={[1, 3]}\n      >\n        {\n          compositions.strategies.filter( (strategyComposition: DonutChartData) => enabledStrategies.includes(strategyComposition.extraData.strategy.type) ).map( (strategyComposition: DonutChartData, index: number) => {\n            const strategy = strategyComposition.extraData.strategy\n            const strategyPath = getRoutePath('earn', [strategy.route])\n            const avgRealizedApy = strategyComposition.extraData.avgRealizedApy\n            const strategyAssets = selectVaultsAssetsByType(strategy.type).filter( (asset: Asset) => asset.tvlUsd?.gt(VAULTS_MIN_TVL) )\n            const strategyPositions = userHasFunds ? Object.keys(vaultsPositions).filter( (assetId: AssetId) => {\n              const asset = selectAssetById(assetId)\n              return asset?.type === strategy.type\n            }) : []\n\n            const CardComponent = strategyPositions.length>0 ? Card : Card.Dark\n\n            return (\n              <CardComponent\n                py={4}\n                px={6}\n                key={`strategy_${index}`}\n              >\n                <VStack\n                  spacing={4}\n                  width={'100%'}\n                >\n                  <HStack\n                    pb={4}\n                    width={'100%'}\n                    borderBottom={'1px solid'}\n                    borderColor={'divider'}\n                    justifyContent={'space-between'}\n                  >\n                    <StrategyLabel strategy={strategy.type} fontSize={'h3'} />\n                    <Translation component={Button} translation={strategyComposition.value>0 ? 'common.manage' : `common.enter`} onClick={() => navigate(`${strategyPath}`)} variant={'ctaPrimary'} py={2} height={'auto'} />\n                  </HStack>\n                  {\n                    strategyPositions.length>0 ? (\n                      <HStack\n                        width={'100%'}\n                        justifyContent={'space-between'}\n                      >\n                        <HStack\n                          spacing={2}\n                          alignItems={'center'}\n                        >\n                          <Translation translation={'defi.balance'} component={Text} textStyle={'captionSmall'} />\n                          <SkeletonText noOfLines={2} isLoaded={!!isVaultsPositionsLoaded}>\n                            {\n                              strategyComposition.value>0 ? (\n                                <Amount.Usd value={strategyComposition.value} textStyle={['ctaStatic', 'h3']} />\n                              ) : (\n                                <Translation component={Text} translation={`common.noDeposits`} textStyle={['ctaStatic', 'h3']} />\n                              )\n                            }\n                          </SkeletonText>\n                        </HStack>\n                        <HStack\n                          spacing={2}\n                          alignItems={'center'}\n                        >\n                          <Translation translation={'defi.avgApy'} component={Text} textStyle={'captionSmall'} />\n                          <SkeletonText noOfLines={2} minWidth={'50px'} isLoaded={!!isVaultsPositionsLoaded}>\n                            {\n                              strategyComposition.value>0 ? (\n                                <Amount.Percentage value={avgRealizedApy} textStyle={['ctaStatic', 'h3']} />\n                              ) : (\n                                <Text textStyle={['ctaStatic', 'h3']}>-</Text>\n                              )\n                            }\n                          </SkeletonText>\n                        </HStack>\n                      </HStack>\n                    ) : (\n                      <HStack\n                        width={'100%'}\n                      >\n                        <Translation translation={'dashboard.strategies.bestPerforming'} component={Text} textStyle={'captionSmall'} />\n                      </HStack>\n                    )\n                  }\n                  <Scrollable\n                    minH={190}\n                    maxH={190}\n                  >\n                    <VStack\n                      spacing={2}\n                      width={'100%'}\n                    >\n                      {\n                        !isPortfolioLoaded || (account && !isVaultsPositionsLoaded) ? (\n                          <>\n                            <Skeleton width={'100%'} height={10} />\n                            <Skeleton width={'100%'} height={10} />\n                            <Skeleton width={'100%'} height={10} />\n                          </>\n                        ) : strategyPositions.length>0 ?\n                          strategyPositions.sort((a: AssetId, b: AssetId) => vaultsPositions[a].usd?.redeemable && vaultsPositions[b].usd?.redeemable ? (vaultsPositions[a].usd.redeemable.gt(vaultsPositions[b].usd.redeemable.toString()) ? -1 : 1) : 1 ).map( (assetId: AssetId) => (\n                            <VaultCard.Inline\n                              bg={'card.bgLight'}\n                              key={`vault_${assetId}`}\n                              onClick={() => navigate(`${strategyPath}/${assetId}`)}\n                              assetId={assetId}\n                              fields={[\n                                {\n                                  label:'defi.balance',\n                                  field:'balanceUsd'\n                                },\n                                {\n                                  label: isMobile ? 'defi.apy' : 'defi.realizedApy',\n                                  field:'realizedApy'\n                                }\n                              ]}\n                            />\n                          ))\n                        : strategyAssets.sort((a: Asset, b: Asset) => a.apy && b.apy ? (a.apy.gt(b.apy.toString()) ? -1 : 1) : 1 ).slice(0, 4).map( (asset: Asset) => (\n                          <VaultCard.Inline\n                            key={`vault_${asset.id}`}\n                            onClick={() => navigate(`${strategyPath}/${asset.id}`)}\n                            assetId={`${asset.id}`}\n                            fields={[\n                              {\n                                label:'defi.tvl',\n                                field:'tvl'\n                              },\n                              {\n                                label:'defi.apy',\n                                field:'apy'\n                              }\n                            ]}\n                          />\n                        ))\n                      }\n                    </VStack>\n                  </Scrollable>\n                </VStack>\n              </CardComponent>\n            )\n          })\n        }\n      </SimpleGrid>\n    )\n  }, [userHasFunds, enabledStrategies, account, isMobile, isPortfolioLoaded, selectAssetById, navigate, compositions, vaultsPositions, isVaultsPositionsLoaded, selectVaultsAssetsByType])\n  \n  /*\n  const products = useMemo(() => {\n    return (\n      <VStack\n        spacing={6}\n        width={'100%'}\n        alignItems={'flex-start'}\n      >\n        <Translation mb={13} translation={'defi.strategies'} component={Heading} as={'h2'} size={'3xl'} />\n        <VStack\n          spacing={4}\n          width={'100%'}\n        >\n          {\n            Object.keys(strategies).map( (strategy: string) => {\n              const strategyProps = strategies[strategy]\n              const strategyPath = getRoutePath('earn', [strategyProps.route])\n              return (\n                <Card.Dark\n                  py={4}\n                  px={6}\n                  key={`strategy_${strategy}`}\n                >\n                  <Flex\n                    direction={'row'}\n                    alignItems={'center'}\n                    justifyContent={'space-between'}\n                  >\n                    <Flex\n                      width={'180px'}\n                    >\n                      <StrategyLabel strategy={strategy} textStyle={['ctaStatic', 'h3']} />\n                    </Flex>\n                    <StrategyAssetsCarousel strategy={strategy} />\n                    <Flex\n                      width={'170px'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Translation component={Button} translation={`common.deposit`} onClick={() => navigate(`${strategyPath}`)} variant={'ctaPrimary'} px={10} py={2} />\n                    </Flex>\n                  </Flex>\n                </Card.Dark>\n              )\n            })\n          }\n        </VStack>\n      </VStack>\n    )\n  }, [navigate])\n  */\n\n  const vaultsRewardsOverview = useMemo(() => {\n    if (!accountAndPortfolioLoaded){\n      return (\n        <Skeleton width={'100%'} height={'100px'} />\n      )\n    }\n\n    const strategyProps = strategies.BY\n    const strategyPath = getRoutePath('earn', [strategyProps.route as string])\n\n    if (isEmpty(vaultsRewards)) {\n      return (\n        <Card\n          width={'100%'}\n        >\n          <Stack\n            spacing={[10, 0]}\n            alignItems={'center'}\n            direction={['column', 'row']}\n            justifyContent={'space-between'}\n          >\n            <Translation translation={'dashboard.rewards.vaults.empty.body'} component={Text} textAlign={['center', 'left']} />\n            <Translation component={Button} translation={`dashboard.rewards.vaults.empty.cta`} onClick={() => navigate(`${strategyPath}`)} variant={['ctaPrimaryOutline']} px={10} py={2} />\n          </Stack>\n        </Card>\n      )\n    }\n\n    // console.log('vaultsRewardsOverview', vaultsRewards)\n    \n    return (\n      <VStack\n        spacing={6}\n        width={'full'}\n        alignItems={'flex-start'}\n      >\n        <SimpleGrid\n          spacing={6}\n          width={'100%'}\n          columns={[1, 3]}\n        >\n          {\n            Object.keys(vaultsRewards).map( (assetId: AssetId) =>\n              <VaultRewardOverview\n                key={`reward_${assetId}`}\n                assetId={assetId}\n                {...vaultsRewards[assetId]}\n              />\n            )\n          }\n        </SimpleGrid>\n        <Translation component={Button} translation={`dashboard.rewards.vaults.cta`} width={['full', 'auto']} onClick={() => navigate(`${strategyPath}`)} variant={['ctaPrimaryOutline']} px={10} py={2} />\n      </VStack>\n    )\n    \n  }, [vaultsRewards, navigate, accountAndPortfolioLoaded])\n\n  const gaugeRewards = useMemo(() => {\n    if (!accountAndPortfolioLoaded){\n      return (\n        <Skeleton width={'100%'} height={'100px'} />\n      )\n    }\n\n    const strategyProps = strategies.AA\n    const strategyPath = getRoutePath('earn', [strategyProps.route as string])\n\n    if (isEmpty(gaugesRewards)) {\n      return (\n        <Card\n          width={'100%'}\n        >\n          <Stack\n            spacing={[10, 0]}\n            alignItems={'center'}\n            direction={['column', 'row']}\n            justifyContent={'space-between'}\n          >\n            <Translation translation={'dashboard.rewards.gauges.empty.body'} component={Text} textAlign={['center', 'left']} />\n            <Translation component={Button} translation={`dashboard.rewards.gauges.empty.cta`} onClick={() => navigate(`${strategyPath}`)} variant={['ctaPrimaryOutline']} px={10} py={2} />\n          </Stack>\n        </Card>\n      )\n    }\n    \n    return (\n      <VStack\n        spacing={6}\n        width={'full'}\n        alignItems={'flex-start'}\n      >\n        <VStack\n          spacing={4}\n          width={'100%'}\n        >\n          {\n            Object.keys(gaugesRewards).map( rewardId => {\n              const rewardData = gaugesRewards[rewardId]\n              return (\n                <AssetProvider\n                  wrapFlex={false}\n                  assetId={rewardId}\n                  key={`reward_${rewardId}`}\n                >\n                  <Card\n                    p={6}\n                    px={8}\n                    width={'100%'}\n                  >\n                    <Stack\n                      spacing={0}\n                      width={'100%'}\n                      alignItems={'center'}\n                      direction={['column', 'row']}\n                      justifyContent={'space-between'}\n                    >\n                      <SimpleGrid\n                        width={'100%'}\n                        spacing={[4, 0]}\n                        columns={[2, 5]}\n                      >\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.asset'} textStyle={'captionSmall'} />\n                          <AssetProvider.GeneralData size={'xs'} field={'asset'} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.gauges'} textStyle={'captionSmall'} />\n                          <AssetsIcons size={'xs'} assetIds={rewardData.gauges} showTooltip={true} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.apy'} textStyle={'captionSmall'} />\n                          <Amount.Percentage textStyle={'tableCell'} value={BNify(rewardData.apr).gt(0) ? rewardData.apr : null} />\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.dailyDistribution'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                            width={'100%'}\n                          >\n                            <Amount textStyle={'tableCell'} value={rewardData.rate} decimals={4} />\n                            <AssetProvider.Symbol textStyle={'tableCell'} />\n                          </HStack>\n                        </VStack>\n\n                        <VStack\n                          spacing={2}\n                          alignItems={'flex-start'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                            width={'100%'}\n                          >\n                            <Amount textStyle={'tableCell'} value={rewardData.balance} decimals={BNify(rewardData.balance).lt(1) ? 4 : 2} />\n                            <AssetProvider.Symbol textStyle={'tableCell'} />\n                          </HStack>\n                        </VStack>\n                      </SimpleGrid>\n                      {/*<Translation component={Button} translation={`defi.claim`} onClick={() => {}} variant={['ctaPrimaryOutline']} disabled={rewardData.balance.lte(0)} px={10} py={2} />*/}\n                    </Stack>\n                  </Card>\n                </AssetProvider>\n              )\n            })\n          }\n        </VStack>\n        <Translation component={Button} translation={`dashboard.rewards.gauges.cta`} width={['full', 'auto']} onClick={() => navigate(`${strategyPath}`)} variant={['ctaPrimaryOutline']} px={10} py={2} />\n      </VStack>\n    )\n    \n  }, [navigate, gaugesRewards, accountAndPortfolioLoaded])\n\n  const stakingRewards = useMemo(() => {\n    if (!accountAndPortfolioLoaded || !stakedIdleVault || !stakingData){\n      return (\n        <Skeleton width={'100%'} height={'100px'} />\n      )\n    }\n\n    const contractSendMethod = stakedIdleVault.getClaimRewardsContractSendMethod()\n\n    const stakingUrl = getLegacyDashboardUrl('stake')\n\n    return stakingData.stkIDLE.balance.lte(0) ? (\n      <Card\n        width={'100%'}\n      >\n        <Stack\n          spacing={[10, 0]}\n          alignItems={'center'}\n          direction={['column', 'row']}\n          justifyContent={'space-between'}\n        >\n          <Translation translation={'dashboard.rewards.staking.empty.body'} component={Text} textAlign={['center', 'left']} />\n          <Translation component={Button} translation={`dashboard.rewards.staking.empty.cta`} onClick={() => { openWindow(stakingUrl) }} variant={['ctaPrimaryOutline']} px={10} py={2} />\n        </Stack>\n      </Card>\n    ) : (\n      <VStack\n        spacing={6}\n        width={'full'}\n        alignItems={'flex-start'}\n      >\n        <Card\n          p={6}\n          px={8}\n          width={'100%'}\n        >\n          <Stack\n            width={'100%'}\n            spacing={[4, 14]}\n            alignItems={'center'}\n            direction={['column', 'row']}\n            justifyContent={'space-between'}\n          >\n            <HStack\n              width={'100%'}\n              spacing={[0, 6]}\n              flexWrap={['wrap', 'nowrap']}\n              justifyContent={['flex-start', 'space-between']}\n            >\n              <VStack\n                pb={[2, 0]}\n                spacing={[1, 2]}\n                width={['50%', 'auto']}\n                alignItems={'flex-start'}\n                justifyContent={'flex-start'}\n              >\n                <Translation component={Text} translation={'staking.totalSupply'} textStyle={'captionSmall'} />\n                <Amount value={stakingData.stkIDLE.totalSupply} suffix={` ${stakedIdleVault.stkIdleConfig.name}`} textStyle={'tableCell'} />\n              </VStack>\n\n              <VStack\n                pb={[2, 0]}\n                spacing={[1, 2]}\n                width={['50%', 'auto']}\n                alignItems={'flex-start'}\n                justifyContent={'flex-start'}\n              >\n                <Translation component={Text} translation={'defi.balance'} textStyle={'captionSmall'} />\n                <Amount value={stakingData.stkIDLE.balance} suffix={` ${stakedIdleVault.stkIdleConfig.name}`} textStyle={'tableCell'} />\n              </VStack>\n\n              <VStack\n                pb={[2, 0]}\n                spacing={[1, 2]}\n                width={['50%', 'auto']}\n                alignItems={'flex-start'}\n                justifyContent={'flex-start'}\n              >\n                <Translation component={Text} translation={'defi.share'} textStyle={'captionSmall'} />\n                <Amount.Percentage value={stakingData.stkIDLE.share} textStyle={'tableCell'} />\n              </VStack>\n\n              <VStack\n                pb={[2, 0]}\n                spacing={[1, 2]}\n                width={['50%', 'auto']}\n                alignItems={'flex-start'}\n                justifyContent={'flex-start'}\n              >\n                <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n                <Amount value={stakingData.IDLE.claimable} suffix={` ${PROTOCOL_TOKEN}`} textStyle={'tableCell'} />\n              </VStack>\n\n              <VStack\n                pb={[2, 0]}\n                spacing={[1, 2]}\n                width={['100%', 'auto']}\n                alignItems={'flex-start'}\n                justifyContent={'flex-start'}\n              >\n                <Translation component={Text} translation={'staking.lockEnd'} textStyle={'captionSmall'} />\n                <Text textStyle={'tableCell'}>{formatDate(stakingData.lockEnd)}</Text>\n              </VStack>\n            </HStack>\n            <TransactionButton text={'defi.claim'} vaultId={stakedIdleVault.id} assetId={stakedIdleVault.id} contractSendMethod={contractSendMethod} actionType={'claim'} amount={stakingData.IDLE.claimable.toString()} width={['100%', '150px']} disabled={stakingData.IDLE.claimable.lte(0)} />\n          </Stack>\n        </Card>\n        <Translation component={Button} translation={`dashboard.rewards.staking.cta`} width={['full', 'auto']} onClick={() => { openWindow(stakingUrl) }} variant={['ctaPrimaryOutline']} px={10} py={2} />\n      </VStack>\n    )\n  }, [stakedIdleVault, stakingData, accountAndPortfolioLoaded])\n\n  const strategiesRewards = useMemo(() => {\n    return (\n      <VStack\n        width={'100%'}\n        spacing={[10, 20]}\n      >\n        <VStack\n          spacing={6}\n          width={'100%'}\n          id={'gauges-rewards'}\n          alignItems={'flex-start'}\n        >\n          <StrategyLabel strategy={'AA'} customText={'dashboard.rewards.gauges.title'}  textStyle={'heading'} fontSize={'h3'} />\n          {/*<Translation translation={'dashboard.rewards.gauges.title'} component={Text} textStyle={'heading'} fontSize={'h3'} />*/}\n          {gaugeRewards}\n        </VStack>\n\n        <VStack\n          spacing={6}\n          width={'100%'}\n          id={'best-yield-rewards'}\n          alignItems={'flex-start'}\n        >\n          <StrategyLabel strategy={'BY'} customText={'dashboard.rewards.vaults.title'}  textStyle={'heading'} fontSize={'h3'} />\n          {vaultsRewardsOverview}\n        </VStack>\n\n        <VStack\n          spacing={6}\n          width={'100%'}\n          id={'staking-rewards'}\n          alignItems={'flex-start'}\n        >\n          <Translation translation={'dashboard.rewards.staking.title'} component={Text} textStyle={'heading'} fontSize={'h3'} />\n          {stakingRewards}\n        </VStack>\n      </VStack>\n    )\n  }, [vaultsRewardsOverview, gaugeRewards, stakingRewards])\n\n  // const leftSideContent = useMemo(() => {\n  //   if (!accountAndPortfolioLoaded) {\n  //     return (\n  //       <VStack\n  //         spacing={6}\n  //         width={'100%'}\n  //         alignItems={'flex-start'}\n  //       >\n  //         <SkeletonText\n  //           noOfLines={2}\n  //           minW={'150px'}\n  //         >\n  //         </SkeletonText>\n  //         <Skeleton width={'100%'} height='20px' />\n  //         <Skeleton width={'100%'} height='20px' />\n  //         <Skeleton width={'100%'} height='20px' />\n  //       </VStack>\n  //     )\n  //   }\n\n  //   return strategiesRewards\n  // }, [accountAndPortfolioLoaded, strategiesRewards])\n\n  const strategiesFilters = useMemo(() => {\n    if (!account || screenSize==='sm' || !userHasFunds) return null\n    return (\n      <Stack\n        py={4}\n        flex={1}\n        spacing={3}\n        direction={'row'}\n        borderBottom={'1px solid'}\n        borderColor={'divider'}\n      >\n        {\n          Object.keys(strategies).filter( strategy => strategies[strategy].visible ).map( (strategy: string) => {\n            return (\n              <Button\n                minW={'180px'}\n                variant={'filter'}\n                key={`strategy_${strategy}`}\n                onClick={() => toggleStrategy(strategy)}\n                aria-selected={selectedStrategies.includes(strategy)}\n              >\n                <StrategyLabel\n                  color={'primary'}\n                  strategy={strategy}\n                />\n              </Button>\n            )\n          })\n        }\n      </Stack>\n    )\n  }, [account, userHasFunds, screenSize, toggleStrategy, selectedStrategies])\n\n  const chartColor = useMemo(() => {\n    if (selectedStrategies.length===1){\n      return strategies[selectedStrategies[0]].color\n    }\n    return undefined\n  }, [selectedStrategies])\n\n  return (\n    <Box\n      mt={12}\n      width={'100%'}\n    >\n      <Stack\n        mb={10}\n        spacing={10}\n        width={'100%'}\n        alignItems={['flex-start','center']}\n        justifyContent={'flex-start'}\n        direction={['column', 'row']}\n      >\n        <Translation translation={'navBar.dashboard'} component={Heading} as={'h2'} size={'3xl'} />\n        {strategiesFilters}\n      </Stack>\n      <Stack\n        flex={1}\n        spacing={6}\n        width={'100%'}\n        direction={['column', 'row']}\n      >\n        <VStack\n          flex={1}\n          spacing={6}\n          alignItems={'flex-start'}\n        >\n          <Translation display={['none', 'block']} translation={'dashboard.portfolio.performance'} component={Text} textStyle={'heading'} fontSize={'h3'} />\n          <Card.Flex\n            p={0}\n            overflow={'hidden'}\n            direction={'column'}\n            minH={['auto', 460]}\n            position={'relative'}\n            layerStyle={'cardDark'}\n            justifyContent={'space-between'}\n          >\n            {\n              !userHasFunds && (\n                <Center\n                  layerStyle={'overlay'}\n                  bg={'rgba(0, 0, 0, 0.4)'}\n                >\n                  <Translation translation={account ? 'dashboard.performanceChart.empty' : 'dashboard.performanceChart.emptyNotConnected'} textAlign={'center'} component={Text} py={1} px={3} bg={'rgba(0, 0, 0, 0.2)'} borderRadius={8} />\n                </Center>\n              )\n            }\n            <Stack\n              pt={[6, 8]}\n              px={[6, 8]}\n              pb={[4, 0]}\n              width={'100%'}\n              alignItems={'flex-start'}\n              direction={['column', 'row']}\n              justifyContent={['center', 'space-between']}\n            >\n              {\n                userHasFunds && (\n                  <VStack\n                    width={'100%'}\n                    spacing={[5, 1]}\n                    alignItems={['center', 'flex-start']}\n                  >\n                    <SkeletonText noOfLines={2} isLoaded={!!isVaultsPositionsLoaded}>\n                      <Translation display={['none', 'block']} translation={'dashboard.portfolio.totalChart'} component={Text} textStyle={'tableCell'} fontWeight={400} color={'cta'} />\n                      <HStack\n                        spacing={[2, 4]}\n                        alignItems={'baseline'}\n                      >\n                        <Amount.Usd value={totalFunds} textStyle={'heading'} fontSize={'2xl'} />\n                        {\n                          totalFunds.gt(0) && (\n                            <Stat>\n                              <HStack spacing={2}>\n                                <Amount.Percentage value={earningsPercentage} textStyle={'captionSmall'} />\n                                <StatArrow type={earningsPercentage.gt(0) ? 'increase' : 'decrease'} />\n                              </HStack>\n                            </Stat>\n                          )\n                        }\n                      </HStack>\n                    </SkeletonText>\n                  </VStack>\n                )\n              }\n              {\n                userHasFunds && <TimeframeSelector timeframe={timeframe} setTimeframe={setTimeframe} width={['100%', 'auto']} justifyContent={['center', 'initial']} />\n              }\n            </Stack>\n            <BalanceChart\n              percentChange={0}\n              color={chartColor}\n              assetIds={assetIds}\n              timeframe={timeframe}\n              isRainbowChart={false}\n              strategies={selectedStrategies}\n              setPercentChange={setPercentChange}\n              margins={{ top: 10, right: 0, bottom: 65, left: 0 }}\n            />\n          </Card.Flex>\n        </VStack>\n\n        <VStack\n          spacing={6}\n          width={['100%', '500px']}\n          alignItems={'flex-start'}\n        >\n          <Translation translation={'dashboard.portfolio.composition'} component={Text} textStyle={'heading'} fontSize={'h3'} />\n          <Card.Dark\n            p={0}\n            flex={1}\n            px={[6, 0]}\n            display={'flex'}\n            alignItems={'center'}\n          >\n            {\n              !userHasFunds && (\n                <Center\n                  layerStyle={'overlay'}\n                  bg={'rgba(0, 0, 0, 0.4)'}\n                >\n                  <Translation translation={account ? 'dashboard.compositionChart.empty' : 'dashboard.compositionChart.emptyNotConnected'} textAlign={'center'} component={Text} py={1} px={3} bg={'rgba(0, 0, 0, 0.2)'} borderRadius={8} />\n                </Center>\n              )\n            }\n            <CompositionChart assetIds={assetIds} strategies={selectedStrategies} type={'assets'} />\n          </Card.Dark>\n        </VStack>\n      </Stack>\n      \n      {strategiesOverview}\n\n      {\n        account && (\n          <Stack\n            spacing={6}\n            mt={[10, 20]}\n            width={'100%'}\n            direction={['column', 'row']}\n          >\n            <VStack\n              flex={1}\n              alignItems={'flex-start'}\n              ref={ref as typeof useRef}\n            >\n              {strategiesRewards}\n            </VStack>\n            <VStack\n              spacing={6}\n              width={['100%', '500px']}\n              alignItems={'flex-start'}\n            >\n              <TransactionList assetIds={assetIds} maxH={[400, Math.max(400, dimensions?.height)]} showTitleOnMobile={true} />\n            </VStack>\n          </Stack>\n        )\n      }\n\n      <JoinCommunity />\n    </Box>\n  )\n}\n","import { Group } from '@visx/group';\nimport React, { useState } from 'react';\nimport { scaleOrdinal } from '@visx/scale'\nimport { ParentSize } from '@visx/responsive'\nimport { animated, useTransition, interpolate } from '@react-spring/web';\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\n\nexport type DonutChartKey = string\nexport type DonutChartData = {\n  label: DonutChartKey\n  value: number\n  extraData?: any\n}\nexport type DonutChartColors = Record<DonutChartKey, string>\n\ntype DonutChartInitialData = {\n  getSliceData?: Function\n  data: DonutChartData[]\n  colors: DonutChartColors\n}\n\nconst defaultMargin = { top: 0, right: 0, bottom: 0, left: 0 };\n\nexport type PieProps = {\n  width: number;\n  height: number;\n  margin?: typeof defaultMargin;\n  animate?: boolean;\n} & DonutChartInitialData\n\nexport function PieChart({\n  data,\n  colors,\n  width,\n  height,\n  margin = defaultMargin,\n  animate = true,\n  getSliceData\n}: PieProps) {\n  const [selectedSlice, setSelectedSlice] = useState<DonutChartData | null>(null);\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const radius = Math.min(innerWidth, innerHeight) / 2;\n  const centerY = innerHeight / 2;\n  const centerX = innerWidth / 2;\n  const donutThickness = 30;\n\n  const keys = data.map( d => d.label )\n  const keysColors = keys.map( key => colors[key] )\n\n  const getColor = scaleOrdinal({\n    domain: keys,\n    range: keysColors,\n  })\n\n  const sliceData = getSliceData && getSliceData(selectedSlice)\n\n  // accessor functions\n  const pieValue = (d: DonutChartData) => d.value;\n\n  return (\n    <svg width={width} height={height}>\n      <rect rx={14} width={width} height={height} fill=\"url('#visx-pie-gradient')\" />\n      {sliceData}\n      <Group top={centerY + margin.top} left={centerX + margin.left}>\n        <Pie\n          padAngle={0}\n          cornerRadius={0}\n          pieValue={pieValue}\n          outerRadius={radius}\n          innerRadius={radius - donutThickness}\n          data={data/*selectedSlice ? data.filter( d => d.label === selectedSlice ) : data*/}\n        >\n          {(pie) => (\n            <AnimatedPie<DonutChartData>\n              {...pie}\n              animate={animate}\n              onMouseOver={({data}) =>\n                setSelectedSlice(data)\n              }\n              getKey={(arc) => arc.data.label}\n              onMouseOut={() => setSelectedSlice(null)}\n              getColor={(arc) => getColor(arc.data.label)}\n            />\n          )}\n        </Pie>\n      </Group>\n    </svg>\n  );\n}\n\n// react-spring transition definitions\ntype AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };\n\nconst fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({\n  // enter from 360° if end angle is > 180°\n  startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n  opacity: 0,\n});\nconst enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({\n  startAngle,\n  endAngle,\n  opacity: 1,\n});\n\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\n  animate?: boolean;\n  getKey: (d: PieArcDatum<Datum>) => string;\n  getColor: (d: PieArcDatum<Datum>) => string;\n  onClickDatum?: (d: PieArcDatum<Datum>) => void;\n  onMouseOver?: (d: PieArcDatum<Datum>) => void;\n  onMouseOut?: (d: PieArcDatum<Datum>) => void;\n  delay?: number;\n};\n\nfunction AnimatedPie<Datum>({\n  animate,\n  arcs,\n  path,\n  getKey,\n  getColor,\n  onMouseOut,\n  onMouseOver,\n  onClickDatum,\n}: AnimatedPieProps<Datum>) {\n  const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(arcs, {\n    from: animate ? fromLeaveTransition : enterUpdateTransition,\n    enter: enterUpdateTransition,\n    update: enterUpdateTransition,\n    leave: animate ? fromLeaveTransition : enterUpdateTransition,\n    keys: getKey,\n  });\n  return transitions((props, arc, { key }) => {\n    // const [centroidX, centroidY] = path.centroid(arc);\n    // const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n\n    return (\n      <g key={Math.random()}>\n        <animated.path\n          // compute interpolated path d attribute from intermediate angle values\n          d={interpolate([props.startAngle, props.endAngle], (startAngle, endAngle) =>\n            path({\n              ...arc,\n              startAngle,\n              endAngle,\n            }),\n          )}\n          fill={getColor(arc)}\n          onClick={() => onClickDatum && onClickDatum(arc)}\n          onMouseOver={() => onMouseOver && onMouseOver(arc)}\n          onMouseOut={() => onMouseOut && onMouseOut(arc)}\n          onTouchStart={() => onClickDatum && onClickDatum(arc)}\n        />\n      </g>\n    )\n  })\n}\n\nexport const DonutChart = ({\n  data,\n  colors,\n  getSliceData\n}: DonutChartInitialData) => {\n  return (\n    <ParentSize debounceTime={10}>\n      { parent => (\n        <PieChart\n          data={data}\n          colors={colors}\n          width={parent.width}\n          height={parent.height}\n          getSliceData={getSliceData}\n        />\n      )}\n    </ParentSize>\n  )\n}","import React from 'react'\nimport { Card } from 'components/Card/Card'\nimport { HiChatAlt2 } from 'react-icons/hi'\nimport { AiOutlineMediumWorkmark } from 'react-icons/ai'\nimport { SiMedium, SiTwitter, SiDiscord } from 'react-icons/si'\nimport { Translation } from 'components/Translation/Translation'\nimport { Stack, SimpleGrid, Button, Text, Link } from '@chakra-ui/react'\n\nexport const JoinCommunity: React.FC = () => {\n  return (\n    <Card.Outline\n      px={5}\n      pb={4}\n      mt={20}\n      pt={[10, 4]}\n    >\n      <Stack\n        spacing={10}\n        width={'100%'}\n        alignItems={'center'}\n        direction={['column', 'row']}\n        justifyContent={'space-between'}\n      >\n        <Translation translation={'footer.joinCommunity'} component={Text} textStyle={'heading'} fontSize={'lg'} />\n        <SimpleGrid\n          flex={1}\n          spacing={4}\n          width={'100%'}\n          columns={[1, 4]}\n        >\n          <Link href={\"https://medium.com/idle-finance\"} isExternal textDecoration={'none !important'}>\n            <Button width={'100%'} height={14} variant={'cta'} leftIcon={<SiMedium size={24} />}><AiOutlineMediumWorkmark size={72} /></Button>\n          </Link>\n          <Link href={\"https://twitter.com/idlefinance\"} isExternal textDecoration={'none !important'}>\n            <Button width={'100%'} height={14} variant={'cta'} leftIcon={<SiTwitter size={24} />}>@idlefinance</Button>\n          </Link>\n          <Link href={\"https://discord.gg/mpySAJp\"} isExternal textDecoration={'none !important'}>\n            <Button width={'100%'} height={14} variant={'cta'} leftIcon={<SiDiscord size={24} />}>IdleDAO Server</Button>\n          </Link>\n          <Link href={\"https://gov.idle.finance/\"} isExternal textDecoration={'none !important'}>\n            <Button width={'100%'} height={14} variant={'cta'} leftIcon={<HiChatAlt2 size={24} />}>Governance Forum</Button>\n          </Link>\n        </SimpleGrid>\n      </Stack>\n    </Card.Outline>\n  )\n}","import React from 'react'\nimport { FlexProps, Flex } from '@chakra-ui/react'\n\ntype ScrollableArgs = {\n  parentRef?: any\n} & FlexProps\n\nexport const Scrollable: React.FC<ScrollableArgs> = ({parentRef, children, ...flexProps}) => {\n  return (\n    <Flex\n      flex={1}\n      width={'100%'}\n      overflowY={'auto'}\n      overflowX={'hidden'}\n      direction={'column'}\n      alignItems={'flex-start'}\n      {...flexProps}\n    >\n      {children}\n    </Flex>\n  )\n}","import React from 'react'\nimport { strategies } from 'constants/strategies'\nimport { Translation } from 'components/Translation/Translation'\nimport { TextProps, BoxProps, Box, Flex, Text, HStack } from '@chakra-ui/react'\n\ntype StrategyLabelArgs = {\n  strategy?: string\n  customText?: string\n} & TextProps\n\nexport const StrategyLabel: React.FC<StrategyLabelArgs> = ({ strategy, customText, ...props }) => {\n  if (!strategy) return null\n  const strategyConfig = strategies[strategy]\n  if (!strategyConfig) return null\n  return (\n    <HStack\n      spacing={2}\n      alignItems={'center'}\n    >\n      <Translation component={Text} translation={customText || strategyConfig?.label} textStyle={'ctaStatic'} {...props} />\n      <Box\n        width={2}\n        height={2}\n        borderRadius={'50%'}\n        bg={strategyConfig.color}\n      />\n    </HStack>\n  )\n}","import React from 'react'\nimport { HistoryTimeframe } from 'constants/types'\nimport { HStack, Text, StackProps } from '@chakra-ui/react'\n\ntype TimeframeSelectorArgs = {\n  timeframe: HistoryTimeframe\n  setTimeframe: Function\n} & StackProps\n\nexport const TimeframeSelector: React.FC<TimeframeSelectorArgs> = ({ timeframe: selectedTimeframe, setTimeframe, ...props }) => {\n  return (\n    <HStack\n      spacing={[6, 10]}\n      {...props}\n    >\n      {\n        Object.values(HistoryTimeframe).map( timeframe => {\n          const selected = timeframe === selectedTimeframe\n          return (\n            <Text\n              textStyle={'cta'}\n              color={'ctaDisabled'}\n              aria-selected={selected}\n              key={`timeframe_${timeframe}`}\n              onClick={() => setTimeframe(timeframe)}\n            >\n            {timeframe.toUpperCase()}\n            </Text>\n          )\n        })\n      }\n    </HStack>\n  )\n}","import './progress.css'\nimport type { AssetId } from 'constants/types'\nimport { ContractSendMethod } from 'web3-eth-contract'\nimport { MdOutlineDone, MdOutlineClose } from 'react-icons/md'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport React, { useRef, useCallback, useState, useMemo, useEffect } from 'react'\nimport { TranslationProps, Translation } from 'components/Translation/Translation'\nimport { TransactionStatus, useTransactionManager } from 'contexts/TransactionManagerProvider'\nimport { useTheme, ButtonProps, Button, Box, Flex, Spinner, Text, TextProps } from '@chakra-ui/react'\n\ntype TransactionButtonProps = {\n  text: string\n  amount?: string\n  assetId: AssetId\n  vaultId: AssetId\n  actionType?: string\n  contractSendMethod: ContractSendMethod\n}\n\nexport const TransactionButtonValue: React.FC<TransactionButtonProps & TextProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  const theme = useTheme()\n  const intervalId = useRef<any>(null)\n  const [ remainingTime, setRemainingTime ] = useState<number | null>(null)\n  const { state: { transaction }, cleanTransaction } = useTransactionManager()\n\n  // const transaction: TransactionStatus = useMemo(() => ({\n  //   hash: null,\n  //   error: null,\n  //   status: 'success',\n  //   amount: null,\n  //   assetId: null,\n  //   vaultId: null,\n  //   receipt: null,\n  //   created: null,\n  //   timestamp: null,\n  //   actionType: null,\n  //   transaction: null,\n  //   lastUpdated: null,\n  //   estimatedTime: null,\n  //   confirmationCount: 0,\n  //   contractSendMethod,\n  // }), [contractSendMethod])\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const transactionStarted = useMemo(() => {\n    return isRightTransaction && transaction.status && ['pending', 'success', 'failed'].includes(transaction.status) && transaction.estimatedTime\n  }, [transaction, isRightTransaction])\n\n  const transitionDuration = useMemo(() => {\n    return transactionStarted && transaction.status === 'pending' ? transaction.estimatedTime : 0.5\n  }, [transactionStarted, transaction])\n\n  const startCountdown = useCallback(() => {\n    // console.log('getRemainingTime', transaction)\n    if (!transaction.timestamp || !transaction.estimatedTime) return null\n    const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n    // console.log('getRemainingTime - targetTimestamp', targetTimestamp, Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000)))\n    const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n\n    setRemainingTime(remainingTime)\n    if (!remainingTime) return\n    // console.log('TransactionButton - startCountdown')\n    intervalId.current = setTimeout(() => {\n      startCountdown()\n    }, 1000)\n  }, [transaction])\n\n  useEffect(() => {\n    if (transaction.status === 'success' || transaction.status === 'failed'){\n      // console.log('Clear Interval', intervalId.current)\n      if (intervalId.current){\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n      // Clean transaction if success or failed\n      if (transaction.status === 'success' || transaction.error?.code !== 4001){\n        setTimeout(() => {\n          cleanTransaction()\n        }, 4000)\n      }\n    } else if (transaction.status === 'pending' && !intervalId.current){\n      startCountdown()\n    }\n  }, [transaction.status, startCountdown, cleanTransaction, transaction.error?.code])\n  \n  const textComponent = useMemo(() => {\n    if (isRightTransaction){\n      switch (transaction?.status){\n        case 'created':\n          return (\n            <Spinner size={'sm'} />\n          )\n        case 'pending':\n          if (!transaction.timestamp || !transaction.estimatedTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          // const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n          // const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n          // Return spinner if long transaction\n          if (!remainingTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          return (\n            <Text textStyle={'ctaStatic'}>{remainingTime}s</Text>\n          )\n        case 'success':\n          return (\n            <Flex\n              {...props}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              <MdOutlineDone size={24} color={theme.colors.green['400']} />\n            </Flex>\n          )\n        case 'failed':\n          if (transaction.error?.code !== 4001){\n            return (\n              <Flex\n                {...props}\n                alignItems={'center'}\n                justifyContent={'center'}\n              >\n                <MdOutlineClose size={24} color={theme.colors.red['400']} />\n              </Flex>\n            )\n          }\n        break\n        default:\n        break\n      }\n    }\n    return (\n      <Translation translation={text} textStyle={'ctaStatic'} />\n    )\n  }, [isRightTransaction, remainingTime, transaction, text, theme, props])\n\n  const progressBg = useMemo(() => {\n    switch (transaction.status){\n      case 'success':\n      case 'failed':\n        return 'transparent'\n      default:\n        return 'primary'\n    }\n  }, [transaction])\n\n  return (\n    <>\n      <Flex\n        top={0}\n        left={0}\n        bottom={0}\n        bg={progressBg}\n        overflow={'hidden'}\n        position={'absolute'}\n        alignItems={'center'}\n        justifyContent={'center'}\n        transition={'background 0.5s ease-in-out'}\n        sx={{\n          animationIterationCount: 1,\n          animationFillMode: 'forwards',\n          animationTimingFunction: 'ease-in-out',\n          animationDuration: `${transitionDuration}s`,\n          animationName: transactionStarted ? 'progress' : 'none',\n          animationPlayState: transactionStarted ? 'running' : 'stopped',\n        }}\n      >\n        <Flex\n          left={0}\n          width={props.width}\n          alignItems={'center'}\n          position={'absolute'}\n          justifyContent={'center'}\n          sx={{\n            '> *':{\n              color:'black !important',\n              borderColor:'black !important',\n            }\n          }}\n        >\n          {textComponent}\n        </Flex>\n      </Flex>\n      {textComponent}\n    </>\n  )\n}\n\nexport const TransactionButton: React.FC<TransactionButtonProps & ButtonProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  // @ts-ignore\n  const [ref, { width }] = useBoundingRect()\n  const { sendTransaction, state: { transaction } } = useTransactionManager()\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const onClick = useCallback(() => {\n    if (transaction.status === 'created' || transaction.status === 'pending') return\n    // console.log('onClick', vaultId, assetId, contractSendMethod)\n    return sendTransaction(vaultId, assetId, contractSendMethod, actionType, amount)\n  }, [transaction, vaultId, assetId, contractSendMethod, actionType, amount, sendTransaction])\n\n  const borderColor = useMemo(() => {\n    if (!isRightTransaction) return 'primary'\n    switch (transaction.status){\n      case 'success':\n        return 'green.400'\n      case 'failed':\n        return transaction.error?.code !== 4001 ? 'red.400' : 'primary'\n      default:\n        return 'primary'\n    }\n  }, [isRightTransaction, transaction])\n\n  return (\n    <Button\n      py={2}\n      px={10}\n      overflow={'hidden'}\n      position={'relative'}\n      width={width || 'auto'}\n      borderColor={borderColor}\n      onClick={() => onClick()}\n      ref={ref as typeof useRef}\n      variant={'ctaPrimaryOutline'}\n      transition={'border 0.5s ease-in-out'}\n      {...props}\n    >\n      <TransactionButtonValue text={text} vaultId={vaultId} assetId={assetId} contractSendMethod={contractSendMethod} width={width} />\n    </Button>\n  )\n}","import { Icon } from 'components/Icon/Icon'\nimport React, { useMemo, useRef } from 'react'\nimport { DATETIME_FORMAT } from 'constants/vars'\nimport { Amount } from 'components/Amount/Amount'\nimport { formatDate, sortArrayByKey } from 'helpers/'\nimport { Card, CardProps } from 'components/Card/Card'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport type { AssetId, Transaction } from 'constants/types'\nimport { Scrollable } from 'components/Scrollable/Scrollable'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { VStack, HStack, Flex, Text, Skeleton } from '@chakra-ui/react'\nimport { TransactionLink } from 'components/TransactionLink/TransactionLink'\n\ntype TransactionItemArgs = {\n  transaction: Transaction\n}\n\nconst TransactionItem: React.FC<TransactionItemArgs> = ({ transaction }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={transaction.assetId}\n    >\n      <VStack\n        mb={2}\n        pb={4}\n        spacing={4}\n        width={'100%'}\n        alignItems={'flex-start'}\n        borderBottomWidth={'1px'}\n        borderBottomColor={'divider'}\n      >\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={3}\n            direction={'row'}\n            alignItems={'center'}\n          >\n            {/*<Icon IconComponent={transaction.icon} width={24} height={24} size={24} />*/}\n            <Translation component={Text} translation={`transactionRow.${transaction.action}`} textStyle={'captionSmall'} />\n          </HStack>\n          <Text textStyle={'captionSmall'}>{formatDate(+transaction.timeStamp*1000, DATETIME_FORMAT)}</Text>\n        </HStack>\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={2}\n            alignItems={'center'}\n          >\n            <AssetProvider.Icon size={'xs'} />\n            <HStack\n              spacing={1}\n              alignItems={'center'}\n            >\n              <Amount value={transaction.underlyingAmount} decimals={4} textStyle={'tableCell'} />\n              <AssetProvider.Name textStyle={'tableCell'} />\n            </HStack>\n          </HStack>\n          <TransactionLink hash={transaction.hash} />\n        </HStack>\n      </VStack>\n    </AssetProvider>\n  )\n}\n\ntype TransactionListArgs = {\n  assetIds?: AssetId[]\n  showTitleOnMobile?: boolean\n  fullHeightOnMobile?: boolean\n} & CardProps\n\nexport const TransactionList: React.FC<TransactionListArgs> = ({ assetIds, showTitleOnMobile = false, fullHeightOnMobile = false, ...cardProps }) => {\n  const { account } = useWalletProvider()\n  const [ ref, dimensions ] = useBoundingRect()\n  const { isPortfolioLoaded, isVaultsPositionsLoaded, selectors: { selectVaultTransactions, selectVaultGauge } } = usePortfolioProvider()\n\n  const transactions: Transaction[] = useMemo(() => {\n    if (!account || !assetIds || !selectVaultTransactions || !selectVaultGauge) return []\n\n    return assetIds.reduce( (transactions: Transaction[], assetId: AssetId) => {\n      const gaugeVault = selectVaultGauge(assetId)\n      const vaultTransactions: Transaction[] = selectVaultTransactions(assetId)\n      const gaugeTransactions: Transaction[] = gaugeVault ? selectVaultTransactions(gaugeVault.id) : []\n      return [\n        ...transactions,\n        ...vaultTransactions,\n        ...gaugeTransactions\n      ]\n    }, [])\n\n  }, [account, assetIds, selectVaultTransactions, selectVaultGauge])\n\n  const isLoaded = useMemo(() => {\n    return isPortfolioLoaded && (!account || isVaultsPositionsLoaded)\n  }, [isPortfolioLoaded, account, isVaultsPositionsLoaded])\n\n  const transactionsList = useMemo(() => {\n    return isLoaded ?\n      transactions.length>0 ? \n        sortArrayByKey(transactions, 'timeStamp', 'desc').map( (transaction: Transaction) => (\n          <TransactionItem key={`tx_${transaction.hash}`} transaction={transaction} />\n        ))\n      : (\n        <Flex\n          flex={1}\n          minH={250}\n          width={'100%'}\n          alignItems={'center'}\n          justifyContent={'center'}\n        >\n          <Translation component={Text} translation={'assets.assetDetails.assetHistory.emptyTransactions'} />\n        </Flex>\n      )\n    : (\n      <VStack\n        spacing={4}\n        width={'100%'}\n      >\n        <Skeleton width={'100%'} height={10} />\n        <Skeleton width={'100%'} height={10} />\n        <Skeleton width={'100%'} height={10} />\n        <Skeleton width={'100%'} height={10} />\n      </VStack>\n    )\n  }, [isLoaded, transactions])\n\n  return (\n    <Card\n      flex={1}\n      {...cardProps}\n    >\n      <VStack\n        flex={1}\n        spacing={0}\n        height={'100%'}\n        alignItems={'flex-start'}\n        ref={ref as typeof useRef}\n        justifyContent={'flex-start'}\n      >\n        <Translation display={showTitleOnMobile ? 'block' : ['none', 'block']} component={Card.Heading} translation={'assets.assetDetails.assetHistory.transactionHistory'} />\n        <Scrollable maxH={[fullHeightOnMobile ? '100%' : 280, Math.max(dimensions?.height || 400)]}>\n          {transactionsList}\n        </Scrollable>\n      </VStack>\n    </Card>\n  )\n}","import React, { useMemo } from 'react'\nimport { AssetId } from 'constants/types'\nimport { useNavigate } from 'react-router-dom'\nimport { CardProps, Card } from 'components/Card/Card'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { VStack, SimpleGrid, HStack, Box, Text, Button } from '@chakra-ui/react'\n\nexport type VaultCardProps = {\n  assetId: AssetId\n}\n\ntype VaultCardField = {\n  label: string\n  field: string\n}\n\nexport type VaultCardInlineProps = {\n  fields: VaultCardField[]\n  onClick?: Function\n} & VaultCardProps & CardProps\n\nconst Inline = ({ assetId, fields, onClick, ...cardProps }: VaultCardInlineProps) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        py={2}\n        px={[4, 6]}\n        layerStyle={['card', 'cardHover']}\n        onClick={onClick}\n        {...cardProps}\n      >\n        <HStack\n          width={'100%'}\n          justifyContent={'space-between'}\n        >\n          <HStack\n            spacing={3}\n            width={'100%'}\n            alignItems={'center'}\n          >\n            <AssetProvider.Icon size={'xs'} />\n            {/*<AssetProvider.Name textStyle={'tableCell'} />*/}\n            {\n              fields.map( (fieldInfo, index) => (\n                <React.Fragment key={`field_${index}`}>\n                  <Box\n                    width={1}\n                    height={1}\n                    bg={'divider'}\n                    borderRadius={'50%'}\n                  />\n                  <HStack\n                    spacing={2}\n                  >\n                    <Translation translation={fieldInfo.label} component={Text} textStyle={'captionSmall'} />\n                    <AssetProvider.GeneralData field={fieldInfo.field} textStyle={'tableCell'} />\n                  </HStack>\n                </React.Fragment>\n              ))\n            }\n          </HStack>\n        </HStack>\n      </Card>\n    </AssetProvider>\n  )\n}\n\nexport const VaultCard = ({ assetId }: VaultCardProps) => {\n  const navigate = useNavigate()\n  const { location } = useBrowserRouter()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    if (!selectAssetById) return\n    return selectAssetById(assetId)\n  }, [assetId, selectAssetById])\n\n  const depositedOrRewards = useMemo(() => {\n    return asset?.vaultPosition?.usd.deposited ? (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.deposited'} textStyle={'captionSmall'} />\n        <AssetProvider.DepositedUsd textStyle={'tableCell'} />\n      </VStack>\n    ) : asset?.type === 'BY' ? (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.protocols'} textStyle={'captionSmall'} />\n        <AssetProvider.Protocols iconMargin={-1} size={'xs'} />\n      </VStack>\n    ) : (\n      <VStack\n        spacing={1}\n        alignItems={'flex-start'}\n      >\n        <Translation translation={'defi.rewards'} textStyle={'captionSmall'} />\n        <AssetProvider.Rewards iconMargin={-1} size={'xs'} />\n      </VStack>\n    )\n  }, [asset])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        p={4}\n        onClick={() => navigate(`${location?.pathname}/${assetId}`)}\n      >\n        <VStack\n          spacing={3}\n          alignItems={'flex-start'}\n        >\n          <AssetLabel assetId={assetId} size={'sm'} />\n          <SimpleGrid\n            pt={3}\n            pl={4}\n            columns={3}\n            width={'100%'}\n            borderTop={'1px solid'}\n            borderTopColor={'divider'}\n          >\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation translation={'defi.pool'} textStyle={'captionSmall'} />\n              <AssetProvider.PoolUsd textStyle={'tableCell'} />\n            </VStack>\n\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation translation={'defi.apy'} textStyle={'captionSmall'} />\n              <AssetProvider.Apy textStyle={'tableCell'} />\n            </VStack>\n            {depositedOrRewards}\n          </SimpleGrid>\n        </VStack>\n      </Card>\n    </AssetProvider>\n  )\n}\n\nVaultCard.Inline = Inline","import React from 'react'\nimport { Card } from 'components/Card/Card'\nimport { Amount } from 'components/Amount/Amount'\nimport type { VaultRewards, AssetId } from 'constants/types'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { VStack, HStack, Text, SimpleGrid } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype RewardProps = {\n  assetId: AssetId\n} & VaultRewards\n\nexport const VaultRewardOverview: React.FC<RewardProps> = ({\n  assetId,\n  assets,\n  amount\n}) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <Card\n        p={6}\n      >\n        <VStack\n          spacing={5}\n          alignItems={'flex-start'}\n        >\n          <AssetLabel assetId={assetId} />\n          <HStack\n            width={'100%'}\n            justifyContent={'space-between'}\n          >\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation component={Text} translation={'defi.vaults'} textStyle={'captionSmall'} />\n              <HStack\n                spacing={0}\n              >\n                {\n                  assets.map( (assetId: AssetId, index: number) => (\n                    <AssetProvider key={`asset_${assetId}`} assetId={assetId}>\n                      <AssetProvider.Icon size={'xs'} ml={index ? -1 : 0} showTooltip={true} />\n                    </AssetProvider>\n                  ))\n                }\n              </HStack>\n            </VStack>\n\n            <VStack\n              spacing={1}\n              alignItems={'flex-start'}\n            >\n              <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n              <HStack\n                spacing={1}\n              >\n                <Amount value={amount} decimals={8} textStyle={'tableCell'} />\n                <AssetProvider.Name textStyle={'tableCell'} />\n              </HStack>\n            </VStack>\n          </HStack>\n        </VStack>\n      </Card>\n    </AssetProvider>\n  )\n}","import dayjs from 'dayjs'\nimport BigNumber from 'bignumber.js'\nimport { useState, useMemo, useEffect } from 'react'\n// import { balanceChartDataMock } from './balanceChartData.mock'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { BNify, getTimestampRange, isEmpty, getTimeframeTimestamp } from 'helpers/'\nimport { AssetId, HistoryData, HistoryTimeframe, Asset, Transaction } from 'constants/types'\n\nexport type RainbowData = {\n  date: number\n  total: number\n  [k: AssetId]: number\n}\n\nexport type BalanceChartData = {\n  total: HistoryData[]\n  rainbow: RainbowData[]\n}\n\ntype UseBalanceChartDataReturn = {\n  assets?: Asset[]\n  balanceChartData: BalanceChartData\n  balanceChartDataLoading: boolean\n}\n\ntype UseBalanceChartDataArgs = {\n  assetIds: AssetId[]\n  accountId?: string\n  strategies?: string[]\n  timeframe?: HistoryTimeframe\n  useDollarConversion?: boolean\n}\n\ntype UseBalanceChartData = (args: UseBalanceChartDataArgs) => UseBalanceChartDataReturn\n\nexport const useBalanceChartData: UseBalanceChartData = ({\n  assetIds,\n  accountId,\n  strategies,\n  timeframe,\n  useDollarConversion = true\n}) => {\n\n  const {\n    isPortfolioLoaded,\n    historicalPrices,\n    historicalPricesUsd,\n    selectors: {\n      selectAssetsByIds,\n      selectVaultTransactions,\n      selectAssetHistoricalPriceByTimestamp,\n      selectAssetHistoricalPriceUsdByTimestamp\n    }\n  } = usePortfolioProvider()\n\n  const [balanceChartDataLoading, setBalanceChartDataLoading] = useState<boolean>(true)\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    const assets = selectAssetsByIds(assetIds)\n    return assets.filter( (asset: Asset) => !strategies || !asset.type || strategies.includes(asset.type) )\n  }, [assetIds, strategies, selectAssetsByIds])\n\n  const timeframeStartTimestamp = useMemo((): number => {\n    if (!timeframe) return 0\n    return getTimeframeTimestamp(timeframe)\n  }, [timeframe])\n\n  // console.log('assets', assets)\n\n  const balanceChartData = useMemo((): BalanceChartData => {\n\n    const chartData: BalanceChartData = {\n      total: [],\n      rainbow: []\n    }\n\n    if (!isPortfolioLoaded || isEmpty(historicalPrices) || isEmpty(historicalPricesUsd)) return chartData\n\n    // console.log('historicalPricesUsd', historicalPricesUsd)\n\n    const assetsBalancesByDate = assets.reduce( (assetsBalancesByDate: Record<number, Record<AssetId, number>>, asset: Asset) => {\n\n      if (!asset?.id) return assetsBalancesByDate\n\n      const assetId: AssetId = asset.id\n\n      const vaultTransactions = selectVaultTransactions(assetId)\n\n      if (!vaultTransactions.length) return assetsBalancesByDate\n\n      // Loop through asset transactions\n      const assetBalancesByDate = vaultTransactions.reduce( (balances: Record<string, any>, transaction: Transaction) => {\n        const timestamp = +(dayjs(+(transaction.timeStamp)*1000).startOf('day').valueOf())\n\n        switch (transaction.action) {\n          case 'deposit':\n            balances.total = balances.total.plus(transaction.idleAmount)\n            // console.log('Deposit', dayjs(timestamp).format('YYYY-MM-DD'), asset.name, transaction.idleAmount.toString(), balances.total.toString())\n          break;\n          case 'redeem':\n            balances.total = BigNumber.maximum(0, balances.total.minus(transaction.idleAmount))\n            // console.log('Redeem', dayjs(timestamp).format('YYYY-MM-DD'), asset.name, transaction.idleAmount.toString(), balances.total.toString())\n          break;\n          default:\n          break;\n        }\n\n        balances.byDate[timestamp] = balances.total\n\n        return balances\n      }, {\n        total: BNify(0),\n        byDate: {}\n      })\n\n      Object.keys(assetBalancesByDate.byDate).forEach( (timestamp: any) => {\n        if (!assetsBalancesByDate[timestamp]) {\n          assetsBalancesByDate[timestamp] = {}\n        }\n        if (asset.id) {\n          assetsBalancesByDate[timestamp][asset.id] = parseFloat(assetBalancesByDate.byDate[timestamp].toFixed(8))\n        }\n      })\n\n      // console.log(asset.id, transaction.action, assetBalancesByDate)\n\n      return assetsBalancesByDate\n    }, {})\n\n    if (isEmpty(assetsBalancesByDate)) return chartData\n\n    // console.log('assetsBalancesByDate', assetsBalancesByDate)\n\n    // Extend balances for each day between the first one and today\n    const startTimestamp = +(Object.keys(assetsBalancesByDate).sort()[0])\n    const endTimestamp = +(dayjs().endOf('day').valueOf())\n\n    const timestampRange = getTimestampRange(startTimestamp, endTimestamp)\n    const assetsBalancesByDateExtended: Record<number, Record<AssetId, number>> = {}\n    for (let timestampIndex: number = 0, prevTimestamp: number | null = null; timestampIndex < timestampRange.length; timestampIndex++) {\n      const timestamp = timestampRange[timestampIndex]\n\n      // Copy prev balances\n      assetsBalancesByDateExtended[timestamp] = {\n        ...(prevTimestamp ? assetsBalancesByDateExtended[prevTimestamp] : {}),\n        ...assetsBalancesByDate[timestamp],\n      }\n\n      // console.log('assetsBalancesByDateExtended', prevTimestamp, timestamp, (prevTimestamp ? assetsBalancesByDateExtended[prevTimestamp] : {}), assetsBalancesByDateExtended[timestamp])\n\n      prevTimestamp = timestamp\n    }\n\n    // console.log('assetsBalancesByDateExtended', assetsBalancesByDateExtended)\n\n    // Trailing prices\n    let prevVaultPriceInfo: Record<AssetId, HistoryData> = {}\n    let prevVaultPriceInfoUsd: Record<AssetId, HistoryData> = {}\n\n    // Add totals\n    Object.keys(assetsBalancesByDateExtended).forEach( (timestamp: any) => {\n\n      const assetsBalances = assetsBalancesByDateExtended[timestamp]\n\n      // Multiply balance by vault price\n      Object.keys(assetsBalances).forEach( (assetId: AssetId) => {\n        const asset = assets.find( (asset: Asset) => asset.id === assetId )\n        const underlyingId: AssetId | undefined = asset?.underlyingId\n\n        const vaultPriceInfo: HistoryData | null = selectAssetHistoricalPriceByTimestamp(assetId, timestamp) || prevVaultPriceInfo[assetId]\n        // console.log('vaultPriceInfo', assetId, timestamp, vaultPriceInfo, assetsBalances[assetId])\n        if (vaultPriceInfo) {\n          assetsBalances[assetId] = parseFloat(BNify(assetsBalances[assetId]).times(BNify(vaultPriceInfo.value)).toFixed(8))\n          prevVaultPriceInfo[assetId] = vaultPriceInfo\n        }\n\n        if (useDollarConversion) {\n          const vaultPriceInfoUsd: HistoryData | null = selectAssetHistoricalPriceUsdByTimestamp(underlyingId, timestamp) || prevVaultPriceInfoUsd[assetId]\n          // console.log('vaultPriceInfoUsd', assetId, underlyingId, timestamp, prevVaultPriceInfoUsd[assetId], vaultPriceInfoUsd, assetsBalances[assetId]);\n          if (vaultPriceInfoUsd) {\n            assetsBalances[assetId] = parseFloat(BNify(assetsBalances[assetId]).times(BNify(vaultPriceInfoUsd.value)).toFixed(8))\n            prevVaultPriceInfoUsd[assetId] = vaultPriceInfoUsd\n          }\n        }\n      })\n\n      // Calculate total balance\n      assetsBalances.total = Object.values(assetsBalances).reduce( (total: number, value: number) => (total+value), 0 )\n    })\n\n    // console.log('assetsBalancesByDateExtended', assetsBalancesByDateExtended)\n\n    // Generate total array\n    chartData.total = Object.keys(assetsBalancesByDateExtended).reduce( (total: HistoryData[], timestamp: any ) => {\n      if (timestamp<timeframeStartTimestamp) return total\n      total.push({\n        date: parseInt(timestamp),\n        value: assetsBalancesByDateExtended[timestamp].total\n      })\n      return total\n    }, [])\n\n    // Generate rainbow array\n    chartData.rainbow = Object.keys(assetsBalancesByDateExtended).reduce( (rainbow: RainbowData[], timestamp: any ) => {\n      if (timestamp<timeframeStartTimestamp) return rainbow\n      rainbow.push({\n        date: parseInt(timestamp),\n        total: assetsBalancesByDateExtended[timestamp].total,\n        ...assetsBalancesByDateExtended[timestamp]\n      })\n      return rainbow\n    }, [])\n    \n    return chartData\n  // eslint-disable-next-line\n  }, [assets, useDollarConversion, timeframeStartTimestamp, selectVaultTransactions, isPortfolioLoaded, historicalPrices, historicalPricesUsd, selectAssetHistoricalPriceByTimestamp, selectAssetHistoricalPriceUsdByTimestamp])\n\n  // console.log('balanceChartData', balanceChartData)\n\n  useEffect(() => {\n    if (!balanceChartData.rainbow.length) return\n    setBalanceChartDataLoading(false)\n\n    return () => {\n      setBalanceChartDataLoading(true)\n    }\n  }, [balanceChartData])\n\n  return {\n    assets,\n    balanceChartData,\n    balanceChartDataLoading\n  }\n}","import { requestTimeout } from 'helpers/'\nimport { useState, useCallback, useLayoutEffect } from \"react\";\n\n// let timeoutRequest: any = null;\n\nconst debounce = (delay: number = 0, callback: Function) => {\n  let timeoutId: any = null;\n  return (...args: any[]) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(callback, delay, args);\n\n    // if (timeoutRequest) {\n    //   timeoutRequest.clear();\n    // }\n    // timeoutRequest = requestTimeout(callback, delay);\n  };\n};\n\nexport type Dimensions = {\n  x: number\n  y: number\n  top: number\n  left: number\n  width: number\n  height: number\n  right: number\n  bottom: number\n}\n\nconst initialDimensions: Dimensions = {\n  x: 0,\n  y: 0,\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  right: 0,\n  bottom: 0\n}\n\nfunction getDimensionObject(node: any): Dimensions {\n  const rect = node.getBoundingClientRect();\n  return {\n    x: rect.x,\n    y: rect.y,\n    top: rect.top,\n    left: rect.left,\n    width: rect.width,\n    height: rect.height,\n    right: rect.right,\n    bottom: rect.bottom\n  };\n}\n\nexport default function useBoundingRect(delay: number = 0) {\n  const [node, setNode] = useState<any>(null);\n  const [dimensions, setDimensions] = useState<Dimensions>(initialDimensions);\n\n  const ref = useCallback((node: any) => {\n    setNode(node);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (\"undefined\" !== typeof window && node) {\n      const measure = async () => {\n        window.requestAnimationFrame(() => {\n          // console.log('measure', getDimensionObject(node))\n          setDimensions(getDimensionObject(node))\n        });\n      }\n\n      measure();\n\n      const listener = debounce(delay || 100, measure);\n\n      window.addEventListener(\"resize\", listener);\n      window.addEventListener(\"scroll\", listener);\n      \n      return () => {\n        window.removeEventListener(\"resize\", listener);\n        window.removeEventListener(\"scroll\", listener);\n      };\n    }\n  }, [node, delay]);\n\n  return [ref, dimensions, node];\n}\n","import { useMemo } from 'react'\nimport { BNify } from 'helpers/'\nimport { useTranslate } from 'react-polyglot'\nimport type { Asset, AssetId, Balances } from 'constants/types'\nimport { strategies, StrategyProps } from 'constants/strategies'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport type { DonutChartData, DonutChartColors } from 'components/DonutChart/DonutChart'\n\ntype UseCompositionChartDataArgs = {\n  assetIds: AssetId[]\n  strategies?: string[]\n}\n\ntype Colors = {\n  [key: string]: DonutChartColors\n}\n\ntype ExtraData = {\n  colors: Colors\n}\n\nexport type Compositions = {\n  [key: string]: DonutChartData[]\n}\n\nexport type UseCompositionChartDataReturn = {\n  compositions: Compositions\n} & ExtraData\n\ntype UseCompositionChartData = (args: UseCompositionChartDataArgs) => UseCompositionChartDataReturn\n\nexport const useCompositionChartData: UseCompositionChartData = ({ assetIds, strategies: enabledStrategies }) => {\n  const translate = useTranslate()\n  const { selectors: { selectAssetById, selectAssetsByIds } } = usePortfolioProvider()\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    return selectAssetsByIds(assetIds)\n  }, [assetIds, selectAssetsByIds])\n\n  const strategiesInitialBalances = Object.keys(strategies).reduce( (balances: Record<string, Balances>, strategy: string) => {\n    return {\n      ...balances,\n      [strategy]: {\n        balance:BNify(0),\n        weightedRealizedApy: BNify(0)\n      }\n    }\n  }, {})\n\n  const strategiesBalances = useMemo(() => {\n    const filteredAssets = assets.filter( (asset: Asset) => asset.type && (!enabledStrategies || enabledStrategies.includes(asset.type)) )\n    return filteredAssets.reduce( (strategiesBalances: Record<string, Balances>, asset: Asset) => {\n      if (!asset.type || !asset.vaultPosition) return strategiesBalances\n\n      strategiesBalances[asset.type].balance = strategiesBalances[asset.type].balance.plus(asset.vaultPosition.usd.redeemable)\n      strategiesBalances[asset.type].weightedRealizedApy = strategiesBalances[asset.type].weightedRealizedApy.plus(asset.vaultPosition.realizedApy.times(asset.vaultPosition.usd.redeemable))\n\n      return strategiesBalances\n    }, strategiesInitialBalances)\n  }, [assets, enabledStrategies, strategiesInitialBalances])\n\n  const assetsBalances = useMemo(() => {\n    const filteredAssets = assets.filter( (asset: Asset) => asset.type && (!enabledStrategies || enabledStrategies.includes(asset.type)) )\n    return filteredAssets.reduce( (assetsBalances: Balances, asset: Asset) => {\n      if (!asset.underlyingId || !asset.vaultPosition) return assetsBalances\n\n      const underlyingAsset = selectAssetById(asset.underlyingId)\n      if (!underlyingAsset) return assetsBalances\n\n      if (!assetsBalances[underlyingAsset.id]) {\n        assetsBalances[underlyingAsset.id] = BNify(0)\n      }\n      assetsBalances[underlyingAsset.id] = assetsBalances[underlyingAsset.id].plus(asset.vaultPosition.usd.redeemable)\n      return assetsBalances\n    }, {})\n  }, [assets, enabledStrategies, selectAssetById])\n\n  const compositions: Compositions = {\n    assets: [],\n    strategies: []\n  }\n\n  compositions.strategies = useMemo((): DonutChartData[] => {\n    return Object.keys(strategiesBalances).map( (strategy: string) => {\n      const label = translate(strategies[strategy].label)\n      const avgRealizedApy = strategiesBalances[strategy].balance.gt(0) ? parseFloat(strategiesBalances[strategy].weightedRealizedApy.div(strategiesBalances[strategy].balance)) : 0\n      return {\n        label,\n        extraData: {\n          avgRealizedApy,\n          strategy: strategies[strategy],\n        },\n        value: parseFloat(strategiesBalances[strategy].balance)\n      }\n    })\n  }, [strategiesBalances, translate])\n\n  compositions.assets = useMemo((): DonutChartData[] => {\n    return Object.keys(assetsBalances).reduce( (compositionAssets: DonutChartData[], assetId: string) => {\n      const asset = selectAssetById(assetId)\n      if (!asset || (asset.type && (!enabledStrategies || enabledStrategies.includes(asset.type)))) return compositionAssets\n      return [\n        ...compositionAssets,\n        {\n          label: asset.name,\n          extraData: {\n            asset\n          },\n          value: parseFloat(assetsBalances[assetId])\n        }\n      ]\n    }, [])\n  }, [assetsBalances, selectAssetById, enabledStrategies])\n\n  const colors: Colors = {\n    assets: {},\n    strategies: {}\n  }\n\n  colors.strategies = useMemo((): DonutChartColors => {\n    return Object.values(strategies).reduce( (colors: DonutChartColors, strategy: StrategyProps) => {\n      const label = translate(strategy.label)\n      return {\n        ...colors,\n        [label]: strategy.color\n      }\n    }, {})\n  }, [translate])\n\n  colors.assets = useMemo((): DonutChartColors => {\n    return Object.keys(assetsBalances).reduce( (colors: DonutChartColors, assetId: string) => {\n      const asset = selectAssetById(assetId)\n      if (!asset) return colors\n      const label = asset.name\n      return {\n        ...colors,\n        [label]: asset.color\n      }\n    }, {})\n  }, [assetsBalances, selectAssetById])\n\n  return {\n    colors,\n    compositions\n  }\n}","// ../../react-shim.js\nimport React from \"react\";\n\n// src/stat-arrow.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\n\n// src/stat.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/stat.tsx\nvar [StatStylesProvider, useStatStyles] = createContext({\n  name: `StatStylesContext`,\n  errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Stat />\" `\n});\nvar Stat = forwardRef(function Stat2(props, ref) {\n  const styles = useMultiStyleConfig(\"Stat\", props);\n  const statStyles = {\n    position: \"relative\",\n    flex: \"1 1 0%\",\n    ...styles.container\n  };\n  const { className, children, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ React.createElement(StatStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */ React.createElement(chakra.div, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-stat\", className),\n    __css: statStyles\n  }, /* @__PURE__ */ React.createElement(\"dl\", null, children)));\n});\nStat.displayName = \"Stat\";\n\n// src/stat-arrow.tsx\nvar StatDownArrow = (props) => /* @__PURE__ */ React.createElement(Icon, {\n  color: \"red.400\",\n  ...props\n}, /* @__PURE__ */ React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z\"\n}));\nStatDownArrow.displayName = \"StatDownArrow\";\nfunction StatUpArrow(props) {\n  return /* @__PURE__ */ React.createElement(Icon, {\n    color: \"green.400\",\n    ...props\n  }, /* @__PURE__ */ React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z\"\n  }));\n}\nStatUpArrow.displayName = \"StatUpArrow\";\nfunction StatArrow(props) {\n  const { type, \"aria-label\": ariaLabel, ...rest } = props;\n  const styles = useStatStyles();\n  const BaseIcon = type === \"increase\" ? StatUpArrow : StatDownArrow;\n  const defaultAriaLabel = type === \"increase\" ? \"increased by\" : \"decreased by\";\n  const label = ariaLabel || defaultAriaLabel;\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(chakra2.span, {\n    srOnly: true\n  }, label), /* @__PURE__ */ React.createElement(BaseIcon, {\n    \"aria-hidden\": true,\n    ...rest,\n    __css: styles.icon\n  }));\n}\nStatArrow.displayName = \"StatArrow\";\n\n// src/stat-group.tsx\nimport { chakra as chakra3, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nvar StatGroup = forwardRef2(function StatGroup2(props, ref) {\n  return /* @__PURE__ */ React.createElement(chakra3.div, {\n    ...props,\n    ref,\n    role: \"group\",\n    className: cx(\"chakra-stat__group\", props.className),\n    __css: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      alignItems: \"flex-start\"\n    }\n  });\n});\nStatGroup.displayName = \"StatGroup\";\n\n// src/stat-help-text.tsx\nimport { chakra as chakra4, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar StatHelpText = forwardRef3(function StatHelpText2(props, ref) {\n  const styles = useStatStyles();\n  return /* @__PURE__ */ React.createElement(chakra4.dd, {\n    ref,\n    ...props,\n    className: cx(\"chakra-stat__help-text\", props.className),\n    __css: styles.helpText\n  });\n});\nStatHelpText.displayName = \"StatHelpText\";\n\n// src/stat-label.tsx\nimport { chakra as chakra5, forwardRef as forwardRef4 } from \"@chakra-ui/system\";\nvar StatLabel = forwardRef4(function StatLabel2(props, ref) {\n  const styles = useStatStyles();\n  return /* @__PURE__ */ React.createElement(chakra5.dt, {\n    ref,\n    ...props,\n    className: cx(\"chakra-stat__label\", props.className),\n    __css: styles.label\n  });\n});\nStatLabel.displayName = \"StatLabel\";\n\n// src/stat-number.tsx\nimport { chakra as chakra6, forwardRef as forwardRef5 } from \"@chakra-ui/system\";\nvar StatNumber = forwardRef5(function StatNumber2(props, ref) {\n  const styles = useStatStyles();\n  return /* @__PURE__ */ React.createElement(chakra6.dd, {\n    ref,\n    ...props,\n    className: cx(\"chakra-stat__number\", props.className),\n    __css: {\n      ...styles.number,\n      fontFeatureSettings: \"pnum\",\n      fontVariantNumeric: \"proportional-nums\"\n    }\n  });\n});\nStatNumber.displayName = \"StatNumber\";\nexport {\n  Stat,\n  StatArrow,\n  StatDownArrow,\n  StatGroup,\n  StatHelpText,\n  StatLabel,\n  StatNumber,\n  StatUpArrow,\n  useStatStyles\n};\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["AssetLabel","assetId","size","textProps","AssetProvider","wrapFlex","alignItems","justifyContent","textStyle","fontSize","whiteSpace","AssetsIcons","assetIds","showTooltip","props","spacing","map","index","ml","BalanceChart","accountId","timeframe","strategies","isRainbowChart","percentChange","setPercentChange","color","margins","top","right","bottom","left","useBalanceChartData","balanceChartData","assets","balanceChartDataLoading","total","useEffect","calculatePercentChange","width","p","height","Graph","formatFn","n","abbreviateNumber","data","loading","isLoaded","Card","children","layerStyle","rest","position","CardFlex","Dark","concat","Light","Outline","Flex","Heading","as","mb","CompositionChart","enabledStrategies","type","theme","useTheme","translate","useTranslate","protocolToken","usePortfolioProvider","useCompositionChartData","compositions","colors","getSliceData","useCallback","selectedSlice","totalFunds","reduce","asset","value","extraData","icon","label","name","y","x","href","textAnchor","fill","fontWeight","pointerEvents","cta","length","DonutChart","placeholder1","placeholder2","placeholder3","Dashboard","useBoundingRect","ref","dimensions","useThemeProvider","screenSize","isMobile","useState","HistoryTimeframe","setTimeframe","useLocalForge","Object","keys","selectedStrategies","setSelectedStrategies","navigate","useNavigate","useWalletProvider","account","walletInitialized","stakingData","isVaultsPositionsLoaded","isPortfolioLoaded","vaultsPositions","gaugesRewards","vaultsRewards","selectors","selectAssetById","selectAssetsByIds","selectVaultsAssetsByType","selectVaultsByType","filter","strategy","visible","accountAndPortfolioLoaded","useMemo","stakedIdleVault","includes","id","totalDeposited","amount","vaultPosition","plus","usd","deposited","BNify","redeemable","earningsPercentage","div","minus","times","userHasFunds","gt","toggleStrategy","s","strategiesOverview","mt","columns","strategyComposition","strategyPath","getRoutePath","route","avgRealizedApy","strategyAssets","tvlUsd","VAULTS_MIN_TVL","strategyPositions","CardComponent","py","px","pb","borderBottom","borderColor","StrategyLabel","Translation","component","Button","translation","onClick","variant","Text","noOfLines","Amount","minWidth","Scrollable","minH","maxH","sort","a","b","toString","VaultCard","bg","fields","field","apy","slice","vaultsRewardsOverview","strategyProps","isEmpty","direction","textAlign","VaultRewardOverview","gaugeRewards","rewardId","rewardData","gauges","apr","rate","decimals","balance","lt","stakingRewards","contractSendMethod","getClaimRewardsContractSendMethod","stakingUrl","getLegacyDashboardUrl","stkIDLE","lte","openWindow","flexWrap","totalSupply","suffix","stkIdleConfig","share","IDLE","claimable","PROTOCOL_TOKEN","formatDate","lockEnd","TransactionButton","text","vaultId","actionType","disabled","strategiesRewards","customText","strategiesFilters","flex","minW","chartColor","display","overflow","borderRadius","pt","TimeframeSelector","TransactionList","Math","max","showTitleOnMobile","JoinCommunity","defaultMargin","PieChart","margin","animate","setSelectedSlice","innerWidth","innerHeight","radius","min","centerY","centerX","d","keysColors","key","getColor","scaleOrdinal","domain","range","sliceData","rx","padAngle","cornerRadius","pieValue","outerRadius","innerRadius","pie","AnimatedPie","onMouseOver","getKey","arc","onMouseOut","fromLeaveTransition","endAngle","startAngle","PI","opacity","enterUpdateTransition","arcs","path","onClickDatum","useTransition","from","enter","update","leave","transitions","animated","interpolate","onTouchStart","random","debounceTime","parent","isExternal","textDecoration","leftIcon","parentRef","flexProps","overflowY","overflowX","strategyConfig","selectedTimeframe","values","selected","toUpperCase","TransactionButtonValue","intervalId","useRef","remainingTime","setRemainingTime","useTransactionManager","transaction","state","cleanTransaction","isRightTransaction","JSON","stringify","_method","transactionStarted","status","estimatedTime","transitionDuration","startCountdown","timestamp","targetTimestamp","ceil","Date","now","current","setTimeout","clearInterval","error","code","textComponent","green","red","progressBg","transition","sx","animationIterationCount","animationFillMode","animationTimingFunction","animationDuration","animationName","animationPlayState","sendTransaction","TransactionItem","borderBottomWidth","borderBottomColor","action","timeStamp","DATETIME_FORMAT","underlyingAmount","TransactionLink","hash","fullHeightOnMobile","cardProps","selectVaultTransactions","selectVaultGauge","transactions","gaugeVault","vaultTransactions","gaugeTransactions","transactionsList","sortArrayByKey","location","useBrowserRouter","depositedOrRewards","iconMargin","pathname","pl","borderTop","borderTopColor","Inline","fieldInfo","useDollarConversion","historicalPrices","historicalPricesUsd","selectAssetHistoricalPriceByTimestamp","selectAssetHistoricalPriceUsdByTimestamp","setBalanceChartDataLoading","timeframeStartTimestamp","getTimeframeTimestamp","chartData","rainbow","assetsBalancesByDate","assetBalancesByDate","balances","dayjs","startOf","valueOf","idleAmount","BigNumber","byDate","forEach","parseFloat","toFixed","startTimestamp","endTimestamp","endOf","timestampRange","getTimestampRange","assetsBalancesByDateExtended","timestampIndex","prevTimestamp","prevVaultPriceInfo","prevVaultPriceInfoUsd","assetsBalances","find","underlyingId","vaultPriceInfo","vaultPriceInfoUsd","push","date","parseInt","debounce","delay","callback","timeoutId","clearTimeout","args","initialDimensions","getDimensionObject","node","rect","getBoundingClientRect","setNode","setDimensions","useLayoutEffect","window","measure","requestAnimationFrame","listener","addEventListener","removeEventListener","strategiesInitialBalances","weightedRealizedApy","strategiesBalances","realizedApy","underlyingAsset","compositionAssets","cx","classNames","Boolean","join","createContext","errorMessage","StatStylesProvider","useStatStyles","Stat","forwardRef","styles","useMultiStyleConfig","statStyles","container","omitThemingProps","className","React","chakra","__css","displayName","StatDownArrow","Icon","StatUpArrow","StatArrow","ariaLabel","BaseIcon","chakra2","srOnly","forwardRef2","chakra3","role","forwardRef3","chakra4","helpText","forwardRef4","chakra5","StatNumber","forwardRef5","chakra6","number","fontFeatureSettings","fontVariantNumeric"],"sourceRoot":""}