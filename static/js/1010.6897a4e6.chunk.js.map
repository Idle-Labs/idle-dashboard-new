{"version":3,"file":"static/js/1010.6897a4e6.chunk.js","mappings":"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","sources":["components/AssetLabel/AssetLabel.tsx","components/OperativeComponent/OperativeComponent.tsx"],"sourcesContent":["import type { AssetId } from 'constants/types'\nimport { HStack, TextProps } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetLabelProps = {\n  size?: string\n  assetId: AssetId | undefined\n} & TextProps\n\nexport const AssetLabel: React.FC<AssetLabelProps> = ({ assetId, size = 'sm', ...textProps }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <HStack\n        alignItems={'center'}\n        justifyContent={'flex-start'}\n      >\n        <AssetProvider.Icon size={size} />\n        <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps} />\n      </HStack>\n    </AssetProvider>\n  )\n}","import BigNumber from 'bignumber.js'\nimport { TransactionSpeed } from 'constants/'\nimport { Amount } from 'components/Amount/Amount'\nimport { strategies } from 'constants/strategies'\nimport type { VaultMessages } from 'constants/vaults'\nimport { TILDE, MAX_ALLOWANCE } from 'constants/vars'\nimport { Card, CardProps } from 'components/Card/Card'\nimport { useWalletProvider } from 'contexts/WalletProvider'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { useBrowserRouter } from 'contexts/BrowserRouterProvider'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { ChakraCarousel } from 'components/ChakraCarousel/ChakraCarousel'\nimport { useTransactionManager } from 'contexts/TransactionManagerProvider'\nimport type { Asset, ReducerActionTypes, AssetId, Number } from 'constants/types'\nimport { TranslationProps, Translation } from 'components/Translation/Translation'\nimport { ConnectWalletButton } from 'components/ConnectWalletButton/ConnectWalletButton'\nimport { AssetProvider, useAssetProvider } from 'components/AssetProvider/AssetProvider'\nimport React, { useState, useRef, useEffect, useCallback, useMemo, useReducer, useContext, createContext } from 'react'\nimport { BNify, bnOrZero, getAllowance, getVaultAllowanceOwner, estimateGasLimit, formatTime, abbreviateNumber, getExplorerTxUrl, apr2apy } from 'helpers/'\nimport { MdOutlineAccountBalanceWallet, MdOutlineLocalGasStation, MdKeyboardArrowLeft, MdOutlineLockOpen, MdOutlineRefresh, MdOutlineDone, MdOutlineClose } from 'react-icons/md'\nimport { TextProps, BoxProps, useTheme, Switch, Center, Box, Flex, VStack, HStack, SkeletonText, Text, Radio, Button, ButtonProps, Tabs, TabList, Tab, Input, CircularProgress, CircularProgressLabel, SimpleGrid, Spinner, Link, LinkProps } from '@chakra-ui/react'\n\ntype InputAmountArgs = {\n  amount?: Number\n  amountUsd?: Number\n  setAmount: Function\n  inputHeight?: number\n}\n\nconst InputAmount: React.FC<InputAmountArgs> = ({ inputHeight, amount, amountUsd, setAmount }) => {\n  const { asset, underlyingAsset } = useAssetProvider()\n  // const [ amountUsd, setAmountUsd ] = useState<number>(0)\n  const { selectors: { selectAssetPriceUsd, selectVaultPrice } } = usePortfolioProvider()\n  \n  const handleAmountChange = ({target: { value }}: { target: {value: string} }) => {\n    setAmount(Math.max(0, parseFloat(value)).toString())\n  }\n\n  /*\n  useEffect(() => {\n    if (!selectAssetPriceUsd || !selectVaultPrice || !underlyingAsset || !asset) return\n    const assetPriceUsd = selectAssetPriceUsd(underlyingAsset.id)\n    const vaultPrice = selectVaultPrice(asset.id)\n\n    if (asset.type === 'underlying') {\n      const amountUsd = parseFloat(BNify(amount).times(assetPriceUsd).toString()) || 0\n      setAmountUsd(amountUsd)\n    } else {\n      const amountUsd = parseFloat(BNify(amount).times(assetPriceUsd).times(vaultPrice).toString()) || 0\n      setAmountUsd(amountUsd)\n    }\n  }, [asset, underlyingAsset, amount, selectVaultPrice, selectAssetPriceUsd])\n  */\n\n  const amountUsdToDisplay = useMemo(() => {\n    if (amountUsd) return BNify(amountUsd)\n    if (!selectAssetPriceUsd || !selectVaultPrice || !underlyingAsset || !asset) return\n    const assetPriceUsd = selectAssetPriceUsd(underlyingAsset.id)\n    const vaultPrice = selectVaultPrice(asset.id)\n\n    if (asset.type === 'underlying') {\n      return parseFloat(BNify(amount).times(assetPriceUsd).toString()) || 0\n    } else {\n      return parseFloat(BNify(amount).times(assetPriceUsd).times(vaultPrice).toString()) || 0\n    }\n  }, [asset, underlyingAsset, amount, amountUsd, selectVaultPrice, selectAssetPriceUsd])\n\n  // console.log('InputAmount', asset)\n\n  return (\n    <HStack\n      width={'100%'}\n      justifyContent={'space-between'}\n    >\n      <Input height={inputHeight} flex={1} type={'number'} placeholder={'0'} variant={'balance'} value={BNify(amount).toString()} onChange={handleAmountChange} />\n      <Amount.Usd abbreviateThresold={10000} textStyle={'captionSmall'} color={'brightGreen'} prefix={'≈ $'} value={bnOrZero(amountUsdToDisplay).toString()} />\n    </HStack>\n  )\n}\n\ntype ActionComponentArgs = {\n  itemIndex: number\n  goBack?: Function\n} & BoxProps\n\nexport const Approve: React.FC<ActionComponentArgs> = ({ goBack, itemIndex, children }) => {\n  const { account } = useWalletProvider()\n  const { defaultAmount, dispatch, activeItem } = useOperativeComponent()\n  const [ amount, setAmount ] = useState<string>(defaultAmount)\n  const { underlyingAsset, vault, translate, theme } = useAssetProvider()\n  const [ allowanceModeExact, setAllowanceModeExact ] = useState<boolean>(false)\n  const [ amountToApprove, setAmountToApprove ] = useState<string>(defaultAmount)\n  const { sendTransaction/*, sendTransactionTest*/, setGasLimit } = useTransactionManager()\n\n  useEffect(() => {\n    setAmount(defaultAmount)\n  }, [defaultAmount])\n\n  // const amountToApprove = useMemo((): string => {\n  //   return !allowanceModeExact ? MAX_ALLOWANCE : amount\n  // }, [allowanceModeExact, amount])\n\n  const getDefaultGasLimit = useCallback(async () => {\n    if (!vault || !(\"getAllowanceContractSendMethod\" in vault) || !(\"getAllowanceParams\" in vault)) return\n    const sendOptions = {\n      from: account?.address\n    }\n    const allowanceParams = vault.getAllowanceParams(MAX_ALLOWANCE)\n    const allowanceContractSendMethod = vault.getAllowanceContractSendMethod(allowanceParams)\n    if (!allowanceContractSendMethod) return\n    const estimatedGasLimit = await estimateGasLimit(allowanceContractSendMethod, sendOptions)\n    // console.log('APPROVE - estimatedGasLimit', estimatedGasLimit)\n    return estimatedGasLimit\n  }, [account, vault])\n\n  const approve = useCallback(() => {\n    if (!vault || !(\"getAllowanceContractSendMethod\" in vault) || !(\"getAllowanceParams\" in vault)) return\n    const allowanceParams = vault.getAllowanceParams(amountToApprove)\n    const allowanceContractSendMethod = vault.getAllowanceContractSendMethod(allowanceParams)\n    console.log('allowanceParams', allowanceParams, allowanceContractSendMethod)\n    if (!allowanceContractSendMethod) return\n    sendTransaction(vault.id, underlyingAsset?.id, allowanceContractSendMethod)\n  }, [amountToApprove, vault, underlyingAsset, sendTransaction])\n\n  // Update amount to approve and parent amount\n  useEffect(() => {\n    const amountToApprove = !allowanceModeExact ? MAX_ALLOWANCE : amount\n    // console.log('activeItem', activeItem, itemIndex, amountToApprove)\n    setAmountToApprove(amountToApprove)\n    if (activeItem !== itemIndex) return\n    dispatch({type: 'SET_AMOUNT', payload: amountToApprove})\n  }, [allowanceModeExact, amount, dispatch, activeItem, itemIndex])\n\n  // Update gas fees\n  useEffect(() => {\n    if (activeItem !== itemIndex) return\n    ;(async () => {\n      const defaultGasLimit = await getDefaultGasLimit()\n      setGasLimit(defaultGasLimit)\n    })()\n  }, [activeItem, itemIndex, getDefaultGasLimit, setGasLimit])\n\n  // Update gas fees\n  // useEffect(() => {\n  //   ;(async () => {\n  //     const defaultGasLimit = await getDefaultGasLimit()\n  //     setGasLimit(defaultGasLimit)\n  //   })()\n  // }, [getDefaultGasLimit, setGasLimit])\n\n  return (\n    <VStack\n      flex={1}\n      width={'100%'}\n      alignItems={'flex-start'}\n    >\n      <NavBar goBack={goBack} translation={\"modals.approve.header\"} params={{asset: underlyingAsset?.name}} />\n      <Flex\n        p={14}\n        pt={20}\n        flex={1}\n      >\n        <VStack\n          spacing={6}\n        >\n          <MdOutlineLockOpen size={72} />\n          <Translation component={Text} prefix={`${translate(\"modals.approve.routerName\")} `} translation={\"modals.approve.body\"} params={{asset: underlyingAsset?.name}} textStyle={['heading', 'h3']} textAlign={'center'} />\n          <VStack\n            width={'100%'}\n            spacing={6}\n          >\n            <HStack\n              py={2}\n              width={'100%'}\n              justifyContent={'space-between'}\n              borderTop={`1px solid ${theme.colors.divider}`}\n              borderBottom={`1px solid ${theme.colors.divider}`}\n            >\n              <Translation component={Text} translation={\"trade.allowance\"} textStyle={'captionSmall'} />\n              <HStack\n                spacing={1}\n              >\n                <Translation component={Text} translation={\"trade.unlimited\"} textStyle={['captionSmall', 'bold', 'clickable', !allowanceModeExact ? 'active' : 'inactive']} onClick={ (e: any) => setAllowanceModeExact(false) } />\n                <Switch size={'sm'} isChecked={allowanceModeExact} onChange={ (e) => setAllowanceModeExact(e.target.checked) } />\n                <Translation component={Text} translation={\"trade.exact\"} textStyle={['captionSmall', 'bold', 'clickable', allowanceModeExact ? 'active' : 'inactive']} onClick={ (e: any) => setAllowanceModeExact(true) } />\n              </HStack>\n            </HStack>\n            {\n              allowanceModeExact && (\n                <HStack>\n                  <AssetProvider.Icon size={'sm'} />\n                  <Card\n                    px={4}\n                    py={2}\n                    layerStyle={'cardLight'}\n                  >\n                    <InputAmount inputHeight={6} amount={amount} setAmount={setAmount} />\n                  </Card>\n                </HStack>\n              )\n            }\n          </VStack>\n          <Translation component={Button} translation={\"common.approve\"} onClick={approve} variant={'ctaFull'} />\n        </VStack>\n      </Flex>\n      <EstimatedGasFees />\n    </VStack>\n  )\n}\n\nconst EstimatedGasFees: React.FC = () => {\n  const theme = useTheme()\n  const { chainToken } = useWalletProvider()\n  const { state: { transactionSpeed, estimatedFees, estimatedFeesUsd } } = useTransactionManager()\n\n  const gasFee = useMemo(() => {\n    if (!estimatedFees) return null\n    return estimatedFees[transactionSpeed]\n  }, [estimatedFees, transactionSpeed])\n\n  const gasFeeUsd = useMemo(() => {\n    if (!estimatedFeesUsd) return null\n    return estimatedFeesUsd[transactionSpeed]\n  }, [estimatedFeesUsd, transactionSpeed])\n\n  return (\n    <HStack\n      spacing={1}\n      width={'100%'}\n      alignItems={'center'}\n    >\n      <MdOutlineLocalGasStation color={theme.colors.ctaDisabled} size={24} />\n      <Translation translation={'trade.estimatedGasFee'} suffix={':'} textStyle={'captionSmaller'} />\n      <Amount.Usd textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'} prefix={TILDE} value={gasFeeUsd}></Amount.Usd>\n      {\n        gasFeeUsd && (\n          <Amount textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'} prefix={`(`} suffix={`${chainToken?.symbol})`} value={gasFee} decimals={4}></Amount>\n        )\n      }\n    </HStack>\n  )\n}\n\ntype DynamicActionFieldsProps = {\n  action: string\n  amount: string\n  amountUsd: number\n  assetId: AssetId | undefined\n}\n\ntype DynamicActionFieldProps = {\n  field: string\n} & TextProps & DynamicActionFieldsProps\n\nexport const DynamicActionField: React.FC<DynamicActionFieldProps> = ({ assetId, field, action, amount, amountUsd, ...textProps }) => {\n  const { helpers: { vaultFunctionsHelper }, selectors: { selectAssetById, selectVaultById, selectVaultGauge } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return assetId && selectAssetById && selectAssetById(assetId)\n  }, [assetId, selectAssetById])\n\n  const vault = useMemo(() => {\n    return assetId && selectVaultById && selectVaultById(assetId)\n  }, [assetId, selectVaultById])\n\n  const vaultGauge = useMemo(() => {\n    return assetId && selectVaultGauge && selectVaultGauge(assetId)\n  }, [assetId, selectVaultGauge])\n\n  const assetGauge = useMemo(() => {\n    return vaultGauge && selectAssetById && selectAssetById(vaultGauge.id)\n  }, [vaultGauge, selectAssetById])\n\n  const newTrancheTvl = useMemo(() => BNify(asset.tvl).plus(bnOrZero(amount)), [asset, amount])\n  const newTotalTvl = useMemo(() => BNify(asset.totalTvl).plus(bnOrZero(amount)), [asset, amount])\n  \n  const newApr = useMemo(() => {\n    return vaultFunctionsHelper?.getVaultNewApr(asset, vault, BNify(amount))\n  }, [asset, vault, amount, vaultFunctionsHelper])\n\n  // Calculate the new APY using the apy breakdown (dilute Gauge and Harest APY based on new TVL)\n  const newApy = useMemo(() => {\n    if (bnOrZero(newApr).gt(0)){\n        const newApy = apr2apy(bnOrZero(newApr).div(100)).times(100)\n        const additionalApy = asset.apyBreakdown ? (Object.keys(asset.apyBreakdown || {}) as string[]).filter( (type: string) => type !== 'base' ).reduce( (total: BigNumber, type: string) => {\n          switch (type){\n            case 'gauge':\n              const gaugeData = assetGauge?.gaugeData\n              if (gaugeData){\n                const gaugeNewTotalSupply = bnOrZero(gaugeData?.totalSupply).plus(bnOrZero(amount))\n                const gaugeApyCompressionFactor = bnOrZero(gaugeData?.totalSupply).div(gaugeNewTotalSupply)\n                const newGaugeApy = asset.apyBreakdown[type].times(gaugeApyCompressionFactor)\n                return total.plus(newGaugeApy)\n              }\n              return total.plus(asset.apyBreakdown[type])\n            case 'harvest':\n              const harvestApyCompressionFactor = BNify(asset.tvl).div(newTrancheTvl)\n              const newHarvestApy = asset.apyBreakdown[type].times(harvestApyCompressionFactor)\n              return total.plus(newHarvestApy)\n            default:\n              return total.plus(asset.apyBreakdown[type])\n          }\n        }, BNify(0)) : BNify(0)\n        return BNify(newApy).plus(additionalApy)\n    } else {\n      return bnOrZero(asset?.apy)\n    }\n\n  }, [asset, amount, newTrancheTvl, assetGauge, newApr])\n  \n  // console.log('newApy', amount, asset, newApr.toString(), BNify(asset.additionalApr).toString(), newApy.toString())\n\n  const amountIsValid = bnOrZero(amountUsd).gt(0)\n\n  const redeemable = bnOrZero(asset?.vaultPosition?.underlying.redeemable)\n  const redeemableUsd = bnOrZero(asset?.vaultPosition?.usd.redeemable)\n  const totalGain = BigNumber.maximum(0, bnOrZero(asset?.vaultPosition?.usd.earnings))\n  const earningsPerc = bnOrZero(asset?.vaultPosition?.earningsPercentage)\n  const redeemablePercentage = BigNumber.minimum(1, bnOrZero(amountUsd).div(redeemableUsd))\n  const gain = BigNumber.minimum(totalGain, redeemablePercentage.times(totalGain))\n  const maxFees = BigNumber.maximum(0, bnOrZero(asset?.vaultPosition?.usd.earnings).times(asset?.fee))\n  const fees = BigNumber.minimum(maxFees, bnOrZero(gain).times(asset?.fee))\n\n  const redeemableAmountIsValid = amountIsValid && bnOrZero(amount).lte(redeemable)\n  // console.log('redeemableAmountIsValid', bnOrZero(amountUsd).toString(), redeemable.toString(), redeemableAmountIsValid)\n\n  switch (field){\n    case 'boost':\n      const apyBoost = newApy && asset?.baseApr?.gt(0) ? newApy.div(asset?.baseApr) : BNify(0)\n      return <Text {...textProps} textStyle={'titleSmall'} color={'primary'}>{apyBoost.toFixed(2)}x</Text>\n    case 'overperformance':\n      const basePerformance = bnOrZero(amountUsd).times(BNify(asset?.baseApr).div(100))\n      const tranchePerformance = bnOrZero(amountUsd).times(BNify(asset?.apy).div(100))\n      const overperformance = amountIsValid ? tranchePerformance.minus(basePerformance) : null\n      return <Amount.Usd textStyle={'titleSmall'} color={'primary'} {...textProps} value={overperformance} suffix={'/year'} />\n    case 'newApy':\n      return <Amount.Percentage textStyle={'titleSmall'} color={'primary'} {...textProps} value={newApy} />\n    case 'gain':\n      return <Amount.Usd textStyle={'titleSmall'} color={'primary'} {...textProps} value={redeemableAmountIsValid ? gain : null} />\n    case 'fee':\n      return <Amount.Usd textStyle={'titleSmall'} color={'primary'} {...textProps} value={redeemableAmountIsValid ? fees : null} />\n    case 'netGain':\n      const netGain = BigNumber.minimum(totalGain.minus(fees), bnOrZero(gain).minus(fees))\n      return <Amount.Usd textStyle={'titleSmall'} color={'primary'} {...textProps} value={redeemableAmountIsValid ? netGain : null} />\n    case 'coverage':\n      const bbTranche = selectAssetById(vault?.vaultConfig.Tranches.BB.address)\n      const coverageAmount = bbTranche.tvl && newTrancheTvl ? bbTranche.tvl.div(newTrancheTvl).times(100) : 0;\n      return <Amount.Percentage textStyle={'titleSmall'} color={'primary'} {...textProps} value={coverageAmount} />\n    default:\n      return null\n  }\n}\n\nexport const DynamicActionFields: React.FC<DynamicActionFieldsProps> = (props) => {\n  const { selectors: { selectAssetById, selectVaultById } } = usePortfolioProvider()\n\n  const { assetId, action, amount, amountUsd } = props\n\n  const vault = useMemo(() => {\n    return assetId && selectVaultById && selectVaultById(assetId)\n  }, [assetId, selectVaultById])\n\n  const strategy = useMemo(() => {\n    return vault?.type && strategies[vault.type]\n  }, [vault])\n\n  if (!strategy?.dynamicActionFields?.[action]) return null\n\n  const dynamicActionFields = strategy?.dynamicActionFields[action]\n\n  return (\n    <VStack\n      spacing={2}\n      width={'100%'}\n    >\n      {\n        dynamicActionFields.map( (dynamicField: string) => (\n          <HStack\n            pb={2}\n            px={4}\n            width={'100%'}\n            alignItems={'center'}\n            borderBottom={`1px solid`}\n            borderBottomColor={'divider'}\n            justifyContent={'space-between'}\n            key={`dynamicField_${dynamicField}`}\n          >\n            <Translation component={Text} translation={`dynamicActionFields.${dynamicField}`} textStyle={'captionSmall'} />\n            <DynamicActionField {...props} field={dynamicField} />\n          </HStack>\n        ))\n      }\n    </VStack>\n  )\n}\n\nexport const Deposit: React.FC<ActionComponentArgs> = ({ itemIndex }) => {\n  const [ error, setError ] = useState<string>('')\n  const [ amount, setAmount ] = useState<string>('0')\n  const [ amountUsd, setAmountUsd ] = useState<number>(0)\n\n  const { account } = useWalletProvider()\n  const { dispatch, activeItem, activeStep, executeAction } = useOperativeComponent()\n  const { sendTransaction, setGasLimit, state: { transaction } } = useTransactionManager()\n  const { selectors: { selectAssetPriceUsd, selectAssetBalance } } = usePortfolioProvider()\n  const { asset, vault, underlyingAsset, underlyingAssetVault, translate } = useAssetProvider()\n\n  const assetBalance = useMemo(() => {\n    if (!selectAssetBalance) return BNify(0)\n    return selectAssetBalance(underlyingAsset?.id)\n  }, [selectAssetBalance, underlyingAsset?.id])\n\n\n  const disabled = useMemo(() => {\n    setError('')\n    if (BNify(amount).isNaN() || BNify(amount).lte(0)) return true\n    // if (BNify(assetBalance).lte(0)) return true\n    if (BNify(amount).gt(assetBalance)){\n      setError(translate('trade.errors.insufficientFundsForAmount', {symbol: underlyingAsset?.name}))\n      return true\n    }\n    return false\n  }, [amount, assetBalance, underlyingAsset, translate])\n\n  // console.log('assetBalance', amount, assetBalance.toString(), disabled)\n\n  // Deposit\n  const deposit = useCallback((checkAllowance: boolean = true) => {\n    if (!account || disabled) return\n    if (!vault || !(\"getDepositContractSendMethod\" in vault) || !(\"getDepositParams\" in vault)) return\n    if (!vault || !(\"getAllowanceContract\" in vault)) return\n    // if (!underlyingAssetVault || !(\"contract\" in underlyingAssetVault) || !underlyingAssetVault.contract) return\n\n    ;(async() => {\n      // if (!underlyingAssetVault.contract) return\n      const allowanceContract = vault.getAllowanceContract()\n      if (!allowanceContract) return\n\n      const vaultOwner = getVaultAllowanceOwner(vault)\n      const allowance = checkAllowance ? await getAllowance(allowanceContract, account.address, vaultOwner) : BNify(amount)\n      \n      console.log('allowance', vaultOwner, account.address, allowance)\n\n      if (allowance.gte(amount)){\n        const depositParams = vault.getDepositParams(amount)\n        const depositContractSendMethod = vault.getDepositContractSendMethod(depositParams)\n        console.log('depositParams', depositParams, depositContractSendMethod)\n        // if (checkAllowance) return dispatch({type: 'SET_ACTIVE_STEP', payload: 1})\n\n        sendTransaction(vault.id, underlyingAsset?.id, depositContractSendMethod)\n      } else {\n        // Go to approve section\n        dispatch({type: 'SET_ACTIVE_STEP', payload: 1})\n      }\n    })()\n  }, [account, disabled, amount, vault, underlyingAsset, dispatch, sendTransaction])\n\n  // Update amount USD and disabled\n  useEffect(() => {\n    if (!selectAssetPriceUsd || !underlyingAsset) return\n    const assetPriceUsd = selectAssetPriceUsd(underlyingAsset.id)\n    const amountUsd = parseFloat(BNify(amount).times(assetPriceUsd).toString()) || 0\n    setAmountUsd(amountUsd)\n  }, [underlyingAsset, amount, selectAssetPriceUsd, dispatch])\n\n  // Reset amount on transaction succeeded\n  useEffect(() => {\n    if (!executeAction && activeStep === itemIndex && transaction.status === 'success'){\n      setAmount('')\n    }\n  }, [executeAction, transaction.status, activeStep, itemIndex])\n\n  // Set max balance function\n  const setMaxBalance = useCallback(() => {\n    if (!underlyingAsset?.balance) return\n    setAmount(underlyingAsset.balance.toString())\n  }, [underlyingAsset])\n\n  const getDefaultGasLimit = useCallback(async () => {\n    if (!vault || !(\"getDepositContractSendMethod\" in vault) || !(\"getDepositParams\" in vault)) return\n    const defaultGasLimit = vault.getMethodDefaultGasLimit('deposit')\n\n    // console.log('getDefaultGasLimit', underlyingAsset, assetBalance.toFixed())\n    if (!account || assetBalance.lte(0)){\n      return defaultGasLimit\n    }\n\n    const sendOptions = {\n      from: account?.address\n    }\n    const depositParams = vault.getDepositParams(assetBalance.toFixed())\n    const depositContractSendMethod = vault.getDepositContractSendMethod(depositParams)\n\n    const estimatedGasLimit = await estimateGasLimit(depositContractSendMethod, sendOptions) || defaultGasLimit\n    // console.log('DEPOSIT - estimatedGasLimit', assetBalance.toFixed(), depositParams, estimatedGasLimit)\n    return estimatedGasLimit\n  }, [account, vault, assetBalance])\n\n  // Update gas fees\n  useEffect(() => {\n    if (activeItem !== itemIndex) return\n    ;(async () => {\n      const defaultGasLimit = await getDefaultGasLimit()\n      setGasLimit(defaultGasLimit)\n    })()\n  }, [activeItem, itemIndex, getDefaultGasLimit, setGasLimit])\n\n  // Update parent amount\n  useEffect(() => {\n    if (activeItem !== itemIndex) return\n    dispatch({type: 'SET_AMOUNT', payload: amount})\n    dispatch({type: 'SET_DEFAULT_AMOUNT', payload: amount})\n    dispatch({type: 'SET_ASSET', payload: underlyingAsset})\n\n    // console.log('Deposit - executeAction', executeAction)\n    if (executeAction) {\n      // console.log('Deposit - execute deposit')\n      deposit(false)\n      dispatch({type: 'SET_EXECUTE_ACTION', payload: false})\n    }\n\n  }, [amount, activeItem, underlyingAsset, itemIndex, dispatch, executeAction, deposit])\n\n  const depositButton = useMemo(() => {\n    return account ? (\n      <Translation component={Button} translation={\"common.deposit\"} disabled={disabled} onClick={deposit} variant={'ctaFull'} />\n    ) : (\n      <ConnectWalletButton variant={'ctaFull'} />\n    )\n  }, [account, disabled, deposit])\n\n  return (\n    <AssetProvider\n      flex={1}\n      width={'100%'}\n      assetId={asset?.underlyingId}\n    >\n      <VStack\n        pt={8}\n        flex={1}\n        spacing={6}\n        height={'100%'}\n        id={'deposit-container'}\n        alignItems={'space-between'}\n        justifyContent={'flex-start'}\n      >\n        <VStack\n          flex={1}\n          spacing={6}\n          width={'100%'}\n          alignItems={'flex-start'}\n        >\n          <HStack\n            spacing={4}\n            width={'100%'}\n            alignItems={'flex-start'}\n          >\n            <Box\n              pt={8}\n            >\n              <AssetLabel assetId={asset?.id} />\n            </Box>\n            <VStack\n              spacing={1}\n              width={'100%'}\n              alignItems={'flex-start'}\n            >\n              <Card\n                px={4}\n                py={2}\n                layerStyle={'cardLight'}\n              >\n                <VStack\n                  spacing={2}\n                  alignItems={'flex-start'}\n                >\n                  <InputAmount amount={amount} amountUsd={amountUsd} setAmount={setAmount} />\n                  <HStack\n                    width={'100%'}\n                    justifyContent={'space-between'}\n                  >\n                    <HStack\n                      spacing={1}\n                    >\n                      <Translation component={Text} translation={'common.balance'} textStyle={'captionSmaller'} />\n                      <AssetProvider.Balance abbreviate={true} decimals={4} textStyle={'captionSmaller'} color={'primary'} />\n                    </HStack>\n                    <Button variant={'selector'} onClick={setMaxBalance}>MAX</Button>\n                  </HStack>\n                </VStack>\n              </Card>\n              {\n                error && <Text textStyle={'captionSmaller'} color={'orange'}>{error}</Text>\n              }\n            </VStack>\n          </HStack>\n          <DynamicActionFields assetId={asset?.id} action={'deposit'} amount={amount} amountUsd={amountUsd} />\n        </VStack>\n        <VStack\n          spacing={4}\n          id={'footer'}\n          alignItems={'flex-start'}\n        >\n          {\n            /*\n            <Card.Outline px={4} py={2}>\n              <HStack\n                spacing={1}\n              >\n                <Translation translation={'assets.assetDetails.generalData.performanceFee'} textStyle={'captionSmaller'} />\n                <AssetProvider\n                  assetId={asset?.id}\n                >\n                  <AssetProvider.PerformanceFee textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'} />\n                </AssetProvider>\n              </HStack>\n            </Card.Outline>\n            */\n          }\n          <EstimatedGasFees />\n          {depositButton}\n        </VStack>\n      </VStack>\n    </AssetProvider>\n  )\n}\nexport const Withdraw: React.FC<ActionComponentArgs> = ({ itemIndex }) => {\n  const [ amount, setAmount ] = useState('0')\n  const [ error, setError ] = useState<string>('')\n  const [ amountUsd, setAmountUsd ] = useState<number>(0)\n\n  const { account } = useWalletProvider()\n  const { searchParams } = useBrowserRouter()\n  const { dispatch, activeItem, activeStep } = useOperativeComponent()\n  const { asset, vault, underlyingAsset, translate } = useAssetProvider()\n  const { sendTransaction, setGasLimit, state: { transaction } } = useTransactionManager()\n  const { selectors: { selectAssetPriceUsd, selectVaultPrice, selectAssetBalance, selectVaultGauge, selectAssetById } } = usePortfolioProvider()\n\n  const [ getSearchParams, setSearchParams ] = useMemo(() => searchParams, [searchParams])\n  // console.log('asset', asset)\n\n  const vaultBalance = useMemo(() => {\n    if (!selectAssetBalance) return BNify(0)\n    return selectAssetBalance(vault?.id)\n  }, [selectAssetBalance, vault?.id])\n\n  const vaultGauge = useMemo(() => {\n    return asset?.id && selectVaultGauge && selectVaultGauge(asset.id)\n  }, [selectVaultGauge, asset?.id])\n\n  const assetGauge = useMemo(() => {\n    return vaultGauge && selectAssetById && selectAssetById(vaultGauge.id)\n  }, [selectAssetById, vaultGauge])\n\n  const assetBalance = useMemo(() => {\n    if (!selectAssetBalance) return BNify(0)\n    const balance = selectAssetBalance(vault?.id)\n    const vaultPrice = selectVaultPrice(vault?.id)\n    // console.log('assetBalance', balance.toString(), vaultPrice.toString())\n    return balance.times(vaultPrice)\n  }, [selectAssetBalance, selectVaultPrice, vault?.id])\n\n\n  const disabled = useMemo(() => {\n    setError('')\n    if (BNify(amount).isNaN() || BNify(amount).lte(0)) return true\n    // if (BNify(assetBalance).lte(0)) return true\n    if (BNify(amount).gt(assetBalance)){\n      setError(translate('trade.errors.insufficientFundsForAmount', {symbol: underlyingAsset?.name}))\n      return true\n    }\n    return false\n  }, [amount, assetBalance, underlyingAsset, translate])\n\n  // Withdraw\n  const withdraw = useCallback(() => {\n    if (!account || disabled) return\n    if (!vault || !(\"getWithdrawContractSendMethod\" in vault) || !(\"getWithdrawParams\" in vault)) return\n\n    ;(async() => {\n      const vaultPrice = selectVaultPrice(vault.id)\n      const amountToWithdraw = BigNumber.minimum(vaultBalance, BNify(amount).div(vaultPrice))\n      const withdrawParams = vault.getWithdrawParams(amountToWithdraw)\n      const withdrawContractSendMethod = vault.getWithdrawContractSendMethod(withdrawParams)\n      console.log('withdrawParams', withdrawParams, withdrawContractSendMethod)\n      sendTransaction(vault.id, vault.id, withdrawContractSendMethod)\n    })()\n  }, [account, disabled, amount, vault, vaultBalance, selectVaultPrice, sendTransaction])\n\n  // Reset amount on transaction succeeded\n  useEffect(() => {\n    if (activeStep === itemIndex && transaction.status === 'success'){\n      setAmount('')\n    }\n  }, [transaction.status, activeStep, itemIndex])\n\n  // Update amount USD and disabled\n  useEffect(() => {\n    if (!selectAssetPriceUsd || !selectVaultPrice || !underlyingAsset || !vault) return\n    const assetPriceUsd = selectAssetPriceUsd(underlyingAsset.id)\n    const vaultPrice = selectVaultPrice(vault.id)\n    const amountUsd = parseFloat(BNify(amount).times(assetPriceUsd).toString()) || 0\n    // console.log('withdraw', BNify(amount).toString(), BNify(assetPriceUsd).toString(), BNify(vaultPrice).toString(), amountUsd.toString())\n    setAmountUsd(amountUsd)\n  }, [underlyingAsset, vault, amount, selectVaultPrice, selectAssetPriceUsd, dispatch])\n\n  // Set max balance function\n  const setMaxBalance = useCallback(() => {\n    if (!assetBalance) return\n    setAmount(assetBalance.toString())\n  }, [assetBalance])\n\n  const getDefaultGasLimit = useCallback(async () => {\n    if (!vault || !(\"getWithdrawContractSendMethod\" in vault) || !(\"getWithdrawParams\" in vault)) return\n    \n    const defaultGasLimit = vault.getMethodDefaultGasLimit('withdraw')\n    if (!account || vaultBalance.lte(0)){\n      return defaultGasLimit\n    }\n\n    const sendOptions = {\n      from: account?.address\n    }\n    const withdrawParams = vault.getWithdrawParams(vaultBalance.toFixed())\n    const withdrawContractSendMethod = vault.getWithdrawContractSendMethod(withdrawParams)\n\n    const estimatedGasLimit = await estimateGasLimit(withdrawContractSendMethod, sendOptions) || defaultGasLimit\n    // console.log('WITHDRAW - estimatedGasLimit', estimatedGasLimit)\n    return estimatedGasLimit\n  }, [account, vaultBalance, vault])\n\n  // Update gas fees\n  useEffect(() => {\n    if (activeItem !== itemIndex) return\n    ;(async () => {\n      const defaultGasLimit = await getDefaultGasLimit()\n      setGasLimit(defaultGasLimit)\n    })()\n  }, [activeItem, itemIndex, getDefaultGasLimit, setGasLimit])\n\n  // Update parent amount\n  useEffect(() => {\n    if (activeItem !== itemIndex) return\n    dispatch({type: 'SET_ASSET', payload: asset})\n\n    if (!selectVaultPrice || !vault) return\n    const vaultPrice = selectVaultPrice(vault.id)\n    dispatch({type: 'SET_AMOUNT', payload: BNify(amount).toString()})\n    dispatch({type: 'SET_DEFAULT_AMOUNT', payload: BNify(amount).toString()})\n  }, [vault, asset, amount, selectVaultPrice, activeItem, itemIndex, dispatch, withdraw])\n\n  const withdrawButton = useMemo(() => {\n    return account ? (\n      <Translation component={Button} translation={\"common.withdraw\"} disabled={disabled} onClick={withdraw} variant={'ctaFull'} />\n    ) : (\n      <ConnectWalletButton variant={'ctaFull'} />\n    )\n  }, [account, disabled, withdraw])\n\n  const vaultMessages = useMemo((): VaultMessages | undefined => {\n    return vault && (\"messages\" in vault) ? vault.messages : undefined\n  }, [vault])\n\n  return (\n    <AssetProvider\n      flex={1}\n      width={'100%'}\n      assetId={asset?.id}\n    >\n      <VStack\n        pt={8}\n        flex={1}\n        spacing={6}\n        width={'100%'}\n        height={'100%'}\n        id={'withdraw-container'}\n        alignItems={'space-between'}\n        justifyContent={'flex-start'}\n      >\n        <VStack\n          flex={1}\n          spacing={6}\n          width={'100%'}\n          alignItems={'flex-start'}\n        >\n          <HStack\n            spacing={4}\n            width={'100%'}\n            alignItems={'flex-start'}\n          >\n            <Box\n              pt={8}\n            >\n              <AssetLabel assetId={asset?.id} />\n            </Box>\n            <VStack\n              spacing={1}\n              width={'100%'}\n              alignItems={'flex-start'}\n            >\n              <Card\n                px={4}\n                py={2}\n                layerStyle={'cardLight'}\n              >\n                <VStack\n                  spacing={2}\n                  alignItems={'flex-start'}\n                >\n                  <InputAmount amount={amount} amountUsd={amountUsd} setAmount={setAmount} />\n                  <HStack\n                    width={'100%'}\n                    justifyContent={'space-between'}\n                  >\n                    <HStack\n                      spacing={1}\n                    >\n                      <Translation component={Text} translation={'common.balance'} textStyle={'captionSmaller'} />\n                      <AssetProvider.VaultBalance abbreviate={true} decimals={4} textStyle={'captionSmaller'} color={'primary'} />\n                    </HStack>\n                    <Button variant={'selector'} onClick={setMaxBalance}>MAX</Button>\n                  </HStack>\n                </VStack>\n              </Card>\n              {\n                error && <Text textStyle={'captionSmaller'} color={'orange'}>{error}</Text>\n              }\n            </VStack>\n          </HStack>\n          {\n            assetBalance.gt(0) && vaultMessages?.withdraw ? (\n              <Card.Dark\n                p={2}\n                border={0}\n              >\n                <Translation textStyle={'captionSmaller'} translation={vaultMessages.withdraw} textAlign={'center'} />\n              </Card.Dark>\n            ) : BNify(assetGauge?.balance).gt(0) && (\n              <Card.Dark\n                py={2}\n                pl={3}\n                pr={2}\n                border={0}\n              >\n                <HStack\n                  spacing={3}\n                  width={'full'}\n                >\n                  <Translation textStyle={'captionSmaller'} translation={'trade.actions.withdraw.messages.unstakeFromGauge'} textAlign={'left'} />\n                  <Translation component={Button} translation={`defi.goToGauge`} fontSize={'xs'} height={'auto'} width={'auto'} py={3} px={7} onClick={ () => setSearchParams(`?tab=gauge`) } />\n                </HStack>\n              </Card.Dark>\n            )\n          }\n          <DynamicActionFields assetId={asset?.id} action={'withdraw'} amount={amount} amountUsd={amountUsd} />\n        </VStack>\n        <VStack\n          spacing={4}\n          id={'footer'}\n          alignItems={'flex-start'}\n        >\n          {\n            /*\n            <Card.Outline px={4} py={2}>\n              <HStack\n                spacing={1}\n              >\n                <Translation translation={'assets.assetDetails.generalData.performanceFee'} textStyle={'captionSmaller'} />\n                <AssetProvider\n                  assetId={asset?.id}\n                >\n                  <AssetProvider.PerformanceFee textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'} />\n                </AssetProvider>\n              </HStack>\n            </Card.Outline>\n            */\n          }\n          <EstimatedGasFees />\n          {withdrawButton}\n        </VStack>\n      </VStack>\n    </AssetProvider>\n  )\n}\n\ntype NavBarProps = {\n  height?: string\n  goBack?: Function\n  close?: Function\n} & TranslationProps\n\nconst NavBar: React.FC<NavBarProps> = ({ goBack, close, height, ...props }) => {\n  return (\n    <HStack\n      width={'100%'}\n      position={'relative'}\n      alignItems={'center'}\n      height={height || '24px'}\n      justifyContent={'flex-start'}\n    >\n      {\n        goBack && (\n          <Flex\n            zIndex={1}\n            position={'relative'}\n          >\n            <MdKeyboardArrowLeft\n              size={24}\n              onClick={() => goBack()}\n              style={{cursor:'pointer'}}\n            />\n          </Flex>\n        )\n      }\n      <Flex\n        zIndex={0}\n        width={'100%'}\n        justifyContent={'center'}\n        position={goBack ? 'absolute' : 'relative'}\n      >\n        <Translation component={Text} textStyle={'ctaStatic'} aria-selected={true} {...props} />\n      </Flex>\n      {\n        close && (\n          <Flex\n            top={0}\n            right={0}\n            zIndex={1}\n            position={'absolute'}\n          >\n            <MdOutlineClose\n              size={24}\n              onClick={() => close()}\n              style={{cursor: 'pointer'}}\n            />\n          </Flex>\n        )\n      }\n    </HStack>\n  )\n}\n\ntype TransactionStatusProps = {\n  goBack: Function\n}\n\nconst TransactionStatus: React.FC<TransactionStatusProps> = ({ goBack }) => {\n  const countTimeoutId = useRef<any>(null)\n  const { searchParams } = useBrowserRouter()\n  const { chainId, explorer } = useWalletProvider()\n  const [ progressValue, setProgressValue ] = useState<number>(0)\n  // const [ countTimeoutId, setCountTimeoutId ] = useState<any>(null)\n  const [ progressMaxValue, setProgressMaxValue ] = useState<number>(1)\n  const { underlyingAsset, theme, translate, asset } = useAssetProvider()\n  const [ remainingTime, setRemainingTime ] = useState<number | null>(null)\n  const [ targetTimestamp, setTargetTimestamp ] = useState<number | null>(null)\n  const { amount, actionType, baseActionType, activeStep, activeItem } = useOperativeComponent()\n  const { selectors: { selectAssetById, selectVaultById, selectVaultGauge } } = usePortfolioProvider()\n  const { state: { transaction: transactionState }, retry, cleanTransaction } = useTransactionManager()\n\n  const [ getSearchParams, setSearchParams ] = useMemo(() => searchParams, [searchParams])\n\n  const vault = useMemo(() => {\n    return asset?.id && selectVaultById && selectVaultById(asset.id)\n  }, [selectVaultById, asset?.id])\n\n  const vaultGauge = useMemo(() => {\n    return asset?.id && selectVaultGauge && selectVaultGauge(asset.id)\n  }, [selectVaultGauge, asset?.id])\n\n  const startCountDown = useCallback((targetTimestamp: number) => {\n    // console.log('TransactionStatus - startCountDown', targetTimestamp, transactionState.status, transactionState)\n    if (!targetTimestamp || !transactionState.status || transactionState.status!=='pending') return\n\n    const newRemainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n    if (!remainingTime || newRemainingTime > remainingTime) {\n      setRemainingTime(newRemainingTime)\n    }\n\n    if (newRemainingTime<=0) return\n    countTimeoutId.current = setTimeout(() => {\n      startCountDown(targetTimestamp)\n    }, 1000)\n    // setCountTimeoutId(timeoutId)\n  }, [remainingTime, transactionState])\n\n  // Handle transaction succeded or failed\n  useEffect(() => {\n    // console.log('transactionState.status', transactionState.status, progressValue, progressMaxValue)\n    if (!transactionState.status || !['success','failed'].includes(transactionState.status)) return\n    if (countTimeoutId.current) {\n      clearTimeout(countTimeoutId.current)\n    }\n    setRemainingTime(0)\n    countTimeoutId.current = null\n    setProgressValue(progressMaxValue)\n  // eslint-disable-next-line\n  }, [transactionState?.status, setProgressValue, progressMaxValue])\n\n  // Set progress max value\n  useEffect(() => {\n    if (!transactionState?.estimatedTime || !transactionState?.timestamp || transactionState?.status !== 'pending' || targetTimestamp) return\n\n    const progressMaxValue = (transactionState?.estimatedTime*1000)\n    const newTargetTimestamp = +transactionState?.timestamp+(transactionState?.estimatedTime*1000)\n    setTargetTimestamp(newTargetTimestamp)\n    setProgressMaxValue(progressMaxValue)\n\n    // This will start the circular progress\n    setProgressValue(progressMaxValue)\n\n    startCountDown(newTargetTimestamp)\n    // console.log('START COUNTDOWN', newTargetTimestamp, transactionState)\n  }, [transactionState, targetTimestamp, startCountDown])\n\n  const resetAndGoBack = useCallback((resetStep: boolean = false) => {\n    if (transactionState?.status === 'pending') return\n    cleanTransaction()\n    setProgressValue(0)\n    setRemainingTime(null)\n    setProgressMaxValue(1)\n    // setCountTimeoutId(null)\n    setTargetTimestamp(null)\n\n    if (countTimeoutId.current) {\n      clearTimeout(countTimeoutId.current)\n    }\n    countTimeoutId.current = null\n\n    return goBack(resetStep)\n  }, [transactionState?.status, cleanTransaction, goBack])\n\n  // Handle transaction reset from another component\n  useEffect(() => {\n    // console.log('goBackAndReset?', activeItem, transactionState?.status, !transactionState?.status)\n    if (!transactionState?.status && activeItem){\n      resetAndGoBack(false)\n    }\n  }, [transactionState?.status, activeItem, resetAndGoBack])\n\n  const txActionType = useMemo(() => {\n    return transactionState.actionType || actionType\n  }, [actionType, transactionState.actionType])\n\n  const amountToDisplay = useMemo(() => {\n    return transactionState.amount ? abbreviateNumber(transactionState.amount, 8) : (amount === MAX_ALLOWANCE ? translate('trade.unlimited') : abbreviateNumber(amount, 8))\n  }, [amount, translate, transactionState.amount])\n\n  const assetToDisplay = useMemo(() => {\n    if (!selectAssetById) return underlyingAsset?.name\n    const asset = selectAssetById(transactionState.assetId)\n    return asset?.name || underlyingAsset?.name\n  }, [selectAssetById, underlyingAsset?.name, transactionState.assetId])\n\n  const body = useMemo(() => {\n    switch (transactionState?.status) {\n      case 'pending':\n        return (\n          <Translation component={Text} translation={remainingTime===0 ? `modals.status.body.long` : `modals.${txActionType}.status.pending`} textStyle={['heading', 'h3']} textAlign={'center'} />\n        )\n      case 'success':\n        // const amountToDisplay = amount === MAX_ALLOWANCE ? translate('trade.unlimited') : abbreviateNumber(amount, 8)\n        return (\n          <VStack\n            spacing={2}\n          >\n            <Translation component={Text} translation={`modals.${txActionType}.status.success`} params={{asset: assetToDisplay, amount: amountToDisplay }} textStyle={['heading', 'h3']} textAlign={'center'} />\n            {\n              vault?.messages?.actions?.[txActionType] && (\n                <Translation pb={2} translation={vault?.messages?.actions?.[txActionType]} textStyle={'captionSmall'} textAlign={'center'} />\n              )\n            }\n            {\n              txActionType === 'deposit' && vaultGauge ? (\n                <VStack\n                  spacing={4}\n                >\n                  <Translation translation={'trade.depositGauge'} textAlign={'center'} />\n                  <Translation component={Button} translation={`trade.actions.${txActionType}.status.success.buttonGauge`} onClick={() => { resetAndGoBack(); setTimeout(() => setSearchParams(`?tab=gauge`), 1000) }} variant={'ctaFull'} />\n                  <Translation component={Button} translation={`trade.actions.${txActionType}.status.success.button`} onClick={() => { resetAndGoBack() }} variant={'ctaPrimaryOutline'} width={'100%'} />\n                  {/*<Translation<LinkProps> component={Link} translation={`trade.actions.${txActionType}.status.success.button`} textStyle={['captionSmall', 'link', 'bold']}  onClick={() => resetAndGoBack()} />*/}\n                </VStack>\n              ) : activeStep ? (\n                <Translation component={Button} translation={`common.${baseActionType}`} onClick={() => resetAndGoBack(true)} variant={'ctaFull'} />\n              ) : (\n                <Translation component={Button} translation={`trade.actions.${txActionType}.status.success.button`} onClick={() => resetAndGoBack()} variant={'ctaFull'} />\n              )\n            }\n          </VStack>\n        )\n      case 'failed':\n        return (\n          <>\n            <Translation component={Text} translation={`modals.${txActionType}.status.failed`} params={{asset: assetToDisplay, amount: abbreviateNumber }} textStyle={['heading', 'h3']} textAlign={'center'} />\n            <Translation component={Text} translation={`modals.status.body.failed`} params={{asset: assetToDisplay, amount: abbreviateNumber }} textStyle={'captionSmall'} textAlign={'center'} />\n            <Translation component={Button} translation={\"common.retry\"} leftIcon={<MdOutlineRefresh size={24} />} onClick={() => { retry() }} variant={'ctaFull'} />\n            <Translation component={Text} translation={`common.cancel`} textStyle={['cta', 'link']} onClick={() => resetAndGoBack()} />\n          </>\n        )\n      default:\n        return null\n    }\n  }, [transactionState?.status, vault, txActionType, assetToDisplay, amountToDisplay, remainingTime, activeStep, baseActionType, resetAndGoBack, retry, setSearchParams, vaultGauge])\n\n  const isLongTransaction = useMemo(() => {\n    return !!transactionState?.estimatedTime && transactionState?.status === 'pending' && remainingTime===0\n  }, [transactionState?.estimatedTime, transactionState?.status, remainingTime])\n\n  const isIndeterminate = useMemo(() => {\n    if (transactionState?.status && ['success', 'failed'].includes(transactionState?.status)) return false\n    return !transactionState?.estimatedTime || isLongTransaction\n  }, [transactionState, isLongTransaction])\n\n  const circularProgressColor = useMemo(() => {\n    if (!transactionState?.status || isIndeterminate) return 'blue.400'\n    return ['success', 'pending'].includes(transactionState?.status) ? 'green.400' : 'red.400'\n  }, [transactionState?.status, isIndeterminate])\n\n  const circularProgress = useMemo(() => {\n    return (\n      <>\n        <Box\n          height={5}\n        >\n          <Translation component={Text} translation={transactionState?.status === 'pending' ? (transactionState?.estimatedTime ? \"modals.status.estimatedTime\" : \"modals.status.calculateEstimatedTime\") : ''} textStyle={'captionSmaller'} textAlign={'center'} />\n        </Box>\n        <Box\n          width={'125px'}\n          height={'125px'}\n          bg={'card.bgLight'}\n          borderRadius={'50%'}\n          position={'relative'}\n        >\n          <CircularProgress\n            size={145}\n            top={'-10px'}\n            left={'-10px'}\n            thickness={'5px'}\n            position={'absolute'}\n            value={progressValue}\n            max={progressMaxValue}\n            trackColor={'card.bgLight'}\n            color={circularProgressColor}\n            isIndeterminate={isIndeterminate}\n            sx={{\n              \".chakra-progress__indicator\": {\n                transitionTimingFunction: 'ease',\n                transitionProperty: 'stroke-dasharray',\n                transitionDuration: transactionState?.status === 'pending' && transactionState?.estimatedTime ? `${transactionState?.estimatedTime}s` : '0.6s'\n              }\n            }}\n          >\n            {\n              transactionState?.status === 'pending' ? \n                !!remainingTime && <CircularProgressLabel textStyle={['bold', 'h2']}>{remainingTime > 3600 ? `>1h` : ( remainingTime > 1800 ? `>30m` : `${remainingTime}s`)}</CircularProgressLabel>\n              : transactionState?.status === 'success' ? (\n                <CircularProgressLabel\n                  display={'flex'}\n                  alignItems={'center'}\n                  justifyContent={'center'}\n                >\n                  <MdOutlineDone size={50} color={theme.colors.green['400']} />\n                </CircularProgressLabel>\n              ) : transactionState?.status === 'failed' && (\n                <CircularProgressLabel\n                  display={'flex'}\n                  alignItems={'center'}\n                  justifyContent={'center'}\n                >\n                  <MdOutlineClose size={50} color={theme.colors.red['400']} />\n                </CircularProgressLabel>\n              )\n            }\n          </CircularProgress>\n        </Box>\n      </>\n    )\n  }, [transactionState?.status, transactionState?.estimatedTime, isIndeterminate, circularProgressColor, progressMaxValue, remainingTime, progressValue, theme])\n\n  const navBar = useMemo(() => {\n    const goBack = transactionState?.status !== 'pending' && resetAndGoBack\n    return (\n      <NavBar goBack={goBack ? () => goBack() : undefined} translation={`modals.status.header.${transactionState?.status}`} />\n    )\n  }, [transactionState?.status, resetAndGoBack])\n\n  return (\n    <>\n      {navBar}\n      <Flex\n        p={14}\n        flex={1}\n        width={'100%'}\n      >\n        <VStack\n          spacing={4}\n        >\n          {circularProgress}\n          {body}\n        </VStack>\n      </Flex>\n      {\n        transactionState?.hash && (\n          <HStack\n            spacing={1}\n            width={'100%'}\n            justifyContent={'center'}\n          >\n            <Translation<LinkProps> component={Link} translation={`defi.viewOnChain`} textStyle={'link'} fontSize={'sm'} fontWeight={700} isExternal href={getExplorerTxUrl(chainId, explorer, transactionState.hash)} />\n          </HStack>\n        )\n      }\n    </>\n  )\n}\n\ntype TransactionSpeedSelectorProps = {\n  save: Function\n}\n\nconst TransactionSpeedSelector: React.FC<TransactionSpeedSelectorProps> = ({ save }) => {\n  const { state: { estimatedFeesUsd, estimatedTimes, gasPrices, transactionSpeed: currentTransactionSpeed}, setTransactionSpeed } = useTransactionManager()\n  return (\n    <VStack\n      p={4}\n      flex={1}\n      width={'100%'}\n      justifyContent={'space-between'}\n    >\n      <NavBar height={'auto'} mb={10} translation={'common.transactionSpeed'} />\n      <VStack\n        p={0}\n        flex={1}\n        spacing={2}\n        width={'100%'}\n        justifyContent={'flex-start'}\n      >\n        {\n          (Object.keys(TransactionSpeed) as Array<keyof typeof TransactionSpeed>).map( (transactionSpeedKey: keyof typeof TransactionSpeed) => {\n            const transactionSpeed: TransactionSpeed = TransactionSpeed[transactionSpeedKey]\n            const isActive = currentTransactionSpeed === transactionSpeed\n            return (\n              <Card.Outline\n                px={4}\n                py={4}\n                style={{\n                  cursor:'pointer'\n                }}\n                width={'100%'}\n                aria-selected={isActive}\n                layerStyle={['cardInteractive']}\n                key={`transactionSpeed_${transactionSpeed}`} \n                bg={isActive ? 'card.bgLight' : 'transparent'}\n                onClick={() => setTransactionSpeed(transactionSpeed)}\n              >\n                <HStack\n                  spacing={4}\n                  width={'100%'}\n                  alignItems={'center'}\n                >\n                  <HStack\n                    spacing={2}\n                    width={'40%'}\n                    alignItems={'center'}\n                  >\n                    <Radio colorScheme={'blue'} isChecked={isActive}></Radio>\n                    <HStack\n                      flex={1}\n                      spacing={1}\n                      alignItems={'center'}\n                    >\n                      <Translation component={Text} whiteSpace={'nowrap'} textStyle={['tableCell', 'primary']} translation={`modals.send.sendForm.${transactionSpeed}`} />\n                      <SkeletonText noOfLines={1} isLoaded={!!gasPrices} width={'100%'}>\n                        <Amount prefix={'('} suffix={')'} decimals={0} textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'} value={gasPrices?.[transactionSpeed]}></Amount>\n                      </SkeletonText>\n                    </HStack>\n                  </HStack>\n                  <VStack\n                    spacing={2}\n                    width={'25%'}\n                    alignItems={'flex-start'}\n                    justifyContent={'flex-start'}\n                  >\n                    <Translation component={Text} textStyle={'captionSmall'} translation={`common.gasFee`} />\n                    <SkeletonText noOfLines={1} isLoaded={!!estimatedFeesUsd} width={'100%'}>\n                      <Amount.Usd textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'} prefix={TILDE} value={estimatedFeesUsd?.[transactionSpeed]}></Amount.Usd>\n                    </SkeletonText>\n                  </VStack>\n                  <VStack\n                    spacing={2}\n                    width={'35%'}\n                    alignItems={'flex-start'}\n                    justifyContent={'flex-start'}\n                  >\n                    <Translation component={Text} textStyle={'captionSmall'} translation={`modals.status.estimatedTime`} />\n                    <SkeletonText noOfLines={1} isLoaded={!!estimatedTimes} width={'100%'}>\n                      <Text textStyle={['captionSmaller']} fontWeight={'600'} color={'primary'}>{formatTime(estimatedTimes?.[transactionSpeed])}</Text>\n                    </SkeletonText>\n                  </VStack>\n                </HStack>\n              </Card.Outline>\n            )\n          })\n        }\n      </VStack>\n      <Translation component={Button} translation={\"common.close\"} onClick={() => save()} variant={'ctaFull'} />\n    </VStack>\n  )\n}\n\nexport type ActionStep = {\n  type: string\n  label: string\n  component: any\n}\n\nexport type OperativeComponentAction = ActionStep & {\n  steps: ActionStep[]\n}\n\n/*\nconst actions: OperativeComponentAction[] = [\n  {\n    type: 'deposit',\n    component: Deposit,\n    label: 'common.deposit',\n    steps: [\n      {\n        type: 'approve',\n        component: Approve,\n        label:'modals.approve.header',\n      }\n    ]\n  },\n  {\n    type: 'withdraw',\n    label: 'common.withdraw',\n    component: Withdraw,\n    steps: []\n  }\n]\n*/\n\ninterface OperativeComponentContextProps {\n  amount: string\n  activeStep: number\n  dispatch: Function\n  actionType: string\n  activeItem: number\n  asset: Asset | null\n  defaultAmount: string\n  executeAction: boolean\n  baseActionType: string\n}\n\nconst initialState: OperativeComponentContextProps = {\n  amount: '',\n  asset: null,\n  activeStep: 0,\n  activeItem: 0,\n  actionType: '',\n  defaultAmount: '',\n  baseActionType: '',\n  dispatch: () => {},\n  executeAction: false\n}\n\nconst reducer = (state: OperativeComponentContextProps, action: ReducerActionTypes) => {\n  switch (action.type){\n    case 'SET_AMOUNT':\n      return {...state, amount: action.payload}\n    case 'SET_ASSET':\n      return {...state, asset: action.payload}\n    case 'SET_EXECUTE_ACTION':\n      // console.log('SET_EXECUTE_ACTION', action.payload)\n      return {...state, executeAction: action.payload}\n    case 'SET_DEFAULT_AMOUNT':\n      return {...state, defaultAmount: action.payload}\n    case 'SET_ACTION_TYPE':\n      return {...state, actionType: action.payload}\n    case 'SET_BASE_ACTION_TYPE':\n      return {...state, baseActionType: action.payload}\n    case 'SET_ACTIVE_STEP':\n      return {...state, activeStep: action.payload}\n    default:\n      return {...state}\n  }\n}\n\nconst OperativeComponentContext = createContext<OperativeComponentContextProps>(initialState)\nconst useOperativeComponent = () => useContext(OperativeComponentContext)\n\ntype OperativeComponentArgs = {\n  assetId?: AssetId\n  actions: OperativeComponentAction[]\n} & CardProps\n\nexport const OperativeComponent: React.FC<OperativeComponentArgs> = ({\n  assetId,\n  actions,\n  ...cardProps\n}) => {\n  const intervalId = useRef<any>(null)\n  const [ activeItem, setActiveItem ] = useState<number>(0)\n  const [ actionIndex, setActionIndex ] = useState<number>(0)\n  const [ state, dispatch ] = useReducer(reducer, initialState)\n  const [ transactionSpeedSelectorOpened, setTransactionSpeedSelectorOpened ] = useState<boolean>(false)\n\n  const { underlyingAsset, translate } = useAssetProvider()\n  const { selectors: { selectAssetById } } = usePortfolioProvider()\n  const { state: { gasPrice, transaction: transactionState }, retry, cleanTransaction, updateGasPrices } = useTransactionManager()\n\n  const handleActionChange = (index: number) => {\n    setActionIndex(index)\n  }\n\n  const activeAction = useMemo(() => actions[actionIndex], [actions, actionIndex])\n  const activeStep = useMemo(() => !state.activeStep ? activeAction : activeAction.steps[state.activeStep-1], [activeAction, state.activeStep])\n  const ActionComponent = useMemo((): React.FC<ActionComponentArgs> | null => actions[actionIndex].component, [actions, actionIndex])\n\n  // console.log('actionIndex', actionIndex)\n\n  useEffect(() => {\n    setActiveItem(state.activeStep)\n  }, [state.activeStep])\n\n  useEffect(() => {\n\n    if (intervalId.current){\n      clearInterval(intervalId.current)\n      intervalId.current = null\n    }\n\n    intervalId.current = setInterval(() => {\n      updateGasPrices()\n    }, 20000)\n\n    return () => {\n      if (intervalId.current){\n      clearInterval(intervalId.current)\n      intervalId.current = null\n    }\n    }\n  }, [updateGasPrices])\n\n  useEffect(() => {\n    const actionType = activeStep ? activeStep.type : activeAction.type\n    dispatch({type:'SET_ACTION_TYPE', payload: actionType})\n    dispatch({type:'SET_BASE_ACTION_TYPE', payload: activeAction.type})\n  }, [activeAction, activeStep])\n\n  const actionType = useMemo(() => {\n    return transactionState.actionType || state.actionType\n  }, [state.actionType, transactionState.actionType])\n\n  const amountToDisplay = useMemo(() => {\n    return transactionState.amount ? transactionState.amount : (state.amount === MAX_ALLOWANCE ? translate('trade.unlimited') : parseFloat(state.amount))\n  }, [state.amount, translate, transactionState.amount])\n\n  const assetToDisplay = useMemo(() => {\n    if (!selectAssetById) return state.asset?.name\n    const asset = selectAssetById(transactionState.assetId)\n    return asset?.name || state.asset?.name\n  }, [selectAssetById, state.asset, transactionState.assetId])\n\n  useEffect(() => {\n    // console.log('TransactionProcess', transactionState)\n    const firstProcessIndex = activeAction.steps.length+1\n    switch (transactionState?.status) {\n      case 'created':\n        return setActiveItem(firstProcessIndex)\n      case 'pending':\n        return setActiveItem(firstProcessIndex+1)\n      case 'failed':\n        switch (transactionState.error?.code) {\n          case 4001:\n            cleanTransaction()\n            return setActiveItem(state.activeStep)\n          default:\n            return setActiveItem(firstProcessIndex+1)\n          break\n        }\n      case 'success':\n        setActiveItem(firstProcessIndex+1)\n        // If internal step is active return to step 0\n        if (state.activeStep) {\n          // Automatically execute action after going back\n          dispatch({type: 'SET_EXECUTE_ACTION', payload: true})\n          // setTimeout(() => {\n          //   dispatch({type:'SET_ACTIVE_STEP', payload: 0})\n          // },2000)\n        }\n        // return activeAction.onComplete()\n      break;\n      default:\n      break;\n    }\n  }, [transactionState, cleanTransaction, activeAction, state.activeStep])\n\n  const transationSpeedToggler = useMemo(() => {\n    if (activeItem > activeAction.steps.length) return null\n    return transactionSpeedSelectorOpened ? (\n      <Flex\n        top={5}\n        right={8}\n        zIndex={11}\n        position={'absolute'}\n      >\n        <MdOutlineClose\n          size={24}\n          style={{cursor: 'pointer'}}\n          onClick={() => setTransactionSpeedSelectorOpened( prevValue => !prevValue )}\n        />\n      </Flex>\n    ) :  (\n      <Button\n        p={2}\n        right={4}\n        zIndex={11}\n        borderRadius={8}\n        variant={'ctaBlue'}\n        position={'absolute'}\n        onClick={() => setTransactionSpeedSelectorOpened( prevValue => !prevValue )}\n      >\n        <HStack\n          spacing={1}\n        >\n          <MdOutlineLocalGasStation color={'primary'} size={24} />\n          <Amount abbreviate={false} textStyle={'titleSmall'} color={'primary'} value={gasPrice} />\n        </HStack>\n      </Button>\n    )\n  }, [activeAction, activeItem, gasPrice, transactionSpeedSelectorOpened, setTransactionSpeedSelectorOpened])\n\n  const goBack = useCallback((resetStep: boolean = false) => {\n    if (resetStep){\n      return dispatch({type: 'SET_ACTIVE_STEP', payload: 0})\n    }\n    return setActiveItem(state.activeStep)\n  }, [dispatch, setActiveItem, state.activeStep])\n\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <OperativeComponentContext.Provider value={{...state, activeItem, dispatch}}>\n        <Card.Flex\n          p={4}\n          width={'100%'}\n          overflow={'hidden'}\n          minHeight={'590px'}\n          direction={'column'}\n          position={'relative'}\n          alignItems={'flex-start'}\n          id={'operative-component'}\n          {...cardProps}\n        >\n          {transationSpeedToggler}\n          {\n            transactionSpeedSelectorOpened && (\n              <VStack\n                top={0}\n                left={0}\n                flex={1}\n                zIndex={10}\n                bg={'card.bg'}\n                width={'100%'}\n                height={'100%'}\n                position={'absolute'}\n                id={'transaction-speed-selector'}\n              >\n                <TransactionSpeedSelector save={() => setTransactionSpeedSelectorOpened(false)} />\n              </VStack>\n            )\n          }\n          <ChakraCarousel\n            gap={0}\n            activeItem={activeItem}\n          >\n            <Flex\n              flex={1}\n              width={'100%'}\n              direction={'column'}\n              alignItems={'flex-start'}\n            >\n              <HStack\n                alignItems={'center'}\n                justifyContent={'space-between'}\n                id={'operative-component-header'}\n              >\n                <Tabs\n                  defaultIndex={0}\n                  variant={'button'}\n                  onChange={handleActionChange}\n                >\n                  <TabList>\n                    {\n                      actions.map( (action, index) => (\n                        <Translation key={`action_${index}`} mr={2} component={Tab} translation={action.label} />\n                      ))\n                    }\n                  </TabList>\n                </Tabs>\n              </HStack>\n              <Flex\n                flex={1}\n                width={'100%'}\n              >\n                {!!ActionComponent && <ActionComponent itemIndex={0} />}\n              </Flex>\n            </Flex>\n            {\n              actions[actionIndex].steps.map((step, index) => {\n                const StepComponent = step.component\n                return (\n                  <StepComponent key={`step_${index}`} itemIndex={index+1} goBack={() => dispatch({type:'SET_ACTIVE_STEP', payload: index})} />\n                )\n              })\n            }\n            <VStack\n              flex={1}\n              spacing={0}\n              id={'confirm-on-wallet'}\n              alignItems={'flex-start'}\n            >\n              <NavBar goBack={() => setActiveItem(state.activeStep) } translation={`modals.confirm.${actionType}.header`} />\n              <Center\n                p={14}\n                flex={1}\n                width={'100%'}\n              >\n                <VStack\n                  spacing={6}\n                >\n                  <MdOutlineAccountBalanceWallet size={72} />\n                  <Translation component={Text} translation={\"trade.confirmTransactionWallet\"} textStyle={['heading', 'h3']} textAlign={'center'} />\n                  <VStack\n                    spacing={1}\n                  >\n                    <Translation component={Text} translation={`modals.${actionType}.status.confirm`} params={{}} textStyle={'captionSmall'} textAlign={'center'} />\n                    <HStack>\n                      <Amount textStyle={'bold'} value={amountToDisplay} minPrecision={parseFloat(amountToDisplay)<1 ? 5 : 3} suffix={` ${assetToDisplay}`}></Amount>\n                    </HStack>\n                  </VStack>\n                </VStack>\n              </Center>\n              <HStack\n                spacing={1}\n                width={'100%'}\n                justifyContent={'center'}\n              >\n                <Translation component={Text} translation={`trade.transactionDontAppear`} textStyle={'captionSmall'} />\n                <Translation component={Text} translation={`common.retry`} textStyle={['captionSmall', 'link', 'bold']} onClick={() => retry()} />\n              </HStack>\n            </VStack>\n\n            <VStack\n              flex={1}\n              spacing={0}\n              alignItems={'flex-start'}\n              id={'transaction-status'}\n            >\n              <TransactionStatus goBack={goBack} />\n            </VStack>\n          </ChakraCarousel>\n        </Card.Flex>\n      </OperativeComponentContext.Provider>\n    </AssetProvider>\n  )\n}"],"names":["AssetLabel","assetId","size","textProps","AssetProvider","wrapFlex","alignItems","justifyContent","textStyle","fontSize","whiteSpace","InputAmount","inputHeight","amount","amountUsd","setAmount","useAssetProvider","asset","underlyingAsset","usePortfolioProvider","selectors","selectAssetPriceUsd","selectVaultPrice","amountUsdToDisplay","useMemo","BNify","assetPriceUsd","id","vaultPrice","type","parseFloat","times","toString","width","height","flex","placeholder","variant","value","onChange","target","Math","max","Amount","abbreviateThresold","color","prefix","bnOrZero","Approve","goBack","itemIndex","account","children","useWalletProvider","useOperativeComponent","defaultAmount","dispatch","activeItem","useState","vault","translate","theme","allowanceModeExact","setAllowanceModeExact","amountToApprove","setAmountToApprove","useTransactionManager","sendTransaction","setGasLimit","useEffect","getDefaultGasLimit","useCallback","sendOptions","from","address","allowanceParams","getAllowanceParams","MAX_ALLOWANCE","allowanceContractSendMethod","getAllowanceContractSendMethod","estimateGasLimit","estimatedGasLimit","approve","console","log","payload","defaultGasLimit","NavBar","translation","params","name","p","pt","spacing","Translation","component","Text","textAlign","py","borderTop","colors","divider","borderBottom","onClick","e","isChecked","checked","Card","px","layerStyle","Button","EstimatedGasFees","useTheme","chainToken","state","transactionSpeed","estimatedFees","estimatedFeesUsd","gasFee","gasFeeUsd","ctaDisabled","suffix","fontWeight","TILDE","symbol","decimals","DynamicActionField","field","action","vaultFunctionsHelper","helpers","selectAssetById","selectVaultById","selectVaultGauge","vaultGauge","assetGauge","newTrancheTvl","tvl","plus","newApr","totalTvl","getVaultNewApr","newApy","gt","apr2apy","div","additionalApy","apyBreakdown","Object","keys","filter","reduce","total","gaugeData","gaugeNewTotalSupply","totalSupply","gaugeApyCompressionFactor","newGaugeApy","harvestApyCompressionFactor","newHarvestApy","apy","amountIsValid","redeemable","vaultPosition","underlying","redeemableUsd","usd","totalGain","BigNumber","earnings","redeemablePercentage","earningsPercentage","gain","maxFees","fee","fees","redeemableAmountIsValid","lte","apyBoost","baseApr","toFixed","basePerformance","tranchePerformance","overperformance","minus","netGain","bbTranche","vaultConfig","Tranches","BB","coverageAmount","DynamicActionFields","props","strategy","strategies","dynamicActionFields","map","dynamicField","pb","borderBottomColor","Deposit","error","setError","setAmountUsd","activeStep","executeAction","transaction","selectAssetBalance","underlyingAssetVault","assetBalance","disabled","isNaN","deposit","checkAllowance","allowanceContract","getAllowanceContract","vaultOwner","getVaultAllowanceOwner","getAllowance","allowance","gte","depositParams","getDepositParams","depositContractSendMethod","getDepositContractSendMethod","status","setMaxBalance","balance","getMethodDefaultGasLimit","depositButton","ConnectWalletButton","underlyingId","abbreviate","Withdraw","searchParams","useBrowserRouter","setSearchParams","vaultBalance","withdraw","amountToWithdraw","withdrawParams","getWithdrawParams","withdrawContractSendMethod","getWithdrawContractSendMethod","withdrawButton","vaultMessages","messages","undefined","border","pl","pr","close","position","zIndex","style","cursor","top","right","TransactionStatus","countTimeoutId","useRef","chainId","explorer","progressValue","setProgressValue","progressMaxValue","setProgressMaxValue","remainingTime","setRemainingTime","targetTimestamp","setTargetTimestamp","actionType","baseActionType","transactionState","retry","cleanTransaction","startCountDown","newRemainingTime","ceil","Date","now","current","setTimeout","includes","clearTimeout","estimatedTime","timestamp","newTargetTimestamp","resetAndGoBack","resetStep","txActionType","amountToDisplay","abbreviateNumber","assetToDisplay","body","actions","leftIcon","isLongTransaction","isIndeterminate","circularProgressColor","circularProgress","bg","borderRadius","left","thickness","trackColor","sx","transitionTimingFunction","transitionProperty","transitionDuration","display","green","red","navBar","hash","Link","isExternal","href","getExplorerTxUrl","TransactionSpeedSelector","save","estimatedTimes","gasPrices","currentTransactionSpeed","setTransactionSpeed","mb","TransactionSpeed","transactionSpeedKey","isActive","colorScheme","noOfLines","isLoaded","formatTime","initialState","reducer","OperativeComponentContext","createContext","useContext","OperativeComponent","cardProps","intervalId","setActiveItem","actionIndex","setActionIndex","useReducer","transactionSpeedSelectorOpened","setTransactionSpeedSelectorOpened","gasPrice","updateGasPrices","activeAction","steps","ActionComponent","clearInterval","setInterval","firstProcessIndex","length","code","transationSpeedToggler","prevValue","Provider","overflow","minHeight","direction","ChakraCarousel","gap","defaultIndex","index","mr","Tab","label","step","StepComponent","minPrecision"],"sourceRoot":""}