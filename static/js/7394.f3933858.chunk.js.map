{"version":3,"file":"static/js/7394.f3933858.chunk.js","mappings":"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","sources":["components/TransactionButton/TransactionButton.tsx","hooks/useBoundingRect/useBoundingRect.ts","webpack://idle-dashboard-new/./src/components/TransactionButton/progress.css?8ae6"],"sourcesContent":["import './progress.css'\nimport type { AssetId } from 'constants/types'\nimport { ContractSendMethod } from 'web3-eth-contract'\nimport { MdOutlineDone, MdOutlineClose } from 'react-icons/md'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport React, { useRef, useCallback, useState, useMemo, useEffect } from 'react'\nimport { TranslationProps, Translation } from 'components/Translation/Translation'\nimport { TransactionStatus, useTransactionManager } from 'contexts/TransactionManagerProvider'\nimport { useTheme, ButtonProps, Button, Box, Flex, Spinner, Text, TextProps } from '@chakra-ui/react'\n\ntype TransactionButtonProps = {\n  text: string\n  amount?: string\n  assetId: AssetId\n  vaultId: AssetId\n  actionType?: string\n  contractSendMethod: ContractSendMethod\n}\n\nexport const TransactionButtonValue: React.FC<TransactionButtonProps & TextProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  const theme = useTheme()\n  const intervalId = useRef<any>(null)\n  const [ remainingTime, setRemainingTime ] = useState<number | null>(null)\n  const { state: { transaction }, cleanTransaction } = useTransactionManager()\n\n  // const transaction: TransactionStatus = useMemo(() => ({\n  //   hash: null,\n  //   error: null,\n  //   status: 'success',\n  //   amount: null,\n  //   assetId: null,\n  //   vaultId: null,\n  //   receipt: null,\n  //   created: null,\n  //   timestamp: null,\n  //   actionType: null,\n  //   transaction: null,\n  //   lastUpdated: null,\n  //   estimatedTime: null,\n  //   confirmationCount: 0,\n  //   contractSendMethod,\n  // }), [contractSendMethod])\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const transactionStarted = useMemo(() => {\n    return isRightTransaction && transaction.status && ['pending', 'success', 'failed'].includes(transaction.status) && transaction.estimatedTime\n  }, [transaction, isRightTransaction])\n\n  const transitionDuration = useMemo(() => {\n    return transactionStarted && transaction.status === 'pending' ? transaction.estimatedTime : 0.5\n  }, [transactionStarted, transaction])\n\n  const startCountdown = useCallback(() => {\n    // console.log('getRemainingTime', transaction)\n    if (!transaction.timestamp || !transaction.estimatedTime) return null\n    const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n    // console.log('getRemainingTime - targetTimestamp', targetTimestamp, Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000)))\n    const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n\n    setRemainingTime(remainingTime)\n    if (!remainingTime) return\n    // console.log('TransactionButton - startCountdown')\n    intervalId.current = setTimeout(() => {\n      startCountdown()\n    }, 1000)\n  }, [transaction])\n\n  useEffect(() => {\n    if (transaction.status === 'success' || transaction.status === 'failed'){\n      // console.log('Clear Interval', intervalId.current)\n      if (intervalId.current){\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n      // Clean transaction if success or failed\n      if (transaction.status === 'success' || transaction.error?.code !== 4001){\n        setTimeout(() => {\n          cleanTransaction()\n        }, 4000)\n      }\n    } else if (transaction.status === 'pending' && !intervalId.current){\n      startCountdown()\n    }\n  }, [transaction.status, startCountdown, cleanTransaction, transaction.error?.code])\n  \n  const textComponent = useMemo(() => {\n    if (isRightTransaction){\n      switch (transaction?.status){\n        case 'created':\n          return (\n            <Spinner size={'sm'} />\n          )\n        case 'pending':\n          if (!transaction.timestamp || !transaction.estimatedTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          // const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n          // const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n          // Return spinner if long transaction\n          if (!remainingTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          return (\n            <Text textStyle={'ctaStatic'}>{remainingTime}s</Text>\n          )\n        case 'success':\n          return (\n            <Flex\n              {...props}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              <MdOutlineDone size={24} color={theme.colors.green['400']} />\n            </Flex>\n          )\n        case 'failed':\n          if (transaction.error?.code !== 4001){\n            return (\n              <Flex\n                {...props}\n                alignItems={'center'}\n                justifyContent={'center'}\n              >\n                <MdOutlineClose size={24} color={theme.colors.red['400']} />\n              </Flex>\n            )\n          }\n        break\n        default:\n        break\n      }\n    }\n    return (\n      <Translation translation={text} textStyle={'ctaStatic'} />\n    )\n  }, [isRightTransaction, remainingTime, transaction, text, theme, props])\n\n  const progressBg = useMemo(() => {\n    switch (transaction.status){\n      case 'success':\n      case 'failed':\n        return 'transparent'\n      default:\n        return 'primary'\n    }\n  }, [transaction])\n\n  return (\n    <>\n      <Flex\n        top={0}\n        left={0}\n        bottom={0}\n        bg={progressBg}\n        overflow={'hidden'}\n        position={'absolute'}\n        alignItems={'center'}\n        justifyContent={'center'}\n        transition={'background 0.5s ease-in-out'}\n        sx={{\n          animationIterationCount: 1,\n          animationFillMode: 'forwards',\n          animationTimingFunction: 'ease-in-out',\n          animationDuration: `${transitionDuration}s`,\n          animationName: transactionStarted ? 'progress' : 'none',\n          animationPlayState: transactionStarted ? 'running' : 'stopped',\n        }}\n      >\n        <Flex\n          left={0}\n          width={props.width}\n          alignItems={'center'}\n          position={'absolute'}\n          justifyContent={'center'}\n          sx={{\n            '> *':{\n              color:'black !important',\n              borderColor:'black !important',\n            }\n          }}\n        >\n          {textComponent}\n        </Flex>\n      </Flex>\n      {textComponent}\n    </>\n  )\n}\n\nexport const TransactionButton: React.FC<TransactionButtonProps & ButtonProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  // @ts-ignore\n  const [ref, { width }] = useBoundingRect()\n  const { sendTransaction, state: { transaction } } = useTransactionManager()\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const onClick = useCallback(() => {\n    if (transaction.status === 'created' || transaction.status === 'pending') return\n    // console.log('onClick', vaultId, assetId, contractSendMethod)\n    return sendTransaction(vaultId, assetId, contractSendMethod, actionType, amount)\n  }, [transaction, vaultId, assetId, contractSendMethod, actionType, amount, sendTransaction])\n\n  const borderColor = useMemo(() => {\n    if (!isRightTransaction) return 'primary'\n    switch (transaction.status){\n      case 'success':\n        return 'green.400'\n      case 'failed':\n        return transaction.error?.code !== 4001 ? 'red.400' : 'primary'\n      default:\n        return 'primary'\n    }\n  }, [isRightTransaction, transaction])\n\n  return (\n    <Button\n      py={2}\n      px={10}\n      overflow={'hidden'}\n      position={'relative'}\n      width={width || 'auto'}\n      borderColor={borderColor}\n      onClick={() => onClick()}\n      ref={ref as typeof useRef}\n      variant={'ctaPrimaryOutline'}\n      transition={'border 0.5s ease-in-out'}\n      {...props}\n    >\n      <TransactionButtonValue text={text} vaultId={vaultId} assetId={assetId} contractSendMethod={contractSendMethod} width={width} />\n    </Button>\n  )\n}","import { requestTimeout } from 'helpers/'\nimport { useState, useCallback, useLayoutEffect } from \"react\";\n\n// let timeoutRequest: any = null;\n\nconst debounce = (delay: number = 0, callback: Function) => {\n  let timeoutId: any = null;\n  return (...args: any[]) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(callback, delay, args);\n\n    // if (timeoutRequest) {\n    //   timeoutRequest.clear();\n    // }\n    // timeoutRequest = requestTimeout(callback, delay);\n  };\n};\n\nexport type Dimensions = {\n  x: number\n  y: number\n  top: number\n  left: number\n  width: number\n  height: number\n  right: number\n  bottom: number\n}\n\nconst initialDimensions: Dimensions = {\n  x: 0,\n  y: 0,\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  right: 0,\n  bottom: 0\n}\n\nfunction getDimensionObject(node: any): Dimensions {\n  const rect = node.getBoundingClientRect();\n  return {\n    x: rect.x,\n    y: rect.y,\n    top: rect.top,\n    left: rect.left,\n    width: rect.width,\n    height: rect.height,\n    right: rect.right,\n    bottom: rect.bottom\n  };\n}\n\nexport default function useBoundingRect(delay: number = 0) {\n  const [node, setNode] = useState<any>(null);\n  const [dimensions, setDimensions] = useState<Dimensions>(initialDimensions);\n\n  const ref = useCallback((node: any) => {\n    setNode(node);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (\"undefined\" !== typeof window && node) {\n      const measure = async () => {\n        window.requestAnimationFrame(() => {\n          // console.log('measure', getDimensionObject(node))\n          setDimensions(getDimensionObject(node))\n        });\n      }\n\n      measure();\n\n      const listener = debounce(delay || 100, measure);\n\n      window.addEventListener(\"resize\", listener);\n      window.addEventListener(\"scroll\", listener);\n      \n      return () => {\n        window.removeEventListener(\"resize\", listener);\n        window.removeEventListener(\"scroll\", listener);\n      };\n    }\n  }, [node, delay]);\n\n  return [ref, dimensions, node];\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["TransactionButtonValue","text","contractSendMethod","amount","assetId","vaultId","actionType","props","theme","useTheme","intervalId","useRef","useState","remainingTime","setRemainingTime","useTransactionManager","transaction","state","cleanTransaction","isRightTransaction","useMemo","JSON","stringify","_method","transactionStarted","status","includes","estimatedTime","transitionDuration","startCountdown","useCallback","timestamp","targetTimestamp","Math","max","ceil","Date","now","current","setTimeout","useEffect","clearInterval","error","code","textComponent","size","textStyle","alignItems","justifyContent","color","colors","green","red","Translation","translation","progressBg","top","left","bottom","bg","overflow","position","transition","sx","animationIterationCount","animationFillMode","animationTimingFunction","animationDuration","animationName","animationPlayState","width","borderColor","TransactionButton","useBoundingRect","ref","sendTransaction","onClick","py","px","variant","debounce","delay","callback","timeoutId","clearTimeout","args","initialDimensions","x","y","height","right","getDimensionObject","node","rect","getBoundingClientRect","setNode","dimensions","setDimensions","useLayoutEffect","window","measure","requestAnimationFrame","listener","addEventListener","removeEventListener"],"sourceRoot":""}