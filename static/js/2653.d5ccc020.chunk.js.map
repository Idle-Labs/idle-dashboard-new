{"version":3,"file":"static/js/2653.d5ccc020.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/base64/src.ts/browser-base64.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/decoder.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/lib.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/include.ts","../node_modules/@ethersproject/hash/src.ts/namehash.ts","../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/ankr-provider.ts","../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/web3-provider.ts","../node_modules/@ethersproject/providers/src.ts/index.ts","../node_modules/@ethersproject/random/src.ts/shuffle.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function decode(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\n\nexport function encode(data: BytesLike): string {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\n\nimport { getData } from './include.js';\nconst r = getData();\n\nimport {read_member_array, read_mapped_map, read_emoji_trie} from './decoder.js';\n\n// @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name: string): Array<number> {\n    return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps: Array<number>): Array<number> {\n    return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name: string): string {\n\tfor (let label of name.split('.')) {\n\t\tlet cps = explode_cp(label);\n\t\ttry {\n\t\t\tfor (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n\t\t\t\tif (cps[i] !== UNDERSCORE) {\n\t\t\t\t\tthrow new Error(`underscore only allowed at start`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n\t\t\t\tthrow new Error(`invalid label extension`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Invalid label \"${label}\": ${err.message}`);\n\t\t}\n\t}\n\treturn name;\n}\n\nexport function ens_normalize(name: string): string {\n\treturn ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name: string, emoji_filter: (a: Array<number>) => Array<number>): string {\n\tlet input = explode_cp(name).reverse(); // flip for pop\n\tlet output = [];\n\twhile (input.length) {\t\t\n\t\tlet emoji = consume_emoji_reversed(input);\n\t\tif (emoji) {\n\t\t\toutput.push(...emoji_filter(emoji));\n\t\t\tcontinue;\n\t\t}\n\t\tlet cp = input.pop();\n\t\tif (VALID.has(cp)) {\n\t\t\toutput.push(cp);\n\t\t\tcontinue;\n\t\t} \n\t\tif (IGNORED.has(cp)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet cps = MAPPED[cp];\n\t\tif (cps) {\n\t\t\toutput.push(...cps);\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n\t}\n\treturn ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s: string): string {\n    return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps: Array<number>, eaten?: Array<number>) {\n\tlet node = EMOJI_ROOT;\n\tlet emoji;\n\tlet saved;\n\tlet stack = [];\n\tlet pos = cps.length;\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\n\twhile (pos) {\n\t\tlet cp = cps[--pos];\n\t\tnode = node.branches.find(x => x.set.has(cp))?.node;\n\t\tif (!node) break;\n\t\tif (node.save) { // remember\n\t\t\tsaved = cp;\n\t\t} else if (node.check) { // check exclusion\n\t\t\tif (cp === saved) break;\n\t\t}\n\t\tstack.push(cp);\n\t\tif (node.fe0f) {\n\t\t\tstack.push(0xFE0F);\n\t\t\tif (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n\t\t}\n\t\tif (node.valid) { // this is a valid emoji (so far)\n\t\t\temoji = stack.slice(); // copy stack\n\t\t\tif (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\t\t\tcps.length = pos; // truncate\n\t\t}\n\t}\n\treturn emoji;\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { decode } from \"@ethersproject/base64\";\n\nimport {read_compressed_payload} from './decoder.js';\n\nexport function getData(): () => number {\n    return read_compressed_payload(decode(''));\n}\n\n","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { ens_normalize } from \"./ens-normalize/lib\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    if (comp.length === 0) { throw new Error(\"invalid ENS name; empty component\"); }\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) { throw new Error(\"invalid ENS name; empty component\"); }\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\nexport function ensNormalize(name: string): string {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\n\nexport function isValidName(name: string): boolean {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n\n    return hexlify(result);\n}\n\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.0\";\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": dataMatch[1] },\n                body: base64Decode(dataMatch[2])\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"web/5.7.0\";\n","export const version = \"providers/5.7.2\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\"\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || typeof(result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string | null;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            if (method === \"call\" && params.blockTag) {\n                return provider[method](params.transaction, params.blockTag);\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n","\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\": case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\": case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n","\"use strict\";\n\nexport function shuffled(array: Array<any>): Array<any> {\n    array = array.slice();\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n\n    return array;\n}\n"],"names":["decode","textData","atob","data","i","length","push","charCodeAt","arrayify","encode","String","fromCharCode","btoa","AddressZero","HashZero","flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","read_compressed_payload","bytes","v","pos","read_payload","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","FULL","Math","HALF","QRTR","MASK","register","symbols","low","range","value","floor","start","end","mid","a","b","offset","map","x","decode_arithmetic","signed","read_ascending","n","next","read_deltas","read_member_array","lookup","vX","vN","read_counts","j","read_transposed","w","m","fill","undefined","read_linear_table","dx","dy","read_zero_terminated_array","ys","slice","_","j_dy","y","read_replacement_table","r","VALID","Set","IGNORED","MAPPED","ret","fromEntries","read_mapped_map","EMOJI_ROOT","sorted","sort","read","branches","keys","set","node","size","temp","valid","fe0f","save","check","read_emoji_trie","explode_cp","name","toUtf8CodePoints","filter_fe0f","cps","filter","cp","ens_normalize_post_check","split","label","lastIndexOf","Error","every","err","message","ens_normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","pop","has","toString","toUpperCase","s","fromCodePoint","normalize","eaten","saved","stack","find","_a","splice","logger","Logger","version","Zeros","Uint8Array","checkComponent","comp","ensNameSplit","toUtf8Bytes","comps","last","isValidName","error","namehash","throwArgumentError","keccak256","concat","hexlify","dnsEncode","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","provider","indexOf","CloudflareProvider","cloudflare","AnkrProvider","ankr","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","defaultProvider","getUrl","href","request","method","headers","body","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetchOptions","opts","fetch","response","arrayBuffer","key","toLowerCase","get","statusCode","status","statusMessage","statusText","staller","duration","Promise","resolve","setTimeout","bodyify","type","isBytesLike","trim","toUtf8String","fetchJson","connection","json","processFunc","updated","shallowCopy","Object","k","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","allow304","timeout","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","argument","authorization","base64Encode","reData","RegExp","dataMatch","match","base64Decode","requestBody","requestMethod","flatHeaders","header","runningTimeout","timer","promise","reject","makeError","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","parseInt","random","pow","serverError","throttleRetry","race","_fetchData","JSON","parse","poll","ceiling","interval","done","retryLimit","then","oncePoll","once","onceBlock","Formatter","this","formats","getDefaultFormats","address","bind","bigNumber","blockTag","hash","hex","number","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","strict","isHexString","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","_block","gas","isZero","networkId","replace","parseTransaction","byzantium","object","checkKey","checkValue","nullValue","replaceValue","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log","checkTopic","topic","serializeTopics","unique","join","getEventTag","eventName","ForkEvent","warn","getTime","Date","PollableEvents","Event","tag","listener","defineReadOnly","_lastBlockNumber","_inflight","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","sha256","matcherIpfs","matchers","_parseString","_parseBytes","getIpfsLink","link","numPad","padded","bytesPad","ceil","encodeBytes","datas","byteCount","hexConcat","Resolver","resolvedAddress","formatter","_supportsEip2544","eq","catch","code","selector","parameters","tx","ccipReadEnabled","parseBytes","supportsWildcard","CALL_EXCEPTION","_fetch","coinType","hexBytes","coinInfo","operation","words","bech32","unshift","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","scheme","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","metadataUrl","metadata","stringify","imageUrl","image","ipfs","ipns","swarm","skynet","urlSafe","keyBytes","defaultFormatter","nextPollId","BaseProvider","_events","_emitted","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","event","calldata","urls","sender","errorMessages","errorMessage","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","minFromBlock","getLogs","all","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","getTransaction","mined","getBlockWithTransactions","ti","waitForTransaction","reason","cancelled","replacement","_wrapTransaction","unref","addressOrName","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipReadFetch","ccipResult","_call","SERVER_ERROR","_getTransactionRequest","resolved","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","_getBlock","_getFilter","currentName","_getResolver","resolver","addrData","getResolver","resolverAddr","nameOrAddress","resolverAddress","getAvatar","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found","Provider","errorGas","spelunk","requireData","checkError","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","constructor","hexlifyTransaction","action","sendUncheckedTransaction","messageData","domain","types","_TypedDataEncoder","populated","Signer","allowedTransactionKeys","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","getSigner","connectUnchecked","id","jsonrpc","deepCopy","getFeeData","feeData","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","WS","WebSocket","NextId","WebSocketProvider","_wsReady","websocket","onopen","_requests","onmessage","messageEvent","callback","sub","_subs","subscription","fauxPoll","_websocket","_detectNetwork","rid","param","subIdPromise","_subIds","subId","_subscribe","emitReceipt","readyState","CONNECTING","onerror","close","StaticJsonRpcProvider","_super","UrlJsonRpcProvider","apiKey","checkAbstract","defaultApiKey","AlchemyWebSocketProvider","host","arguments","getHost","projectSecret","getTransactionPostData","maxFeePerGs","storageKeys","getJsonResult","checkLogTag","getBaseUrl","module","query","reduce","accum","baseUrl","apikey","post","getPostUrl","getPostData","procFunc","payloadStr","txhash","postData","topic0","blocks","getBlock","parseFloat","ethusd","endBlock","startblock","endblock","item","timeStamp","checkNetworks","median","maxDelta","middle","serialize","nextRid","getPromise","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","getProcessFunc","configs","c","_highestBlockNumber","tally","count","normalizedTally","waitForSync","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","providerConfigs","configOrProvider","index","stallTimeout","priority","sendTransaction","results","shuffled","first","t0","inflightWeight","backend","waiting","errors","errorCode","props","IpcProvider","defaultProjectId","InfuraWebSocketProvider","projectId","apiKeyObj","JsonRpcBatchProvider","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationId","applicationId","loadBalancer","applicationSecretKey","buildWeb3LegacyFetcher","sendFunc","fetcher","Web3Provider","path","jsonRpcFetchFunc","subprovider","isMetaMask","buildEip1193Fetcher","sendAsync","getDefaultProvider","tmp"],"sourceRoot":""}