{"version":3,"file":"static/js/9315.81df1597.chunk.js","mappings":"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","sources":["../node_modules/bs58/index.js","../node_modules/bs58check/base.js","../node_modules/bs58check/index.js","../node_modules/hdkey/lib/hdkey.js"],"sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"names":["basex","require","module","exports","base58","Buffer","checksumFn","decodeRaw","buffer","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","createHash","bs58checkBase","tmp","update","digest","assert","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","publicKey","readUInt32BE","publicKeyVerify","publicKeyConvert","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj"],"sourceRoot":""}