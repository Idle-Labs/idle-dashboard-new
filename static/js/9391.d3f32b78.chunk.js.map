{"version":3,"file":"static/js/9391.d3f32b78.chunk.js","mappings":"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","sources":["components/BalanceChart/BalanceChart.tsx","hooks/useBalanceChartData/useBalanceChartData.ts"],"sourcesContent":["import { Box } from '@chakra-ui/react'\nimport { useEffect, useMemo } from 'react'\nimport { Graph } from 'components/Graph/Graph'\nimport type { AssetId, HistoryTimeframe } from 'constants/types'\nimport { abbreviateNumber, calculatePercentChange } from 'helpers/'\nimport { useBalanceChartData } from 'hooks/useBalanceChartData/useBalanceChartData'\n\ntype BalanceChartArgs = {\n  color?: string\n  accountId?: string\n  assetIds: AssetId[]\n  strategies?: string[]\n  percentChange: number\n  isRainbowChart: boolean\n  timeframe: HistoryTimeframe\n  setPercentChange: (percentChange: number) => void\n  margins?: { top: number; right: number; bottom: number; left: number }\n}\n\nexport const BalanceChart: React.FC<BalanceChartArgs> = ({\n  assetIds,\n  accountId,\n  timeframe,\n  strategies,\n  percentChange,\n  isRainbowChart,\n  setPercentChange,\n  color = 'chart.stroke',\n  margins = { top: 0, right: 0, bottom: 0, left: 0 }\n}) => {\n  const { assets, balanceChartData, balanceChartDataLoading } = useBalanceChartData({\n    assetIds,\n    accountId,\n    timeframe,\n    strategies\n  })\n\n  const { total } = balanceChartData\n\n  useEffect(() => setPercentChange(calculatePercentChange(total)), [total, setPercentChange])\n\n  // const color = useMemo(() => {\n  //   const defaultColor = 'chart.stroke'\n  //   if (assets?.length === 1){\n  //     return assets[0]?.color || defaultColor\n  //   }\n  //   return defaultColor\n  // }, [assets])\n\n  const formatFn = (n: any) => `$${abbreviateNumber(n)}`\n\n  return (\n    <Box width={'full'} p={0} height={'350px'}>\n      <Graph\n        color={color}\n        margins={margins}\n        formatFn={formatFn}\n        data={balanceChartData}\n        isRainbowChart={isRainbowChart}\n        loading={balanceChartDataLoading}\n        isLoaded={!balanceChartDataLoading}\n      />\n    </Box>\n  )\n}\n","import dayjs from 'dayjs'\nimport BigNumber from 'bignumber.js'\nimport { useState, useMemo, useEffect } from 'react'\n// import { balanceChartDataMock } from './balanceChartData.mock'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { BNify, getTimestampRange, isEmpty, getTimeframeTimestamp } from 'helpers/'\nimport { AssetId, HistoryData, HistoryTimeframe, Asset, Transaction } from 'constants/types'\n\nexport type RainbowData = {\n  date: number\n  total: number\n  [k: AssetId]: number\n}\n\nexport type BalanceChartData = {\n  total: HistoryData[]\n  rainbow: RainbowData[]\n}\n\ntype UseBalanceChartDataReturn = {\n  assets?: Asset[]\n  balanceChartData: BalanceChartData\n  balanceChartDataLoading: boolean\n}\n\ntype UseBalanceChartDataArgs = {\n  assetIds: AssetId[]\n  accountId?: string\n  strategies?: string[]\n  timeframe?: HistoryTimeframe\n  useDollarConversion?: boolean\n}\n\ntype UseBalanceChartData = (args: UseBalanceChartDataArgs) => UseBalanceChartDataReturn\n\nexport const useBalanceChartData: UseBalanceChartData = ({\n  assetIds,\n  accountId,\n  strategies,\n  timeframe,\n  useDollarConversion = true\n}) => {\n\n  const {\n    isPortfolioLoaded,\n    historicalPrices,\n    historicalPricesUsd,\n    selectors: {\n      selectAssetsByIds,\n      selectVaultTransactions,\n      selectAssetHistoricalPriceByTimestamp,\n      selectAssetHistoricalPriceUsdByTimestamp\n    }\n  } = usePortfolioProvider()\n\n  const [balanceChartDataLoading, setBalanceChartDataLoading] = useState<boolean>(true)\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    const assets = selectAssetsByIds(assetIds)\n    return assets.filter( (asset: Asset) => !strategies || !asset.type || strategies.includes(asset.type) )\n  }, [assetIds, strategies, selectAssetsByIds])\n\n  const timeframeStartTimestamp = useMemo((): number => {\n    if (!timeframe) return 0\n    return getTimeframeTimestamp(timeframe)\n  }, [timeframe])\n\n  // console.log('assets', assets)\n\n  const balanceChartData = useMemo((): BalanceChartData => {\n\n    const chartData: BalanceChartData = {\n      total: [],\n      rainbow: []\n    }\n\n    if (!isPortfolioLoaded || isEmpty(historicalPrices) || isEmpty(historicalPricesUsd)) return chartData\n\n    // console.log('historicalPricesUsd', historicalPricesUsd)\n\n    const assetsBalancesByDate = assets.reduce( (assetsBalancesByDate: Record<number, Record<AssetId, number>>, asset: Asset) => {\n\n      if (!asset?.id) return assetsBalancesByDate\n\n      const assetId: AssetId = asset.id\n\n      const vaultTransactions = selectVaultTransactions(assetId)\n\n      if (!vaultTransactions.length) return assetsBalancesByDate\n\n      // Loop through asset transactions\n      const assetBalancesByDate = vaultTransactions.reduce( (balances: Record<string, any>, transaction: Transaction) => {\n        const timestamp = +(dayjs(+(transaction.timeStamp)*1000).startOf('day').valueOf())\n\n        switch (transaction.action) {\n          case 'deposit':\n            balances.total = balances.total.plus(transaction.idleAmount)\n            // console.log('Deposit', dayjs(timestamp).format('YYYY-MM-DD'), asset.name, transaction.idleAmount.toString(), balances.total.toString())\n          break;\n          case 'redeem':\n            balances.total = BigNumber.maximum(0, balances.total.minus(transaction.idleAmount))\n            // console.log('Redeem', dayjs(timestamp).format('YYYY-MM-DD'), asset.name, transaction.idleAmount.toString(), balances.total.toString())\n          break;\n          default:\n          break;\n        }\n\n        balances.byDate[timestamp] = balances.total\n\n        return balances\n      }, {\n        total: BNify(0),\n        byDate: {}\n      })\n\n      Object.keys(assetBalancesByDate.byDate).forEach( (timestamp: any) => {\n        if (!assetsBalancesByDate[timestamp]) {\n          assetsBalancesByDate[timestamp] = {}\n        }\n        if (asset.id) {\n          assetsBalancesByDate[timestamp][asset.id] = parseFloat(assetBalancesByDate.byDate[timestamp].toFixed(8))\n        }\n      })\n\n      // console.log(asset.id, transaction.action, assetBalancesByDate)\n\n      return assetsBalancesByDate\n    }, {})\n\n    if (isEmpty(assetsBalancesByDate)) return chartData\n\n    // console.log('assetsBalancesByDate', assetsBalancesByDate)\n\n    // Extend balances for each day between the first one and today\n    const startTimestamp = +(Object.keys(assetsBalancesByDate).sort()[0])\n    const endTimestamp = +(dayjs().endOf('day').valueOf())\n\n    const timestampRange = getTimestampRange(startTimestamp, endTimestamp)\n    const assetsBalancesByDateExtended: Record<number, Record<AssetId, number>> = {}\n    for (let timestampIndex: number = 0, prevTimestamp: number | null = null; timestampIndex < timestampRange.length; timestampIndex++) {\n      const timestamp = timestampRange[timestampIndex]\n\n      // Copy prev balances\n      assetsBalancesByDateExtended[timestamp] = {\n        ...(prevTimestamp ? assetsBalancesByDateExtended[prevTimestamp] : {}),\n        ...assetsBalancesByDate[timestamp],\n      }\n\n      // console.log('assetsBalancesByDateExtended', prevTimestamp, timestamp, (prevTimestamp ? assetsBalancesByDateExtended[prevTimestamp] : {}), assetsBalancesByDateExtended[timestamp])\n\n      prevTimestamp = timestamp\n    }\n\n    // console.log('assetsBalancesByDateExtended', assetsBalancesByDateExtended)\n\n    // Trailing prices\n    let prevVaultPriceInfo: Record<AssetId, HistoryData> = {}\n    let prevVaultPriceInfoUsd: Record<AssetId, HistoryData> = {}\n\n    // Add totals\n    Object.keys(assetsBalancesByDateExtended).forEach( (timestamp: any) => {\n\n      const assetsBalances = assetsBalancesByDateExtended[timestamp]\n\n      // Multiply balance by vault price\n      Object.keys(assetsBalances).forEach( (assetId: AssetId) => {\n        const asset = assets.find( (asset: Asset) => asset.id === assetId )\n        const underlyingId: AssetId | undefined = asset?.underlyingId\n\n        const vaultPriceInfo: HistoryData | null = selectAssetHistoricalPriceByTimestamp(assetId, timestamp) || prevVaultPriceInfo[assetId]\n        // console.log('vaultPriceInfo', assetId, timestamp, vaultPriceInfo, assetsBalances[assetId])\n        if (vaultPriceInfo) {\n          assetsBalances[assetId] = parseFloat(BNify(assetsBalances[assetId]).times(BNify(vaultPriceInfo.value)).toFixed(8))\n          prevVaultPriceInfo[assetId] = vaultPriceInfo\n        }\n\n        if (useDollarConversion) {\n          const vaultPriceInfoUsd: HistoryData | null = selectAssetHistoricalPriceUsdByTimestamp(underlyingId, timestamp) || prevVaultPriceInfoUsd[assetId]\n          // console.log('vaultPriceInfoUsd', assetId, underlyingId, timestamp, prevVaultPriceInfoUsd[assetId], vaultPriceInfoUsd, assetsBalances[assetId]);\n          if (vaultPriceInfoUsd) {\n            assetsBalances[assetId] = parseFloat(BNify(assetsBalances[assetId]).times(BNify(vaultPriceInfoUsd.value)).toFixed(8))\n            prevVaultPriceInfoUsd[assetId] = vaultPriceInfoUsd\n          }\n        }\n      })\n\n      // Calculate total balance\n      assetsBalances.total = Object.values(assetsBalances).reduce( (total: number, value: number) => (total+value), 0 )\n    })\n\n    // console.log('assetsBalancesByDateExtended', assetsBalancesByDateExtended)\n\n    // Generate total array\n    chartData.total = Object.keys(assetsBalancesByDateExtended).reduce( (total: HistoryData[], timestamp: any ) => {\n      if (timestamp<timeframeStartTimestamp) return total\n      total.push({\n        date: parseInt(timestamp),\n        value: assetsBalancesByDateExtended[timestamp].total\n      })\n      return total\n    }, [])\n\n    // Generate rainbow array\n    chartData.rainbow = Object.keys(assetsBalancesByDateExtended).reduce( (rainbow: RainbowData[], timestamp: any ) => {\n      if (timestamp<timeframeStartTimestamp) return rainbow\n      rainbow.push({\n        date: parseInt(timestamp),\n        total: assetsBalancesByDateExtended[timestamp].total,\n        ...assetsBalancesByDateExtended[timestamp]\n      })\n      return rainbow\n    }, [])\n    \n    return chartData\n  // eslint-disable-next-line\n  }, [assets, useDollarConversion, timeframeStartTimestamp, selectVaultTransactions, isPortfolioLoaded, historicalPrices, historicalPricesUsd, selectAssetHistoricalPriceByTimestamp, selectAssetHistoricalPriceUsdByTimestamp])\n\n  // console.log('balanceChartData', balanceChartData)\n\n  useEffect(() => {\n    if (!balanceChartData.rainbow.length) return\n    setBalanceChartDataLoading(false)\n\n    return () => {\n      setBalanceChartDataLoading(true)\n    }\n  }, [balanceChartData])\n\n  return {\n    assets,\n    balanceChartData,\n    balanceChartDataLoading\n  }\n}"],"names":["BalanceChart","assetIds","accountId","timeframe","strategies","isRainbowChart","percentChange","setPercentChange","color","margins","top","right","bottom","left","useBalanceChartData","balanceChartData","assets","balanceChartDataLoading","total","useEffect","calculatePercentChange","width","p","height","Graph","formatFn","n","abbreviateNumber","data","loading","isLoaded","useDollarConversion","usePortfolioProvider","isPortfolioLoaded","historicalPrices","historicalPricesUsd","selectors","selectAssetsByIds","selectVaultTransactions","selectAssetHistoricalPriceByTimestamp","selectAssetHistoricalPriceUsdByTimestamp","useState","setBalanceChartDataLoading","useMemo","filter","asset","type","includes","timeframeStartTimestamp","getTimeframeTimestamp","chartData","rainbow","isEmpty","assetsBalancesByDate","reduce","id","assetId","vaultTransactions","length","assetBalancesByDate","balances","transaction","timestamp","dayjs","timeStamp","startOf","valueOf","action","plus","idleAmount","BigNumber","minus","byDate","BNify","Object","keys","forEach","parseFloat","toFixed","startTimestamp","sort","endTimestamp","endOf","timestampRange","getTimestampRange","assetsBalancesByDateExtended","timestampIndex","prevTimestamp","prevVaultPriceInfo","prevVaultPriceInfoUsd","assetsBalances","find","underlyingId","vaultPriceInfo","times","value","vaultPriceInfoUsd","values","push","date","parseInt"],"sourceRoot":""}