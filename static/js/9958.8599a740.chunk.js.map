{"version":3,"file":"static/js/9958.8599a740.chunk.js","mappings":"iRASaA,EAAwC,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAAyC,IAAhCC,KAAAA,OAAgC,MAAzB,KAAyB,EAAhBC,GAAgB,YAC/F,OACE,SAAC,EAAAC,cAAD,CACEC,UAAU,EACVJ,QAASA,EAFX,UAIE,UAAC,KAAD,CACEK,WAAY,SACZC,eAAgB,aAFlB,WAIE,SAAC,EAAAH,cAAA,KAAD,CAAoBF,KAAMA,KAC1B,SAAC,EAAAE,cAAA,MAAD,QAAoBI,UAAW,UAAWC,SAAU,KAAMC,WAAY,UAAcP,QAI3F,C,qVCbYQ,EAAO,SAACC,GACnB,IAAQC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,WAAeC,GAAjC,OAA0CH,EAA1C,GACA,OACE,SAAC,MAAD,gBACEI,MAAO,OACPC,SAAU,WACVH,WAAYA,GAAc,QACtBC,GAJN,aAMGF,IAGN,EAEYK,EAAW,SAACN,GACvB,IAAQC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,WAAeC,GAAjC,OAA0CH,EAA1C,GACA,OACE,SAAC,MAAD,gBACEI,MAAO,OACPF,WAAYA,GAAc,QACtBC,GAHN,aAKGF,IAGN,EAEYM,EAAO,SAACP,GACnB,IAAQC,EAAsBD,EAAtBC,SAAaE,GAArB,OAA8BH,EAA9B,GACME,EAAuB,CAAC,YAAYM,OAAOR,EAAME,YACvD,OACE,SAACH,GAAD,kBAAUI,GAAV,IAAgBD,WAAYA,EAA5B,SAAyCD,IAE5C,EAEYQ,EAAQ,SAACT,GACpB,IAAQC,EAAsBD,EAAtBC,SAAaE,GAArB,OAA8BH,EAA9B,GACME,EAAuB,CAAC,aAAaM,OAAOR,EAAME,YACxD,OACE,SAACH,GAAD,kBAAUI,GAAV,IAAgBD,WAAYA,EAA5B,SAAyCD,IAE5C,EAEYS,EAAU,SAACV,GACtB,IAAQC,EAAsBD,EAAtBC,SAAaE,GAArB,OAA8BH,EAA9B,GACME,EAAuB,CAAC,eAAeM,OAAOR,EAAME,YAC1D,OACE,SAACH,GAAD,kBAAUI,GAAV,IAAgBD,WAAYA,EAA5B,SAAyCD,IAE5C,EAEDF,EAAKQ,KAAOA,EACZR,EAAKU,MAAQA,EACbV,EAAKY,KAAOL,EACZP,EAAKW,QAAUA,EACfX,EAAKa,QA9DgB,SAACZ,GACpB,IAAQC,EAAsBD,EAAtBC,SAAaE,GAArB,OAA8BH,EAA9B,GACA,OACE,SAAC,MAAD,gBAASa,GAAI,KAAMvB,KAAM,KAAMwB,GAAI,GAAOX,GAA1C,aAAiDF,IAEpD,C,6MCQYc,EAAsC,SAAC,GAAiB,IAAf1B,EAAc,EAAdA,QACpD,GAAuE2B,EAAAA,EAAAA,KAA/DC,EAAR,EAAQA,UAAR,IAAmBC,UAAaC,EAAhC,EAAgCA,gBAAiBC,EAAjD,EAAiDA,gBAE3CC,GAAQC,EAAAA,EAAAA,UAAQ,WACpB,OAAOH,GAAmBA,EAAgB9B,EAC3C,GAAE,CAAC8B,EAAiB9B,IAEfkC,GAAQD,EAAAA,EAAAA,UAAQ,WACpB,OAAOF,GAAmBA,EAAgB/B,EAC3C,GAAE,CAAC+B,EAAiB/B,KAECiC,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EAClC,OAAOC,GAAU,UAAWA,IAArB,UAA+BA,EAAMC,aAArC,aAA+B,EAAaC,cACpD,GAAE,CAACF,IAEJ,OAAI,OAACN,QAAD,IAACA,GAAAA,EAAWS,QAGd,UAAC,KAAD,CACEC,QAAS,EACTvB,MAAO,OACPwB,GAAI,gBACJlC,WAAY,aAJd,WAME,SAAC,EAAAmC,YAAD,CAAaC,YAAa,qBAAsBC,UAAWC,EAAAA,GAAMpC,UAAW,UAAWC,SAAU,QACjG,SAAC,KAAD,CACE8B,QAAS,EACTvB,MAAO,OACP6B,QAAS,CAAC,EAAG,GAHf,SAMIhB,GAAaA,EAAUiB,KAAK,SAACC,GAC3B,OACE,SAAC,EAAApC,KAAD,CACEqC,EAAG,EADL,UAIE,UAAC,KAAD,CACET,QAAS,EACTvB,MAAO,OACPV,WAAY,aAHd,WAKE,UAAC,KAAD,CACEU,MAAO,OACPT,eAAgB,gBAFlB,WAIE,SAAC,EAAAP,WAAD,CAAYC,QAASA,KACrB,UAAC,KAAD,CAAMO,UAAW,UAAWC,SAAU,KAAMC,WAAY,SAAxD,cAAoEqC,EAASE,eAE/E,UAAC,KAAD,CACEV,QAAS,EACTvB,MAAO,OACPT,eAAgB,gBAHlB,UAMwB,cAApBwC,EAASG,QACP,SAAC,EAAAC,kBAAD,CAAmBC,KAAM,aAAcC,QAAO,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAAOK,GAAIvC,QAAO,OAAEgC,QAAF,IAAEA,OAAF,EAAEA,EAAOqB,aAAcC,mBAAoBR,EAASQ,mBAAoBC,WAAY,QAASC,OAAQV,EAASU,OAAOC,WAAYC,SAAUZ,EAASU,OAAOG,IAAI,MAEjO,UAAC,KAAD,CACErB,QAAS,EACTjC,WAAY,aAFd,WAIE,SAAC,EAAAmC,YAAD,CAAaE,UAAWC,EAAAA,GAAMF,YAAa,qBAAsBlC,UAAW,kBAC5E,SAAC,KAAD,CACE+B,QAAS,EADX,UAGE,SAAC,KAAD,CAAM/B,UAAW,YAAjB,UAA+BqD,EAAAA,EAAAA,IAAWd,EAASe,gBAAiBC,EAAAA,YAK5E,UAAC,KAAD,CACExB,QAAS,EACTjC,WAAY,WAFd,WAIE,SAAC,EAAAmC,YAAD,CAAaE,UAAWC,EAAAA,GAAMF,YAAa,iBAAkBlC,UAAW,kBACxE,UAAC,KAAD,CACE+B,QAAS,EACThC,eAAgB,WAFlB,WAIE,SAAC,EAAAyD,OAAD,CAAQC,MAAOlB,EAASU,OAAQS,SAAU,EAAG1D,UAAW,eACxD,SAAC,EAAAJ,cAAD,CAAeH,QAAO,OAAEgC,QAAF,IAAEA,OAAF,EAAEA,EAAOqB,aAA/B,UACE,SAAC,EAAAlD,cAAA,KAAD,CAAoBI,UAAW,6BAjD3C,cAEcuC,EAASE,SAuD1B,SA3EsB,IAgFhC,C,4aC7FYkB,EAAuE,SAAC,GAQ9E,IAAD,EAPJf,EAOI,EAPJA,KAKAG,GAEI,EANJE,OAMI,EALJxD,QAKI,EAJJoD,QAII,EAHJG,WAGI,EAFJD,oBACG3C,GACC,YACEwD,GAAQC,EAAAA,EAAAA,MACRC,GAAaC,EAAAA,EAAAA,QAAY,MAC/B,GAA4CC,EAAAA,EAAAA,UAAwB,MAApE,eAAQC,EAAR,KAAuBC,EAAvB,KACA,GAAqDC,EAAAA,EAAAA,KAApCC,EAAjB,EAAQC,MAASD,YAAeE,EAAhC,EAAgCA,iBAqB1BC,GAAqB7C,EAAAA,EAAAA,UAAQ,wBAAM8C,KAAKC,UAAL,OAAeL,QAAf,IAAeA,GAAf,UAAeA,EAAarB,0BAA5B,aAAe,EAAiC2B,WAAaF,KAAKC,UAAU1B,EAAmB2B,QAArG,GAA+G,CAACN,EAAarB,IAE1J4B,GAAqBjD,EAAAA,EAAAA,UAAQ,WACjC,OAAO6C,GAAsBH,EAAY1B,QAAU,CAAC,UAAW,UAAW,UAAUkC,SAASR,EAAY1B,SAAW0B,EAAYS,aACjI,GAAE,CAACT,EAAaG,IAEXO,GAAqBpD,EAAAA,EAAAA,UAAQ,WACjC,OAAOiD,GAA6C,YAAvBP,EAAY1B,OAAuB0B,EAAYS,cAAgB,EAC7F,GAAE,CAACF,EAAoBP,IAElBW,GAAiBC,EAAAA,EAAAA,cAAY,WAEjC,IAAKZ,EAAYa,YAAcb,EAAYS,cAAe,OAAO,KACjE,IAAMK,GAAmBd,EAAYa,UAAqC,IAA1Bb,EAAYS,cAEtDZ,EAAgBkB,KAAKC,IAAI,EAAGD,KAAKE,MAAMH,EAAgBI,KAAKC,OAAO,MAEzErB,EAAiBD,GACZA,IAELH,EAAW0B,QAAUC,YAAW,WAC9BV,GACD,GAAE,KACJ,GAAE,CAACX,KAEJsB,EAAAA,EAAAA,YAAU,WACiE,IAAD,EAA7C,YAAvBtB,EAAY1B,QAA+C,WAAvB0B,EAAY1B,QAE9CoB,EAAW0B,UACbG,cAAc7B,EAAW0B,SACzB1B,EAAW0B,QAAU,MAGI,YAAvBpB,EAAY1B,QAAoD,QAA5B,UAAA0B,EAAYwB,aAAZ,eAAmBC,OACzDJ,YAAW,WACTnB,GACD,GAAE,MAE2B,YAAvBF,EAAY1B,QAAyBoB,EAAW0B,SACzDT,GAEH,GAAE,CAACX,EAAY1B,OAAQqC,EAAgBT,EAArC,UAAuDF,EAAYwB,aAAnE,aAAuD,EAAmBC,OAE7E,IAAMC,GAAgBpE,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EAClC,GAAI6C,EACF,cAAQH,QAAR,IAAQA,OAAR,EAAQA,EAAa1B,QACnB,IAAK,UACH,OACE,SAAC,IAAD,CAAShD,KAAM,OAEnB,IAAK,UACH,OAAK0E,EAAYa,WAAcb,EAAYS,eAQtCZ,GAMH,UAAC,KAAD,CAAMjE,UAAW,YAAjB,UAA+BiE,EAA/B,QAZE,SAAC,IAAD,CAASvE,KAAM,OAcrB,IAAK,UACH,OACE,SAAC,MAAD,kBACMU,GADN,IAEEN,WAAY,SACZC,eAAgB,SAHlB,UAKE,SAAC,MAAD,CAAeL,KAAM,GAAIqG,MAAOnC,EAAMoC,OAAOC,MAAM,UAGzD,IAAK,SACH,GAAgC,QAA5B,UAAA7B,EAAYwB,aAAZ,eAAmBC,MACrB,OACE,SAAC,MAAD,kBACMzF,GADN,IAEEN,WAAY,SACZC,eAAgB,SAHlB,UAKE,SAAC,MAAD,CAAgBL,KAAM,GAAIqG,MAAOnC,EAAMoC,OAAOE,IAAI,UAS9D,OACE,SAAC,EAAAjE,YAAD,CAAaC,YAAaU,EAAM5C,UAAW,aAE9C,GAAE,CAACuE,EAAoBN,EAAeG,EAAaxB,EAAMgB,EAAOxD,IAE3D+F,GAAazE,EAAAA,EAAAA,UAAQ,WACzB,OAAQ0C,EAAY1B,QAClB,IAAK,UACL,IAAK,SACH,MAAO,cACT,QACE,MAAO,UAEZ,GAAE,CAAC0B,IAEJ,OACE,iCACE,SAAC,KAAD,CACEgC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,GAAIJ,EACJK,SAAU,SACV/F,SAAU,WACVX,WAAY,SACZC,eAAgB,SAChB0G,WAAY,8BACZC,GAAI,CACFC,wBAAyB,EACzBC,kBAAmB,WACnBC,wBAAyB,cACzBC,kBAAkB,GAAD,OAAKhC,EAAL,KACjBiC,cAAepC,EAAqB,WAAa,OACjDqC,mBAAoBrC,EAAqB,UAAY,WAhBzD,UAmBE,SAAC,KAAD,CACE0B,KAAM,EACN7F,MAAOJ,EAAMI,MACbV,WAAY,SACZW,SAAU,WACVV,eAAgB,SAChB2G,GAAI,CACF,MAAM,CACJX,MAAM,mBACNkB,YAAY,qBATlB,SAaGnB,MAGJA,IAGN,EAEYnD,EAAoE,SAAC,GAQ3E,IAPLC,EAOI,EAPJA,KACAK,EAMI,EANJA,OACAxD,EAKI,EALJA,QACAoD,EAII,EAJJA,QACAG,EAGI,EAHJA,WACAD,EAEI,EAFJA,mBACG3C,GACC,YAEJ,GAAyB8G,EAAAA,EAAAA,KAAzB,eAAOC,EAAP,KAAc3G,EAAd,KAAcA,MACd,GAAoD2D,EAAAA,EAAAA,KAA5CiD,EAAR,EAAQA,gBAA0BhD,EAAlC,EAAyBC,MAASD,YAG5BG,GAAqB7C,EAAAA,EAAAA,UAAQ,wBAAM8C,KAAKC,UAAL,OAAeL,QAAf,IAAeA,GAAf,UAAeA,EAAarB,0BAA5B,aAAe,EAAiC2B,WAAaF,KAAKC,UAAU1B,EAAmB2B,QAArG,GAA+G,CAACN,EAAarB,IAE1JsE,GAAUrC,EAAAA,EAAAA,cAAY,WAC1B,GAA2B,YAAvBZ,EAAY1B,QAA+C,YAAvB0B,EAAY1B,OAEpD,OAAO0E,EAAgBvE,EAASpD,EAASsD,EAAoBC,EAAYC,EAC1E,GAAE,CAACmB,EAAavB,EAASpD,EAASsD,EAAoBC,EAAYC,EAAQmE,IAErEH,GAAcvF,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EAChC,IAAK6C,EAAoB,MAAO,UAChC,OAAQH,EAAY1B,QAClB,IAAK,UACH,MAAO,YACT,IAAK,SACH,OAAmC,QAA5B,UAAA0B,EAAYwB,aAAZ,eAAmBC,MAAgB,UAAY,UACxD,QACE,MAAO,UAEZ,GAAE,CAACtB,EAAoBH,IAExB,OACE,SAAC,MAAD,gBACEkD,GAAI,EACJC,GAAI,GACJf,SAAU,SACV/F,SAAU,WACVD,MAAOA,GAAS,OAChByG,YAAaA,EACbI,QAAS,kBAAMA,GAAN,EACTF,IAAKA,EACLK,QAAS,oBACTf,WAAY,2BACRrG,GAXN,cAaE,SAACuD,EAAD,CAAwBf,KAAMA,EAAMC,QAASA,EAASpD,QAASA,EAASsD,mBAAoBA,EAAoBvC,MAAOA,MAG5H,C,wGCzPKiH,EAAW,WAA4C,IAA3CC,EAA0C,uDAA1B,EAAGC,EAAuB,uCACtDC,EAAiB,KACrB,OAAO,WACDA,GACFC,aAAaD,GAFU,2BAAhBE,EAAgB,yBAAhBA,EAAgB,gBAIzBF,EAAYnC,WAAWkC,EAAUD,EAAOI,EAMzC,CACF,EAaKC,EAAgC,CACpCC,EAAG,EACHC,EAAG,EACH7B,IAAK,EACLC,KAAM,EACN7F,MAAO,EACP0H,OAAQ,EACRC,MAAO,EACP7B,OAAQ,GAGV,SAAS8B,EAAmBC,GAC1B,IAAMC,EAAOD,EAAKE,wBAClB,MAAO,CACLP,EAAGM,EAAKN,EACRC,EAAGK,EAAKL,EACR7B,IAAKkC,EAAKlC,IACVC,KAAMiC,EAAKjC,KACX7F,MAAO8H,EAAK9H,MACZ0H,OAAQI,EAAKJ,OACbC,MAAOG,EAAKH,MACZ7B,OAAQgC,EAAKhC,OAEhB,CAEc,SAASY,IAAoC,IAApBQ,EAAmB,uDAAH,EACtD,GAAwB1D,EAAAA,EAAAA,UAAc,MAAtC,eAAOqE,EAAP,KAAaG,EAAb,KACA,GAAoCxE,EAAAA,EAAAA,UAAqB+D,GAAzD,eAAOU,EAAP,KAAmBC,EAAnB,KAEMvB,GAAMnC,EAAAA,EAAAA,cAAY,SAACqD,GACvBG,EAAQH,EACT,GAAE,IAyBH,OAvBAM,EAAAA,EAAAA,kBAAgB,WACd,GAAI,qBAAuBC,QAAUP,EAAM,CACzC,IAAMQ,EAAO,yCAAG,mFACdD,OAAOE,uBAAsB,WAE3BJ,EAAcN,EAAmBC,GAClC,IAJa,2CAAH,qDAObQ,IAEA,IAAME,EAAWtB,EAASC,GAAS,IAAKmB,GAKxC,OAHAD,OAAOI,iBAAiB,SAAUD,GAClCH,OAAOI,iBAAiB,SAAUD,GAE3B,WACLH,OAAOK,oBAAoB,SAAUF,GACrCH,OAAOK,oBAAoB,SAAUF,EACtC,CACF,CACF,GAAE,CAACV,EAAMX,IAEH,CAACP,EAAKsB,EAAYJ,EAC1B,C,+BCvFD,WAAiB,C","sources":["components/AssetLabel/AssetLabel.tsx","components/Card/Card.tsx","components/MaticNFTs/MaticNFTs.tsx","components/TransactionButton/TransactionButton.tsx","hooks/useBoundingRect/useBoundingRect.ts","webpack://idle-dashboard-new/./src/components/TransactionButton/progress.css?8ae6"],"sourcesContent":["import type { AssetId } from 'constants/types'\nimport { HStack, TextProps } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\n\ntype AssetLabelProps = {\n  size?: string\n  assetId: AssetId | undefined\n} & TextProps\n\nexport const AssetLabel: React.FC<AssetLabelProps> = ({ assetId, size = 'sm', ...textProps }) => {\n  return (\n    <AssetProvider\n      wrapFlex={false}\n      assetId={assetId}\n    >\n      <HStack\n        alignItems={'center'}\n        justifyContent={'flex-start'}\n      >\n        <AssetProvider.Icon size={size} />\n        <AssetProvider.Name textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'} {...textProps} />\n      </HStack>\n    </AssetProvider>\n  )\n}","import { Heading, Flex, Box, FlexProps, BoxProps, ThemingProps } from '@chakra-ui/react'\n\nexport type CardProps = BoxProps & ThemingProps \n\nconst HeadingTitle = (props: CardProps) => {\n  const { children, ...rest } = props\n  return (\n    <Heading as={'h3'} size={'md'} mb={6} {...rest}>{children}</Heading>\n  )\n}\n\nexport const Card = (props: CardProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Box\n      width={'100%'}\n      position={'relative'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n\nexport const CardFlex = (props: CardProps & FlexProps) => {\n  const { children, layerStyle, ...rest } = props\n  return (\n    <Flex\n      width={'100%'}\n      layerStyle={layerStyle || 'card'}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n\nexport const Dark = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardDark'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Light = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardLight'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nexport const Outline = (props: CardProps) => {\n  const { children, ...rest } = props\n  const layerStyle: string[] = ['cardOutline'].concat(props.layerStyle as string[])\n  return (\n    <Card {...rest} layerStyle={layerStyle}>{children}</Card>\n  )\n}\n\nCard.Dark = Dark\nCard.Light = Light\nCard.Flex = CardFlex\nCard.Outline = Outline\nCard.Heading = HeadingTitle","import { formatDate } from 'helpers/'\nimport React, { useMemo } from 'react'\nimport { Card } from 'components/Card/Card'\nimport { DATETIME_FORMAT } from 'constants/vars'\nimport { Amount } from 'components/Amount/Amount'\nimport { selectUnderlyingToken } from 'selectors/'\nimport { AssetId, MaticNFT } from 'constants/types'\nimport { AssetLabel } from 'components/AssetLabel/AssetLabel'\nimport { Translation } from 'components/Translation/Translation'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { HStack, VStack, SimpleGrid, Text } from '@chakra-ui/react'\nimport { AssetProvider } from 'components/AssetProvider/AssetProvider'\nimport { TransactionButton } from 'components/TransactionButton/TransactionButton'\n\ntype MaticNFTsProps = {\n  assetId: AssetId\n}\nexport const MaticNFTs: React.FC<MaticNFTsProps> = ({ assetId }) => {\n  const { maticNFTs, selectors: { selectAssetById, selectVaultById } } = usePortfolioProvider()\n\n  const asset = useMemo(() => {\n    return selectAssetById && selectAssetById(assetId)\n  }, [selectAssetById, assetId])\n\n  const vault = useMemo(() => {\n    return selectVaultById && selectVaultById(assetId)\n  }, [selectVaultById, assetId])\n\n  const showMaticNFTs = useMemo(() => {\n    return vault && (\"flags\" in vault) && vault.flags?.showMaticNFTs\n  }, [vault])\n  \n  if (!maticNFTs?.length) return null\n\n  return (\n    <VStack\n      spacing={6}\n      width={'100%'}\n      id={'vault-rewards'}\n      alignItems={'flex-start'}\n    >\n      <Translation translation={'defi.claimableNTFs'} component={Text} textStyle={'heading'} fontSize={'h3'} />\n      <SimpleGrid\n        spacing={6}\n        width={'100%'}\n        columns={[1, 3]}\n      >\n        {\n          maticNFTs && maticNFTs.map( (maticNFT: MaticNFT) => {\n            return (\n              <Card\n                p={6}\n                key={`nft_${maticNFT.tokenId}`}\n              >\n                <VStack\n                  spacing={6}\n                  width={'100%'}\n                  alignItems={'flex-start'}\n                >\n                  <HStack\n                    width={'100%'}\n                    justifyContent={'space-between'}\n                  >\n                    <AssetLabel assetId={assetId} />\n                    <Text textStyle={'heading'} fontSize={'h3'} whiteSpace={'nowrap'}>#{maticNFT.tokenId}</Text>\n                  </HStack>\n                  <HStack\n                    spacing={4}\n                    width={'100%'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      maticNFT.status === 'available' ? (\n                        <TransactionButton text={'defi.claim'} vaultId={vault?.id} assetId={asset?.underlyingId} contractSendMethod={maticNFT.contractSendMethod} actionType={'claim'} amount={maticNFT.amount.toString()} disabled={maticNFT.amount.lte(0)} />\n                      ) : (\n                        <VStack\n                          spacing={1}\n                          alignItems={'flex-start'}\n                        >\n                          <Translation component={Text} translation={'defi.estUnlockDate'} textStyle={'captionSmall'} />\n                          <HStack\n                            spacing={1}\n                          >\n                            <Text textStyle={'tableCell'}>{formatDate(maticNFT.unlockTimestamp, DATETIME_FORMAT)}</Text>\n                          </HStack>\n                        </VStack>\n                      )\n                    }\n                    <VStack\n                      spacing={1}\n                      alignItems={'flex-end'}\n                    >\n                      <Translation component={Text} translation={'defi.claimable'} textStyle={'captionSmall'} />\n                      <HStack\n                        spacing={1}\n                        justifyContent={'flex-end'}\n                      >\n                        <Amount value={maticNFT.amount} decimals={8} textStyle={'tableCell'} />\n                        <AssetProvider assetId={asset?.underlyingId}>\n                          <AssetProvider.Name textStyle={'tableCell'} />\n                        </AssetProvider>\n                      </HStack>\n                    </VStack>\n                  </HStack>\n                </VStack>\n              </Card>\n            )\n          })\n        }\n      </SimpleGrid>\n    </VStack>\n  )\n}","import './progress.css'\nimport type { AssetId } from 'constants/types'\nimport { ContractSendMethod } from 'web3-eth-contract'\nimport { MdOutlineDone, MdOutlineClose } from 'react-icons/md'\nimport useBoundingRect from \"hooks/useBoundingRect/useBoundingRect\"\nimport React, { useRef, useCallback, useState, useMemo, useEffect } from 'react'\nimport { TranslationProps, Translation } from 'components/Translation/Translation'\nimport { TransactionStatus, useTransactionManager } from 'contexts/TransactionManagerProvider'\nimport { useTheme, ButtonProps, Button, Box, Flex, Spinner, Text, TextProps } from '@chakra-ui/react'\n\ntype TransactionButtonProps = {\n  text: string\n  amount?: string\n  assetId: AssetId\n  vaultId: AssetId\n  actionType?: string\n  contractSendMethod: ContractSendMethod\n}\n\nexport const TransactionButtonValue: React.FC<TransactionButtonProps & TextProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  const theme = useTheme()\n  const intervalId = useRef<any>(null)\n  const [ remainingTime, setRemainingTime ] = useState<number | null>(null)\n  const { state: { transaction }, cleanTransaction } = useTransactionManager()\n\n  // const transaction: TransactionStatus = useMemo(() => ({\n  //   hash: null,\n  //   error: null,\n  //   status: 'success',\n  //   amount: null,\n  //   assetId: null,\n  //   vaultId: null,\n  //   receipt: null,\n  //   created: null,\n  //   timestamp: null,\n  //   actionType: null,\n  //   transaction: null,\n  //   lastUpdated: null,\n  //   estimatedTime: null,\n  //   confirmationCount: 0,\n  //   contractSendMethod,\n  // }), [contractSendMethod])\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const transactionStarted = useMemo(() => {\n    return isRightTransaction && transaction.status && ['pending', 'success', 'failed'].includes(transaction.status) && transaction.estimatedTime\n  }, [transaction, isRightTransaction])\n\n  const transitionDuration = useMemo(() => {\n    return transactionStarted && transaction.status === 'pending' ? transaction.estimatedTime : 0.5\n  }, [transactionStarted, transaction])\n\n  const startCountdown = useCallback(() => {\n    // console.log('getRemainingTime', transaction)\n    if (!transaction.timestamp || !transaction.estimatedTime) return null\n    const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n    // console.log('getRemainingTime - targetTimestamp', targetTimestamp, Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000)))\n    const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n\n    setRemainingTime(remainingTime)\n    if (!remainingTime) return\n    // console.log('TransactionButton - startCountdown')\n    intervalId.current = setTimeout(() => {\n      startCountdown()\n    }, 1000)\n  }, [transaction])\n\n  useEffect(() => {\n    if (transaction.status === 'success' || transaction.status === 'failed'){\n      // console.log('Clear Interval', intervalId.current)\n      if (intervalId.current){\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n      // Clean transaction if success or failed\n      if (transaction.status === 'success' || transaction.error?.code !== 4001){\n        setTimeout(() => {\n          cleanTransaction()\n        }, 4000)\n      }\n    } else if (transaction.status === 'pending' && !intervalId.current){\n      startCountdown()\n    }\n  }, [transaction.status, startCountdown, cleanTransaction, transaction.error?.code])\n  \n  const textComponent = useMemo(() => {\n    if (isRightTransaction){\n      switch (transaction?.status){\n        case 'created':\n          return (\n            <Spinner size={'sm'} />\n          )\n        case 'pending':\n          if (!transaction.timestamp || !transaction.estimatedTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          // const targetTimestamp = +transaction.timestamp+(transaction.estimatedTime*1000)\n          // const remainingTime = Math.max(0, Math.ceil((targetTimestamp-Date.now())/1000))\n          // Return spinner if long transaction\n          if (!remainingTime){\n            return (\n              <Spinner size={'sm'} />\n            )\n          }\n          return (\n            <Text textStyle={'ctaStatic'}>{remainingTime}s</Text>\n          )\n        case 'success':\n          return (\n            <Flex\n              {...props}\n              alignItems={'center'}\n              justifyContent={'center'}\n            >\n              <MdOutlineDone size={24} color={theme.colors.green['400']} />\n            </Flex>\n          )\n        case 'failed':\n          if (transaction.error?.code !== 4001){\n            return (\n              <Flex\n                {...props}\n                alignItems={'center'}\n                justifyContent={'center'}\n              >\n                <MdOutlineClose size={24} color={theme.colors.red['400']} />\n              </Flex>\n            )\n          }\n        break\n        default:\n        break\n      }\n    }\n    return (\n      <Translation translation={text} textStyle={'ctaStatic'} />\n    )\n  }, [isRightTransaction, remainingTime, transaction, text, theme, props])\n\n  const progressBg = useMemo(() => {\n    switch (transaction.status){\n      case 'success':\n      case 'failed':\n        return 'transparent'\n      default:\n        return 'primary'\n    }\n  }, [transaction])\n\n  return (\n    <>\n      <Flex\n        top={0}\n        left={0}\n        bottom={0}\n        bg={progressBg}\n        overflow={'hidden'}\n        position={'absolute'}\n        alignItems={'center'}\n        justifyContent={'center'}\n        transition={'background 0.5s ease-in-out'}\n        sx={{\n          animationIterationCount: 1,\n          animationFillMode: 'forwards',\n          animationTimingFunction: 'ease-in-out',\n          animationDuration: `${transitionDuration}s`,\n          animationName: transactionStarted ? 'progress' : 'none',\n          animationPlayState: transactionStarted ? 'running' : 'stopped',\n        }}\n      >\n        <Flex\n          left={0}\n          width={props.width}\n          alignItems={'center'}\n          position={'absolute'}\n          justifyContent={'center'}\n          sx={{\n            '> *':{\n              color:'black !important',\n              borderColor:'black !important',\n            }\n          }}\n        >\n          {textComponent}\n        </Flex>\n      </Flex>\n      {textComponent}\n    </>\n  )\n}\n\nexport const TransactionButton: React.FC<TransactionButtonProps & ButtonProps> = ({\n  text,\n  amount,\n  assetId,\n  vaultId,\n  actionType,\n  contractSendMethod,\n  ...props\n}) => {\n  // @ts-ignore\n  const [ref, { width }] = useBoundingRect()\n  const { sendTransaction, state: { transaction } } = useTransactionManager()\n\n  // @ts-ignore\n  const isRightTransaction = useMemo(() => JSON.stringify(transaction?.contractSendMethod?._method) === JSON.stringify(contractSendMethod._method), [transaction, contractSendMethod])\n\n  const onClick = useCallback(() => {\n    if (transaction.status === 'created' || transaction.status === 'pending') return\n    // console.log('onClick', vaultId, assetId, contractSendMethod)\n    return sendTransaction(vaultId, assetId, contractSendMethod, actionType, amount)\n  }, [transaction, vaultId, assetId, contractSendMethod, actionType, amount, sendTransaction])\n\n  const borderColor = useMemo(() => {\n    if (!isRightTransaction) return 'primary'\n    switch (transaction.status){\n      case 'success':\n        return 'green.400'\n      case 'failed':\n        return transaction.error?.code !== 4001 ? 'red.400' : 'primary'\n      default:\n        return 'primary'\n    }\n  }, [isRightTransaction, transaction])\n\n  return (\n    <Button\n      py={2}\n      px={10}\n      overflow={'hidden'}\n      position={'relative'}\n      width={width || 'auto'}\n      borderColor={borderColor}\n      onClick={() => onClick()}\n      ref={ref as typeof useRef}\n      variant={'ctaPrimaryOutline'}\n      transition={'border 0.5s ease-in-out'}\n      {...props}\n    >\n      <TransactionButtonValue text={text} vaultId={vaultId} assetId={assetId} contractSendMethod={contractSendMethod} width={width} />\n    </Button>\n  )\n}","import { requestTimeout } from 'helpers/'\nimport { useState, useCallback, useLayoutEffect } from \"react\";\n\n// let timeoutRequest: any = null;\n\nconst debounce = (delay: number = 0, callback: Function) => {\n  let timeoutId: any = null;\n  return (...args: any[]) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(callback, delay, args);\n\n    // if (timeoutRequest) {\n    //   timeoutRequest.clear();\n    // }\n    // timeoutRequest = requestTimeout(callback, delay);\n  };\n};\n\nexport type Dimensions = {\n  x: number\n  y: number\n  top: number\n  left: number\n  width: number\n  height: number\n  right: number\n  bottom: number\n}\n\nconst initialDimensions: Dimensions = {\n  x: 0,\n  y: 0,\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  right: 0,\n  bottom: 0\n}\n\nfunction getDimensionObject(node: any): Dimensions {\n  const rect = node.getBoundingClientRect();\n  return {\n    x: rect.x,\n    y: rect.y,\n    top: rect.top,\n    left: rect.left,\n    width: rect.width,\n    height: rect.height,\n    right: rect.right,\n    bottom: rect.bottom\n  };\n}\n\nexport default function useBoundingRect(delay: number = 0) {\n  const [node, setNode] = useState<any>(null);\n  const [dimensions, setDimensions] = useState<Dimensions>(initialDimensions);\n\n  const ref = useCallback((node: any) => {\n    setNode(node);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (\"undefined\" !== typeof window && node) {\n      const measure = async () => {\n        window.requestAnimationFrame(() => {\n          // console.log('measure', getDimensionObject(node))\n          setDimensions(getDimensionObject(node))\n        });\n      }\n\n      measure();\n\n      const listener = debounce(delay || 100, measure);\n\n      window.addEventListener(\"resize\", listener);\n      window.addEventListener(\"scroll\", listener);\n      \n      return () => {\n        window.removeEventListener(\"resize\", listener);\n        window.removeEventListener(\"scroll\", listener);\n      };\n    }\n  }, [node, delay]);\n\n  return [ref, dimensions, node];\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["AssetLabel","assetId","size","textProps","AssetProvider","wrapFlex","alignItems","justifyContent","textStyle","fontSize","whiteSpace","Card","props","children","layerStyle","rest","width","position","CardFlex","Dark","concat","Light","Outline","Flex","Heading","as","mb","MaticNFTs","usePortfolioProvider","maticNFTs","selectors","selectAssetById","selectVaultById","asset","useMemo","vault","flags","showMaticNFTs","length","spacing","id","Translation","translation","component","Text","columns","map","maticNFT","p","tokenId","status","TransactionButton","text","vaultId","underlyingId","contractSendMethod","actionType","amount","toString","disabled","lte","formatDate","unlockTimestamp","DATETIME_FORMAT","Amount","value","decimals","TransactionButtonValue","theme","useTheme","intervalId","useRef","useState","remainingTime","setRemainingTime","useTransactionManager","transaction","state","cleanTransaction","isRightTransaction","JSON","stringify","_method","transactionStarted","includes","estimatedTime","transitionDuration","startCountdown","useCallback","timestamp","targetTimestamp","Math","max","ceil","Date","now","current","setTimeout","useEffect","clearInterval","error","code","textComponent","color","colors","green","red","progressBg","top","left","bottom","bg","overflow","transition","sx","animationIterationCount","animationFillMode","animationTimingFunction","animationDuration","animationName","animationPlayState","borderColor","useBoundingRect","ref","sendTransaction","onClick","py","px","variant","debounce","delay","callback","timeoutId","clearTimeout","args","initialDimensions","x","y","height","right","getDimensionObject","node","rect","getBoundingClientRect","setNode","dimensions","setDimensions","useLayoutEffect","window","measure","requestAnimationFrame","listener","addEventListener","removeEventListener"],"sourceRoot":""}