{"version":3,"file":"static/js/7950.fcbe8bd3.chunk.js","mappings":"sPAsBaA,EAA2C,SAAC,GAYlD,IAXLC,EAWI,EAXJA,KACAC,EAUI,EAVJA,SAIAC,GAMI,EATJC,UASI,EARJC,UAQI,EAPJC,cAOI,EANJH,gBAMI,IALJI,OAAAA,OAKI,MALK,QAKL,OAJJC,iBAII,EAHJC,OAAAA,OAGI,MAHI,eAGJ,MAFJC,SAAAA,OAEI,MAFO,SAACC,GAAD,kBAAgBC,EAAAA,EAAAA,IAAiBD,GAAjC,EAEP,MADJE,QAAAA,OACI,MADM,CAAEC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GAC3C,EACiBC,GAAwBC,EAAAA,EAAAA,KAArCC,UAAaF,kBAefG,IAbSC,EAAAA,EAAAA,UAAQ,WACrB,OAAKJ,EACEA,EAAkBhB,GADM,EAEhC,GAAE,CAACA,EAAUgB,KAUII,EAAAA,EAAAA,UAAQ,WACxB,OAAOrB,GAAQ,CACbsB,MAAO,GACPC,QAAS,GAEZ,GAAE,CAACvB,KAEEwB,GAAUH,EAAAA,EAAAA,UAAQ,WACtB,OAAQD,EAAUG,QAAQE,MAC3B,GAAE,CAACL,IAEJ,OACE,SAAC,KAAD,CAAKM,MAAO,OAAQC,EAAG,EAAGrB,OAAQA,EAAlC,UACE,SAAC,EAAAsB,MAAD,CACEpB,MAAOA,EACPR,KAAMoB,EACNI,QAASA,EACTZ,QAASA,EACTiB,UAAWL,EACXf,SAAUA,EACVP,eAAgBA,KAIvB,C","sources":["components/GenericChart/GenericChart.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { abbreviateNumber } from 'helpers/'\nimport { Graph } from 'components/Graph/Graph'\nimport type { AssetId, HistoryTimeframe } from 'constants/types'\nimport { usePortfolioProvider } from 'contexts/PortfolioProvider'\nimport { BalanceChartData } from 'hooks/useBalanceChartData/useBalanceChartData'\n\ntype GenericChartArgs = {\n  color?: string\n  height?: string\n  accountId?: string\n  assetIds: AssetId[]\n  formatFn?: Function\n  percentChange: number\n  isRainbowChart: boolean\n  data?: BalanceChartData\n  timeframe: HistoryTimeframe\n  setPercentChange: (percentChange: number) => void\n  margins?: { top: number; right: number; bottom: number; left: number }\n}\n\nexport const GenericChart: React.FC<GenericChartArgs> = ({\n  data,\n  assetIds,\n  accountId,\n  timeframe,\n  percentChange,\n  isRainbowChart,\n  height = '350px',\n  setPercentChange,\n  color = 'chart.stroke',\n  formatFn = (n: any) => `$${abbreviateNumber(n)}`,\n  margins = { top: 0, right: 0, bottom: 0, left: 0 }\n}) => {\n  const { selectors: { selectAssetsByIds } } = usePortfolioProvider()\n\n  const assets = useMemo(() => {\n    if (!selectAssetsByIds) return []\n    return selectAssetsByIds(assetIds)\n  }, [assetIds, selectAssetsByIds])\n\n  // const color = useMemo(() => {\n  //   const defaultColor = 'chart.stroke'\n  //   if (assets?.length === 1){\n  //     return assets[0]?.color || defaultColor\n  //   }\n  //   return defaultColor\n  // }, [assets])\n\n  const chartData = useMemo((): BalanceChartData => {\n    return data || {\n      total: [],\n      rainbow: []\n    }\n  }, [data])\n\n  const loading = useMemo(() => {\n    return !chartData.rainbow.length\n  }, [chartData])\n\n  return (\n    <Box width={'full'} p={0} height={height}>\n      <Graph\n        color={color}\n        data={chartData}\n        loading={loading}\n        margins={margins}\n        isLoaded={!loading}\n        formatFn={formatFn}\n        isRainbowChart={isRainbowChart}\n      />\n    </Box>\n  )\n}\n"],"names":["GenericChart","data","assetIds","isRainbowChart","accountId","timeframe","percentChange","height","setPercentChange","color","formatFn","n","abbreviateNumber","margins","top","right","bottom","left","selectAssetsByIds","usePortfolioProvider","selectors","chartData","useMemo","total","rainbow","loading","length","width","p","Graph","isLoaded"],"sourceRoot":""}